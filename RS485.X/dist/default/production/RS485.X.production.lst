

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Jan 30 12:23:20 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F882
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	text21,local,class=CODE,merge=1,delta=2
    33                           	psect	text22,local,class=CODE,merge=1,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text23,local,class=CODE,merge=1,delta=2
    36                           	psect	text24,local,class=CODE,merge=1,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 1.41
    40                           ; Generated 25/01/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F882 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001D                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  0087                     	;# 
   111  0089                     	;# 
   112  008C                     	;# 
   113  008D                     	;# 
   114  008E                     	;# 
   115  008F                     	;# 
   116  0090                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0095                     	;# 
   124  0096                     	;# 
   125  0097                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  0105                     	;# 
   135  0107                     	;# 
   136  0108                     	;# 
   137  0109                     	;# 
   138  010C                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010E                     	;# 
   142  010F                     	;# 
   143  0185                     	;# 
   144  0187                     	;# 
   145  0188                     	;# 
   146  0189                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  009F                     	;# 
   210  0105                     	;# 
   211  0107                     	;# 
   212  0108                     	;# 
   213  0109                     	;# 
   214  010C                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  010F                     	;# 
   219  0185                     	;# 
   220  0187                     	;# 
   221  0188                     	;# 
   222  0189                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  0007                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0089                     	;# 
   264  008C                     	;# 
   265  008D                     	;# 
   266  008E                     	;# 
   267  008F                     	;# 
   268  0090                     	;# 
   269  0091                     	;# 
   270  0092                     	;# 
   271  0093                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0094                     	;# 
   275  0095                     	;# 
   276  0096                     	;# 
   277  0097                     	;# 
   278  0098                     	;# 
   279  0099                     	;# 
   280  009A                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  0105                     	;# 
   287  0107                     	;# 
   288  0108                     	;# 
   289  0109                     	;# 
   290  010C                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  0185                     	;# 
   296  0187                     	;# 
   297  0188                     	;# 
   298  0189                     	;# 
   299  018C                     	;# 
   300  018D                     	;# 
   301  0000                     	;# 
   302  0001                     	;# 
   303  0002                     	;# 
   304  0003                     	;# 
   305  0004                     	;# 
   306  0005                     	;# 
   307  0006                     	;# 
   308  0007                     	;# 
   309  0009                     	;# 
   310  000A                     	;# 
   311  000B                     	;# 
   312  000C                     	;# 
   313  000D                     	;# 
   314  000E                     	;# 
   315  000E                     	;# 
   316  000F                     	;# 
   317  0010                     	;# 
   318  0011                     	;# 
   319  0012                     	;# 
   320  0013                     	;# 
   321  0014                     	;# 
   322  0015                     	;# 
   323  0015                     	;# 
   324  0016                     	;# 
   325  0017                     	;# 
   326  0018                     	;# 
   327  0019                     	;# 
   328  001A                     	;# 
   329  001B                     	;# 
   330  001B                     	;# 
   331  001C                     	;# 
   332  001D                     	;# 
   333  001E                     	;# 
   334  001F                     	;# 
   335  0081                     	;# 
   336  0085                     	;# 
   337  0086                     	;# 
   338  0087                     	;# 
   339  0089                     	;# 
   340  008C                     	;# 
   341  008D                     	;# 
   342  008E                     	;# 
   343  008F                     	;# 
   344  0090                     	;# 
   345  0091                     	;# 
   346  0092                     	;# 
   347  0093                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0094                     	;# 
   351  0095                     	;# 
   352  0096                     	;# 
   353  0097                     	;# 
   354  0098                     	;# 
   355  0099                     	;# 
   356  009A                     	;# 
   357  009B                     	;# 
   358  009C                     	;# 
   359  009D                     	;# 
   360  009E                     	;# 
   361  009F                     	;# 
   362  0105                     	;# 
   363  0107                     	;# 
   364  0108                     	;# 
   365  0109                     	;# 
   366  010C                     	;# 
   367  010C                     	;# 
   368  010D                     	;# 
   369  010E                     	;# 
   370  010F                     	;# 
   371  0185                     	;# 
   372  0187                     	;# 
   373  0188                     	;# 
   374  0189                     	;# 
   375  018C                     	;# 
   376  018D                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000D                     	;# 
   390  000E                     	;# 
   391  000E                     	;# 
   392  000F                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0013                     	;# 
   397  0014                     	;# 
   398  0015                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  001D                     	;# 
   409  001E                     	;# 
   410  001F                     	;# 
   411  0081                     	;# 
   412  0085                     	;# 
   413  0086                     	;# 
   414  0087                     	;# 
   415  0089                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  008F                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0093                     	;# 
   424  0093                     	;# 
   425  0093                     	;# 
   426  0094                     	;# 
   427  0095                     	;# 
   428  0096                     	;# 
   429  0097                     	;# 
   430  0098                     	;# 
   431  0099                     	;# 
   432  009A                     	;# 
   433  009B                     	;# 
   434  009C                     	;# 
   435  009D                     	;# 
   436  009E                     	;# 
   437  009F                     	;# 
   438  0105                     	;# 
   439  0107                     	;# 
   440  0108                     	;# 
   441  0109                     	;# 
   442  010C                     	;# 
   443  010C                     	;# 
   444  010D                     	;# 
   445  010E                     	;# 
   446  010F                     	;# 
   447  0185                     	;# 
   448  0187                     	;# 
   449  0188                     	;# 
   450  0189                     	;# 
   451  018C                     	;# 
   452  018D                     	;# 
   453                           
   454                           	psect	nvCOMMON
   455  007A                     __pnvCOMMON:	
   456  007A                     _ECU_ID:	
   457  007A                     	ds	1
   458  0013                     _SSPBUF	set	19
   459  000D                     _PIR2bits	set	13
   460  0014                     _SSPCON	set	20
   461  000C                     _PIR1bits	set	12
   462  001A                     _RCREG	set	26
   463  001F                     _ADCON0	set	31
   464  0019                     _TXREG	set	25
   465  0038                     _RC0	set	56
   466  0065                     _RCIF	set	101
   467  00C4                     _CREN	set	196
   468  005F                     _GIE	set	95
   469  005E                     _PEIE	set	94
   470  00C7                     _SPEN	set	199
   471  0093                     _SSPADD	set	147
   472  0091                     _SSPCON2	set	145
   473  0094                     _SSPSTAT	set	148
   474  0087                     _TRISCbits	set	135
   475  0099                     _SPBRG	set	153
   476  0085                     _TRISA	set	133
   477  048B                     _RCEN	set	1163
   478  04A0                     _BF	set	1184
   479  048C                     _ACKEN	set	1164
   480  048D                     _ACKDT	set	1165
   481  0489                     _RSEN	set	1161
   482  048A                     _PEN	set	1162
   483  0488                     _SEN	set	1160
   484  0465                     _RCIE	set	1125
   485  04C5                     _TXEN	set	1221
   486  043F                     _TRISC7	set	1087
   487  043E                     _TRISC6	set	1086
   488  04C4                     _SYNC	set	1220
   489  04C2                     _BRGH	set	1218
   490  0438                     _TRISC0	set	1080
   491  04C1                     _TRMT	set	1217
   492  0188                     _ANSEL	set	392
   493                           
   494                           ; #config settings
   495  0000                     
   496                           	psect	cinit
   497  0011                     start_initialization:	
   498  0011                     __initialization:	
   499                           
   500                           ; Clear objects allocated to COMMON
   501  0011  01FB               	clrf	__pbssCOMMON& (0+127)
   502                           
   503                           ; Clear objects allocated to BANK0
   504  0012  1383               	bcf	3,7	;select IRP bank0
   505  0013  304F               	movlw	low __pbssBANK0
   506  0014  0084               	movwf	4
   507  0015  305F               	movlw	low (__pbssBANK0+16)
   508  0016  2340               	fcall	clear_ram0
   509  0017                     end_of_initialization:	
   510                           ;End of C runtime variable initialization code
   511                           
   512  0017                     __end_of__initialization:	
   513  0017  0183               	clrf	3
   514  0018  2819               	ljmp	_main	;jump to C main() function
   515                           
   516                           	psect	bssCOMMON
   517  007B                     __pbssCOMMON:	
   518  007B                     _RECEIVED_ECU_ID:	
   519  007B                     	ds	1
   520                           
   521                           	psect	bssBANK0
   522  004F                     __pbssBANK0:	
   523  004F                     get_averageZ@OutPut:	
   524  004F                     	ds	2
   525  0051                     get_averageY@OutPut:	
   526  0051                     	ds	2
   527  0053                     get_averageX@OutPut:	
   528  0053                     	ds	2
   529  0055                     _Data_Buffer:	
   530  0055                     	ds	10
   531                           
   532                           	psect	clrtext
   533  0340                     clear_ram0:	
   534                           ;	Called with FSR containing the base address, and
   535                           ;	W with the last address+1
   536                           
   537  0340  0064               	clrwdt	;clear the watchdog before getting into this loop
   538  0341                     clrloop0:	
   539  0341  0180               	clrf	0	;clear RAM location pointed to by FSR
   540  0342  0A84               	incf	4,f	;increment pointer
   541  0343  0604               	xorwf	4,w	;XOR with final address
   542  0344  1903               	btfsc	3,2	;have we reached the end yet?
   543  0345  3400               	retlw	0	;all done for this memory range, return
   544  0346  0604               	xorwf	4,w	;XOR again to restore value
   545  0347  2B41               	goto	clrloop0	;do the next byte
   546                           
   547                           	psect	cstackCOMMON
   548  0070                     __pcstackCOMMON:	
   549  0070                     ?_UART_vidInit:	
   550  0070                     ?_I2CInit:	
   551                           ; 1 bytes @ 0x0
   552                           
   553  0070                     ?_ini_adxl345:	
   554                           ; 1 bytes @ 0x0
   555                           
   556  0070                     ?_I2CStart:	
   557                           ; 1 bytes @ 0x0
   558                           
   559  0070                     ?_I2CSend:	
   560                           ; 1 bytes @ 0x0
   561                           
   562  0070                     ?_I2CRestart:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0070                     ?_I2CRead:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0070                     ?_I2CAck:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0070                     ?_I2CNak:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ?_I2CStop:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ?_UART_u8GetNodeID:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0070                     ?_RS845_ManageState:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0070                     ?_UART_vidSend:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ?_UART_Write:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0070                     ?_system_init:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ?_main:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ?_UART_vidNewDataReceived:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ?_I2CWait:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     UART_vidSend@Len:	
   602                           ; 1 bytes @ 0x0
   603                           
   604                           
   605                           ; 2 bytes @ 0x0
   606  0070                     	ds	2
   607  0072                     ??_UART_vidSend:	
   608                           
   609                           ; 1 bytes @ 0x2
   610  0072                     	ds	1
   611  0073                     UART_vidSend@data:	
   612                           
   613                           ; 1 bytes @ 0x3
   614  0073                     	ds	1
   615  0074                     UART_vidSend@UART_u16Index:	
   616                           
   617                           ; 2 bytes @ 0x4
   618  0074                     	ds	2
   619  0076                     ??_RS845_ManageState:	
   620  0076                     ??_UART_vidNewDataReceived:	
   621                           ; 1 bytes @ 0x6
   622                           
   623                           
   624                           ; 1 bytes @ 0x6
   625  0076                     	ds	4
   626                           
   627                           	psect	cstackBANK0
   628  0020                     __pcstackBANK0:	
   629  0020                     ??_UART_vidInit:	
   630  0020                     ??_I2CInit:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0020                     ??_I2CStart:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0020                     ??_I2CSend:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0020                     ??_I2CRestart:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0020                     ??_I2CRead:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0020                     ??_I2CAck:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0020                     ??_I2CNak:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0020                     ??_I2CStop:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0020                     ??_UART_u8GetNodeID:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0020                     ??_UART_Write:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0020                     ??_system_init:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0020                     ??_I2CWait:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0020                     ?___wmul:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0020                     UART_Write@data:	
   670                           ; 2 bytes @ 0x0
   671                           
   672  0020                     I2CSend@dat:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0020                     ___wmul@multiplier:	
   676                           ; 1 bytes @ 0x0
   677                           
   678                           
   679                           ; 2 bytes @ 0x0
   680  0020                     	ds	1
   681  0021                     ?_E_Write:	
   682  0021                     I2CRead@temp:	
   683                           ; 1 bytes @ 0x1
   684                           
   685  0021                     E_Write@addr:	
   686                           ; 1 bytes @ 0x1
   687                           
   688                           
   689                           ; 2 bytes @ 0x1
   690  0021                     	ds	1
   691  0022                     ?_E_Read:	
   692  0022                     E_Read@addr:	
   693                           ; 1 bytes @ 0x2
   694                           
   695  0022                     ___wmul@multiplicand:	
   696                           ; 2 bytes @ 0x2
   697                           
   698                           
   699                           ; 2 bytes @ 0x2
   700  0022                     	ds	1
   701  0023                     E_Write@ch:	
   702                           
   703                           ; 1 bytes @ 0x3
   704  0023                     	ds	1
   705  0024                     ??_ini_adxl345:	
   706  0024                     ??_E_Read:	
   707                           ; 1 bytes @ 0x4
   708                           
   709  0024                     ??_E_Write:	
   710                           ; 1 bytes @ 0x4
   711                           
   712  0024                     ??___wmul:	
   713                           ; 1 bytes @ 0x4
   714                           
   715  0024                     ___wmul@product:	
   716                           ; 1 bytes @ 0x4
   717                           
   718                           
   719                           ; 2 bytes @ 0x4
   720  0024                     	ds	1
   721  0025                     E_Read@ch:	
   722                           
   723                           ; 1 bytes @ 0x5
   724  0025                     	ds	1
   725  0026                     ?___awdiv:	
   726  0026                     ___awdiv@divisor:	
   727                           ; 2 bytes @ 0x6
   728                           
   729                           
   730                           ; 2 bytes @ 0x6
   731  0026                     	ds	2
   732  0028                     ___awdiv@dividend:	
   733                           
   734                           ; 2 bytes @ 0x8
   735  0028                     	ds	2
   736  002A                     ??___awdiv:	
   737                           
   738                           ; 1 bytes @ 0xA
   739  002A                     	ds	1
   740  002B                     ___awdiv@counter:	
   741                           
   742                           ; 1 bytes @ 0xB
   743  002B                     	ds	1
   744  002C                     ___awdiv@sign:	
   745                           
   746                           ; 1 bytes @ 0xC
   747  002C                     	ds	1
   748  002D                     ___awdiv@quotient:	
   749                           
   750                           ; 2 bytes @ 0xD
   751  002D                     	ds	2
   752  002F                     ?_get_averageX:	
   753  002F                     ?_get_averageY:	
   754                           ; 2 bytes @ 0xF
   755                           
   756  002F                     ?_get_averageZ:	
   757                           ; 2 bytes @ 0xF
   758                           
   759  002F                     get_averageX@Data:	
   760                           ; 2 bytes @ 0xF
   761                           
   762  002F                     get_averageY@Data:	
   763                           ; 2 bytes @ 0xF
   764                           
   765  002F                     get_averageZ@Data:	
   766                           ; 2 bytes @ 0xF
   767                           
   768                           
   769                           ; 2 bytes @ 0xF
   770  002F                     	ds	2
   771  0031                     ??_get_averageX:	
   772  0031                     ??_get_averageY:	
   773                           ; 1 bytes @ 0x11
   774                           
   775  0031                     ??_get_averageZ:	
   776                           ; 1 bytes @ 0x11
   777                           
   778                           
   779                           ; 1 bytes @ 0x11
   780  0031                     	ds	2
   781  0033                     ??_main:	
   782                           
   783                           ; 1 bytes @ 0x13
   784  0033                     	ds	4
   785  0037                     main@id:	
   786                           
   787                           ; 2 bytes @ 0x17
   788  0037                     	ds	2
   789  0039                     main@pow:	
   790                           
   791                           ; 2 bytes @ 0x19
   792  0039                     	ds	2
   793  003B                     main@bw_rate:	
   794                           
   795                           ; 2 bytes @ 0x1B
   796  003B                     	ds	2
   797  003D                     main@X:	
   798                           
   799                           ; 2 bytes @ 0x1D
   800  003D                     	ds	2
   801  003F                     main@Y:	
   802                           
   803                           ; 2 bytes @ 0x1F
   804  003F                     	ds	2
   805  0041                     main@Z:	
   806                           
   807                           ; 2 bytes @ 0x21
   808  0041                     	ds	2
   809  0043                     main@XL:	
   810                           
   811                           ; 1 bytes @ 0x23
   812  0043                     	ds	1
   813  0044                     main@XH:	
   814                           
   815                           ; 1 bytes @ 0x24
   816  0044                     	ds	1
   817  0045                     main@YH:	
   818                           
   819                           ; 1 bytes @ 0x25
   820  0045                     	ds	1
   821  0046                     main@YL:	
   822                           
   823                           ; 1 bytes @ 0x26
   824  0046                     	ds	1
   825  0047                     main@ZH:	
   826                           
   827                           ; 1 bytes @ 0x27
   828  0047                     	ds	1
   829  0048                     main@ZL:	
   830                           
   831                           ; 1 bytes @ 0x28
   832  0048                     	ds	1
   833  0049                     main@XAVG:	
   834                           
   835                           ; 2 bytes @ 0x29
   836  0049                     	ds	2
   837  004B                     main@YAVG:	
   838                           
   839                           ; 2 bytes @ 0x2B
   840  004B                     	ds	2
   841  004D                     main@ZAVG:	
   842                           
   843                           ; 2 bytes @ 0x2D
   844  004D                     	ds	2
   845                           
   846                           	psect	maintext
   847  0019                     __pmaintext:	
   848 ;;
   849 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   850 ;;
   851 ;; *************** function _main *****************
   852 ;; Defined at:
   853 ;;		line 29 in file "main.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;		None
   856 ;; Auto vars:     Size  Location     Type
   857 ;;  ZAVG            2   45[BANK0 ] unsigned short 
   858 ;;  YAVG            2   43[BANK0 ] unsigned short 
   859 ;;  XAVG            2   41[BANK0 ] unsigned short 
   860 ;;  Z               2   33[BANK0 ] short 
   861 ;;  Y               2   31[BANK0 ] short 
   862 ;;  X               2   29[BANK0 ] short 
   863 ;;  bw_rate         2   27[BANK0 ] int 
   864 ;;  pow             2   25[BANK0 ] int 
   865 ;;  id              2   23[BANK0 ] int 
   866 ;;  i               2    0        int 
   867 ;;  ZL              1   40[BANK0 ] unsigned char 
   868 ;;  ZH              1   39[BANK0 ] unsigned char 
   869 ;;  YL              1   38[BANK0 ] unsigned char 
   870 ;;  YH              1   37[BANK0 ] unsigned char 
   871 ;;  XH              1   36[BANK0 ] unsigned char 
   872 ;;  XL              1   35[BANK0 ] unsigned char 
   873 ;; Return value:  Size  Location     Type
   874 ;;                  1    wreg      void 
   875 ;; Registers used:
   876 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   877 ;; Tracked objects:
   878 ;;		On entry : B00/0
   879 ;;		On exit  : 0/0
   880 ;;		Unchanged: 0/0
   881 ;; Data sizes:     COMMON   BANK0   BANK1
   882 ;;      Params:         0       0       0
   883 ;;      Locals:         0      24       0
   884 ;;      Temps:          0       4       0
   885 ;;      Totals:         0      28       0
   886 ;;Total ram usage:       28 bytes
   887 ;; Hardware stack levels required when called:    7
   888 ;; This function calls:
   889 ;;		_E_Read
   890 ;;		_I2CAck
   891 ;;		_I2CInit
   892 ;;		_I2CNak
   893 ;;		_I2CRead
   894 ;;		_I2CRestart
   895 ;;		_I2CSend
   896 ;;		_I2CStart
   897 ;;		_I2CStop
   898 ;;		_UART_Write
   899 ;;		_UART_vidInit
   900 ;;		_get_averageX
   901 ;;		_get_averageY
   902 ;;		_get_averageZ
   903 ;;		_ini_adxl345
   904 ;;		_system_init
   905 ;; This function is called by:
   906 ;;		Startup code after reset
   907 ;; This function uses a non-reentrant model
   908 ;;
   909                           
   910                           
   911                           ;psect for function _main
   912  0019                     _main:	
   913                           
   914                           ;main.c: 31: int id, pow, bw_rate;
   915                           ;main.c: 32: char XL,XH,YH,YL,ZH,ZL;
   916                           ;main.c: 33: short X, Y, Z;
   917                           ;main.c: 34: unsigned short XAVG, YAVG, ZAVG;
   918                           ;main.c: 35: int i;
   919                           ;main.c: 36: system_init();
   920                           
   921                           ;incstack = 0
   922                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   923  0019  2314               	fcall	_system_init
   924                           
   925                           ;main.c: 37: UART_vidInit();
   926  001A  2291               	fcall	_UART_vidInit
   927                           
   928                           ;main.c: 40: I2CInit();
   929  001B  22D7               	fcall	_I2CInit
   930                           
   931                           ;main.c: 42: ini_adxl345();
   932  001C  2162               	fcall	_ini_adxl345
   933                           
   934                           ;main.c: 44: id = E_Read(0);
   935  001D  3000               	movlw	0
   936  001E  1283               	bcf	3,5	;RP0=0, select bank0
   937  001F  1303               	bcf	3,6	;RP1=0, select bank0
   938  0020  00A2               	movwf	E_Read@addr
   939  0021  00A3               	movwf	E_Read@addr+1
   940  0022  22AC               	fcall	_E_Read
   941  0023  1283               	bcf	3,5	;RP0=0, select bank0
   942  0024  1303               	bcf	3,6	;RP1=0, select bank0
   943  0025  00B3               	movwf	??_main
   944  0026  01B4               	clrf	??_main+1
   945  0027  0833               	movf	??_main,w
   946  0028  00B7               	movwf	main@id
   947  0029  0834               	movf	??_main+1,w
   948  002A  00B8               	movwf	main@id+1
   949                           
   950                           ;main.c: 45: UART_Write(id);
   951  002B  0837               	movf	main@id,w
   952  002C  2320               	fcall	_UART_Write
   953                           
   954                           ;main.c: 46: _delay((unsigned long)((10)*(20000000/4000.0)));
   955  002D  3041               	movlw	65
   956  002E  1283               	bcf	3,5	;RP0=0, select bank0
   957  002F  1303               	bcf	3,6	;RP1=0, select bank0
   958  0030  00B4               	movwf	??_main+1
   959  0031  30EE               	movlw	238
   960  0032  00B3               	movwf	??_main
   961  0033                     u637:	
   962  0033  0BB3               	decfsz	??_main,f
   963  0034  2833               	goto	u637
   964  0035  0BB4               	decfsz	??_main+1,f
   965  0036  2833               	goto	u637
   966                           
   967                           ;main.c: 47: pow = E_Read(0x2D);
   968  0037  302D               	movlw	45
   969  0038  1283               	bcf	3,5	;RP0=0, select bank0
   970  0039  1303               	bcf	3,6	;RP1=0, select bank0
   971  003A  00A2               	movwf	E_Read@addr
   972  003B  3000               	movlw	0
   973  003C  00A3               	movwf	E_Read@addr+1
   974  003D  22AC               	fcall	_E_Read
   975  003E  1283               	bcf	3,5	;RP0=0, select bank0
   976  003F  1303               	bcf	3,6	;RP1=0, select bank0
   977  0040  00B3               	movwf	??_main
   978  0041  01B4               	clrf	??_main+1
   979  0042  0833               	movf	??_main,w
   980  0043  00B9               	movwf	main@pow
   981  0044  0834               	movf	??_main+1,w
   982  0045  00BA               	movwf	main@pow+1
   983                           
   984                           ;main.c: 48: UART_Write(pow);
   985  0046  0839               	movf	main@pow,w
   986  0047  2320               	fcall	_UART_Write
   987                           
   988                           ;main.c: 49: _delay((unsigned long)((10)*(20000000/4000.0)));
   989  0048  3041               	movlw	65
   990  0049  1283               	bcf	3,5	;RP0=0, select bank0
   991  004A  1303               	bcf	3,6	;RP1=0, select bank0
   992  004B  00B4               	movwf	??_main+1
   993  004C  30EE               	movlw	238
   994  004D  00B3               	movwf	??_main
   995  004E                     u647:	
   996  004E  0BB3               	decfsz	??_main,f
   997  004F  284E               	goto	u647
   998  0050  0BB4               	decfsz	??_main+1,f
   999  0051  284E               	goto	u647
  1000                           
  1001                           ;main.c: 50: bw_rate = E_Read(0x2C);
  1002  0052  302C               	movlw	44
  1003  0053  1283               	bcf	3,5	;RP0=0, select bank0
  1004  0054  1303               	bcf	3,6	;RP1=0, select bank0
  1005  0055  00A2               	movwf	E_Read@addr
  1006  0056  3000               	movlw	0
  1007  0057  00A3               	movwf	E_Read@addr+1
  1008  0058  22AC               	fcall	_E_Read
  1009  0059  1283               	bcf	3,5	;RP0=0, select bank0
  1010  005A  1303               	bcf	3,6	;RP1=0, select bank0
  1011  005B  00B3               	movwf	??_main
  1012  005C  01B4               	clrf	??_main+1
  1013  005D  0833               	movf	??_main,w
  1014  005E  00BB               	movwf	main@bw_rate
  1015  005F  0834               	movf	??_main+1,w
  1016  0060  00BC               	movwf	main@bw_rate+1
  1017                           
  1018                           ;main.c: 51: UART_Write(bw_rate);
  1019  0061  083B               	movf	main@bw_rate,w
  1020  0062  2320               	fcall	_UART_Write
  1021  0063                     l1252:	
  1022                           ;main.c: 54: while(1)
  1023                           
  1024                           
  1025                           ;main.c: 55: {
  1026                           ;main.c: 56: X = Y = Z = 0;
  1027  0063  1283               	bcf	3,5	;RP0=0, select bank0
  1028  0064  1303               	bcf	3,6	;RP1=0, select bank0
  1029  0065  01C1               	clrf	main@Z
  1030  0066  01C2               	clrf	main@Z+1
  1031  0067  01BF               	clrf	main@Y
  1032  0068  01C0               	clrf	main@Y+1
  1033  0069  01BD               	clrf	main@X
  1034  006A  01BE               	clrf	main@X+1
  1035                           
  1036                           ;main.c: 58: I2CStart();
  1037  006B  235C               	fcall	_I2CStart
  1038                           
  1039                           ;main.c: 59: I2CSend(0xA6);
  1040  006C  30A6               	movlw	166
  1041  006D  232C               	fcall	_I2CSend
  1042                           
  1043                           ;main.c: 60: I2CSend(50);
  1044  006E  3032               	movlw	50
  1045  006F  232C               	fcall	_I2CSend
  1046                           
  1047                           ;main.c: 61: I2CRestart();
  1048  0070  2362               	fcall	_I2CRestart
  1049                           
  1050                           ;main.c: 62: I2CSend(0xA7);
  1051  0071  30A7               	movlw	167
  1052  0072  232C               	fcall	_I2CSend
  1053                           
  1054                           ;main.c: 63: XL = I2CRead();
  1055  0073  22EA               	fcall	_I2CRead
  1056  0074  1283               	bcf	3,5	;RP0=0, select bank0
  1057  0075  1303               	bcf	3,6	;RP1=0, select bank0
  1058  0076  00B3               	movwf	??_main
  1059  0077  0833               	movf	??_main,w
  1060  0078  00C3               	movwf	main@XL
  1061                           
  1062                           ;main.c: 64: I2CAck();
  1063  0079  2348               	fcall	_I2CAck
  1064                           
  1065                           ;main.c: 65: XH = I2CRead();
  1066  007A  22EA               	fcall	_I2CRead
  1067  007B  1283               	bcf	3,5	;RP0=0, select bank0
  1068  007C  1303               	bcf	3,6	;RP1=0, select bank0
  1069  007D  00B3               	movwf	??_main
  1070  007E  0833               	movf	??_main,w
  1071  007F  00C4               	movwf	main@XH
  1072                           
  1073                           ;main.c: 66: I2CAck();
  1074  0080  2348               	fcall	_I2CAck
  1075                           
  1076                           ;main.c: 67: YL = I2CRead();
  1077  0081  22EA               	fcall	_I2CRead
  1078  0082  1283               	bcf	3,5	;RP0=0, select bank0
  1079  0083  1303               	bcf	3,6	;RP1=0, select bank0
  1080  0084  00B3               	movwf	??_main
  1081  0085  0833               	movf	??_main,w
  1082  0086  00C6               	movwf	main@YL
  1083                           
  1084                           ;main.c: 68: I2CAck();
  1085  0087  2348               	fcall	_I2CAck
  1086                           
  1087                           ;main.c: 69: YH = I2CRead();
  1088  0088  22EA               	fcall	_I2CRead
  1089  0089  1283               	bcf	3,5	;RP0=0, select bank0
  1090  008A  1303               	bcf	3,6	;RP1=0, select bank0
  1091  008B  00B3               	movwf	??_main
  1092  008C  0833               	movf	??_main,w
  1093  008D  00C5               	movwf	main@YH
  1094                           
  1095                           ;main.c: 70: I2CAck();
  1096  008E  2348               	fcall	_I2CAck
  1097                           
  1098                           ;main.c: 71: ZL = I2CRead();
  1099  008F  22EA               	fcall	_I2CRead
  1100  0090  1283               	bcf	3,5	;RP0=0, select bank0
  1101  0091  1303               	bcf	3,6	;RP1=0, select bank0
  1102  0092  00B3               	movwf	??_main
  1103  0093  0833               	movf	??_main,w
  1104  0094  00C8               	movwf	main@ZL
  1105                           
  1106                           ;main.c: 72: I2CAck();
  1107  0095  2348               	fcall	_I2CAck
  1108                           
  1109                           ;main.c: 73: ZH = I2CRead();
  1110  0096  22EA               	fcall	_I2CRead
  1111  0097  1283               	bcf	3,5	;RP0=0, select bank0
  1112  0098  1303               	bcf	3,6	;RP1=0, select bank0
  1113  0099  00B3               	movwf	??_main
  1114  009A  0833               	movf	??_main,w
  1115  009B  00C7               	movwf	main@ZH
  1116                           
  1117                           ;main.c: 74: I2CNak();
  1118  009C  234F               	fcall	_I2CNak
  1119                           
  1120                           ;main.c: 75: I2CStop();
  1121  009D  2356               	fcall	_I2CStop
  1122                           
  1123                           ;main.c: 77: X = ((XH<<8) | XL);
  1124  009E  1283               	bcf	3,5	;RP0=0, select bank0
  1125  009F  1303               	bcf	3,6	;RP1=0, select bank0
  1126  00A0  0843               	movf	main@XL,w
  1127  00A1  00B3               	movwf	??_main
  1128  00A2  01B4               	clrf	??_main+1
  1129  00A3  0844               	movf	main@XH,w
  1130  00A4  00B5               	movwf	??_main+2
  1131  00A5  01B6               	clrf	??_main+3
  1132  00A6  0835               	movf	??_main+2,w
  1133  00A7  00B6               	movwf	??_main+3
  1134  00A8  01B5               	clrf	??_main+2
  1135  00A9  0833               	movf	??_main,w
  1136  00AA  0435               	iorwf	??_main+2,w
  1137  00AB  00BD               	movwf	main@X
  1138  00AC  0834               	movf	??_main+1,w
  1139  00AD  0436               	iorwf	??_main+3,w
  1140  00AE  00BE               	movwf	main@X+1
  1141                           
  1142                           ;main.c: 78: Y = ((YH<<8) | YL);
  1143  00AF  0846               	movf	main@YL,w
  1144  00B0  00B3               	movwf	??_main
  1145  00B1  01B4               	clrf	??_main+1
  1146  00B2  0845               	movf	main@YH,w
  1147  00B3  00B5               	movwf	??_main+2
  1148  00B4  01B6               	clrf	??_main+3
  1149  00B5  0835               	movf	??_main+2,w
  1150  00B6  00B6               	movwf	??_main+3
  1151  00B7  01B5               	clrf	??_main+2
  1152  00B8  0833               	movf	??_main,w
  1153  00B9  0435               	iorwf	??_main+2,w
  1154  00BA  00BF               	movwf	main@Y
  1155  00BB  0834               	movf	??_main+1,w
  1156  00BC  0436               	iorwf	??_main+3,w
  1157  00BD  00C0               	movwf	main@Y+1
  1158                           
  1159                           ;main.c: 79: Z = ((ZH<<8) | ZL);
  1160  00BE  0848               	movf	main@ZL,w
  1161  00BF  00B3               	movwf	??_main
  1162  00C0  01B4               	clrf	??_main+1
  1163  00C1  0847               	movf	main@ZH,w
  1164  00C2  00B5               	movwf	??_main+2
  1165  00C3  01B6               	clrf	??_main+3
  1166  00C4  0835               	movf	??_main+2,w
  1167  00C5  00B6               	movwf	??_main+3
  1168  00C6  01B5               	clrf	??_main+2
  1169  00C7  0833               	movf	??_main,w
  1170  00C8  0435               	iorwf	??_main+2,w
  1171  00C9  00C1               	movwf	main@Z
  1172  00CA  0834               	movf	??_main+1,w
  1173  00CB  0436               	iorwf	??_main+3,w
  1174  00CC  00C2               	movwf	main@Z+1
  1175                           
  1176                           ;main.c: 82: XAVG = get_averageX(X);
  1177  00CD  083E               	movf	main@X+1,w
  1178  00CE  00B0               	movwf	get_averageX@Data+1
  1179  00CF  083D               	movf	main@X,w
  1180  00D0  00AF               	movwf	get_averageX@Data
  1181  00D1  2211               	fcall	_get_averageX
  1182  00D2  1283               	bcf	3,5	;RP0=0, select bank0
  1183  00D3  1303               	bcf	3,6	;RP1=0, select bank0
  1184  00D4  0830               	movf	?_get_averageX+1,w
  1185  00D5  00CA               	movwf	main@XAVG+1
  1186  00D6  082F               	movf	?_get_averageX,w
  1187  00D7  00C9               	movwf	main@XAVG
  1188                           
  1189                           ;main.c: 83: YAVG = get_averageY(Y);
  1190  00D8  0840               	movf	main@Y+1,w
  1191  00D9  00B0               	movwf	get_averageY@Data+1
  1192  00DA  083F               	movf	main@Y,w
  1193  00DB  00AF               	movwf	get_averageY@Data
  1194  00DC  21DF               	fcall	_get_averageY
  1195  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1196  00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1197  00DF  0830               	movf	?_get_averageY+1,w
  1198  00E0  00CC               	movwf	main@YAVG+1
  1199  00E1  082F               	movf	?_get_averageY,w
  1200  00E2  00CB               	movwf	main@YAVG
  1201                           
  1202                           ;main.c: 84: ZAVG = get_averageZ(Z);
  1203  00E3  0842               	movf	main@Z+1,w
  1204  00E4  00B0               	movwf	get_averageZ@Data+1
  1205  00E5  0841               	movf	main@Z,w
  1206  00E6  00AF               	movwf	get_averageZ@Data
  1207  00E7  21AD               	fcall	_get_averageZ
  1208  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  1209  00E9  1303               	bcf	3,6	;RP1=0, select bank0
  1210  00EA  0830               	movf	?_get_averageZ+1,w
  1211  00EB  00CE               	movwf	main@ZAVG+1
  1212  00EC  082F               	movf	?_get_averageZ,w
  1213  00ED  00CD               	movwf	main@ZAVG
  1214                           
  1215                           ;main.c: 86: Data_Buffer.HX = XAVG>>8; Data_Buffer.LX=XAVG;
  1216  00EE  084A               	movf	main@XAVG+1,w
  1217  00EF  00B3               	movwf	??_main
  1218  00F0  0833               	movf	??_main,w
  1219  00F1  00D8               	movwf	_Data_Buffer+3
  1220  00F2  0849               	movf	main@XAVG,w
  1221  00F3  00B3               	movwf	??_main
  1222  00F4  0833               	movf	??_main,w
  1223  00F5  00D9               	movwf	_Data_Buffer+4
  1224                           
  1225                           ;main.c: 87: Data_Buffer.HY = YAVG>>8; Data_Buffer.LY=YAVG;
  1226  00F6  084C               	movf	main@YAVG+1,w
  1227  00F7  00B3               	movwf	??_main
  1228  00F8  0833               	movf	??_main,w
  1229  00F9  00DA               	movwf	_Data_Buffer+5
  1230  00FA  084B               	movf	main@YAVG,w
  1231  00FB  00B3               	movwf	??_main
  1232  00FC  0833               	movf	??_main,w
  1233  00FD  00DB               	movwf	_Data_Buffer+6
  1234                           
  1235                           ;main.c: 88: Data_Buffer.HZ = ZAVG>>8; Data_Buffer.LZ=ZAVG;
  1236  00FE  084E               	movf	main@ZAVG+1,w
  1237  00FF  00B3               	movwf	??_main
  1238  0100  0833               	movf	??_main,w
  1239  0101  00DC               	movwf	_Data_Buffer+7
  1240  0102  084D               	movf	main@ZAVG,w
  1241  0103  00B3               	movwf	??_main
  1242  0104  0833               	movf	??_main,w
  1243  0105  00DD               	movwf	_Data_Buffer+8
  1244  0106  2863               	goto	l1252
  1245  0107                     __end_of_main:	
  1246                           
  1247                           	psect	text1
  1248  0314                     __ptext1:	
  1249 ;; *************** function _system_init *****************
  1250 ;; Defined at:
  1251 ;;		line 20 in file "main.c"
  1252 ;; Parameters:    Size  Location     Type
  1253 ;;		None
  1254 ;; Auto vars:     Size  Location     Type
  1255 ;;		None
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      void 
  1258 ;; Registers used:
  1259 ;;		wreg, status,2
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMMON   BANK0   BANK1
  1265 ;;      Params:         0       0       0
  1266 ;;      Locals:         0       0       0
  1267 ;;      Temps:          0       0       0
  1268 ;;      Totals:         0       0       0
  1269 ;;Total ram usage:        0 bytes
  1270 ;; Hardware stack levels used:    1
  1271 ;; Hardware stack levels required when called:    3
  1272 ;; This function calls:
  1273 ;;		Nothing
  1274 ;; This function is called by:
  1275 ;;		_main
  1276 ;; This function uses a non-reentrant model
  1277 ;;
  1278                           
  1279                           
  1280                           ;psect for function _system_init
  1281  0314                     _system_init:	
  1282                           
  1283                           ;main.c: 22: TRISC0 = 0;
  1284                           
  1285                           ;incstack = 0
  1286                           ; Regs used in _system_init: [wreg+status,2]
  1287  0314  1683               	bsf	3,5	;RP0=1, select bank1
  1288  0315  1303               	bcf	3,6	;RP1=0, select bank1
  1289  0316  1007               	bcf	7,0	;volatile
  1290                           
  1291                           ;main.c: 23: TRISA = 0xFF;
  1292  0317  30FF               	movlw	255
  1293  0318  0085               	movwf	5	;volatile
  1294                           
  1295                           ;main.c: 24: ADCON0 = 0x00;
  1296  0319  1283               	bcf	3,5	;RP0=0, select bank0
  1297  031A  1303               	bcf	3,6	;RP1=0, select bank0
  1298  031B  019F               	clrf	31	;volatile
  1299                           
  1300                           ;main.c: 25: ANSEL = 0x00;
  1301  031C  1683               	bsf	3,5	;RP0=1, select bank3
  1302  031D  1703               	bsf	3,6	;RP1=1, select bank3
  1303  031E  0188               	clrf	8	;volatile
  1304  031F  0008               	return
  1305  0320                     __end_of_system_init:	
  1306                           
  1307                           	psect	text2
  1308  0162                     __ptext2:	
  1309 ;; *************** function _ini_adxl345 *****************
  1310 ;; Defined at:
  1311 ;;		line 6 in file "ADXL_m.c"
  1312 ;; Parameters:    Size  Location     Type
  1313 ;;		None
  1314 ;; Auto vars:     Size  Location     Type
  1315 ;;		None
  1316 ;; Return value:  Size  Location     Type
  1317 ;;                  1    wreg      void 
  1318 ;; Registers used:
  1319 ;;		wreg, status,2, status,0, pclath, cstack
  1320 ;; Tracked objects:
  1321 ;;		On entry : 0/0
  1322 ;;		On exit  : 0/0
  1323 ;;		Unchanged: 0/0
  1324 ;; Data sizes:     COMMON   BANK0   BANK1
  1325 ;;      Params:         0       0       0
  1326 ;;      Locals:         0       0       0
  1327 ;;      Temps:          0       2       0
  1328 ;;      Totals:         0       2       0
  1329 ;;Total ram usage:        2 bytes
  1330 ;; Hardware stack levels used:    1
  1331 ;; Hardware stack levels required when called:    6
  1332 ;; This function calls:
  1333 ;;		_E_Write
  1334 ;; This function is called by:
  1335 ;;		_main
  1336 ;; This function uses a non-reentrant model
  1337 ;;
  1338                           
  1339                           
  1340                           ;psect for function _ini_adxl345
  1341  0162                     _ini_adxl345:	
  1342                           
  1343                           ;ADXL_m.c: 8: E_Write(56,0x9f);
  1344                           
  1345                           ;incstack = 0
  1346                           ; Regs used in _ini_adxl345: [wreg+status,2+status,0+pclath+cstack]
  1347  0162  3038               	movlw	56
  1348  0163  1283               	bcf	3,5	;RP0=0, select bank0
  1349  0164  1303               	bcf	3,6	;RP1=0, select bank0
  1350  0165  00A1               	movwf	E_Write@addr
  1351  0166  3000               	movlw	0
  1352  0167  00A2               	movwf	E_Write@addr+1
  1353  0168  309F               	movlw	159
  1354  0169  00A4               	movwf	??_ini_adxl345
  1355  016A  0824               	movf	??_ini_adxl345,w
  1356  016B  00A3               	movwf	E_Write@ch
  1357  016C  22FA               	fcall	_E_Write
  1358                           
  1359                           ;ADXL_m.c: 9: _delay((unsigned long)((10)*(20000000/4000.0)));
  1360  016D  3041               	movlw	65
  1361  016E  1283               	bcf	3,5	;RP0=0, select bank0
  1362  016F  1303               	bcf	3,6	;RP1=0, select bank0
  1363  0170  00A5               	movwf	??_ini_adxl345+1
  1364  0171  30EE               	movlw	238
  1365  0172  00A4               	movwf	??_ini_adxl345
  1366  0173                     u657:	
  1367  0173  0BA4               	decfsz	??_ini_adxl345,f
  1368  0174  2973               	goto	u657
  1369  0175  0BA5               	decfsz	??_ini_adxl345+1,f
  1370  0176  2973               	goto	u657
  1371                           
  1372                           ;ADXL_m.c: 10: E_Write(49,0x09);
  1373  0177  3031               	movlw	49
  1374  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1375  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1376  017A  00A1               	movwf	E_Write@addr
  1377  017B  3000               	movlw	0
  1378  017C  00A2               	movwf	E_Write@addr+1
  1379  017D  3009               	movlw	9
  1380  017E  00A4               	movwf	??_ini_adxl345
  1381  017F  0824               	movf	??_ini_adxl345,w
  1382  0180  00A3               	movwf	E_Write@ch
  1383  0181  22FA               	fcall	_E_Write
  1384                           
  1385                           ;ADXL_m.c: 11: _delay((unsigned long)((10)*(20000000/4000.0)));
  1386  0182  3041               	movlw	65
  1387  0183  1283               	bcf	3,5	;RP0=0, select bank0
  1388  0184  1303               	bcf	3,6	;RP1=0, select bank0
  1389  0185  00A5               	movwf	??_ini_adxl345+1
  1390  0186  30EE               	movlw	238
  1391  0187  00A4               	movwf	??_ini_adxl345
  1392  0188                     u667:	
  1393  0188  0BA4               	decfsz	??_ini_adxl345,f
  1394  0189  2988               	goto	u667
  1395  018A  0BA5               	decfsz	??_ini_adxl345+1,f
  1396  018B  2988               	goto	u667
  1397                           
  1398                           ;ADXL_m.c: 12: E_Write(44,0x0d);
  1399  018C  302C               	movlw	44
  1400  018D  1283               	bcf	3,5	;RP0=0, select bank0
  1401  018E  1303               	bcf	3,6	;RP1=0, select bank0
  1402  018F  00A1               	movwf	E_Write@addr
  1403  0190  3000               	movlw	0
  1404  0191  00A2               	movwf	E_Write@addr+1
  1405  0192  300D               	movlw	13
  1406  0193  00A4               	movwf	??_ini_adxl345
  1407  0194  0824               	movf	??_ini_adxl345,w
  1408  0195  00A3               	movwf	E_Write@ch
  1409  0196  22FA               	fcall	_E_Write
  1410                           
  1411                           ;ADXL_m.c: 13: _delay((unsigned long)((10)*(20000000/4000.0)));
  1412  0197  3041               	movlw	65
  1413  0198  1283               	bcf	3,5	;RP0=0, select bank0
  1414  0199  1303               	bcf	3,6	;RP1=0, select bank0
  1415  019A  00A5               	movwf	??_ini_adxl345+1
  1416  019B  30EE               	movlw	238
  1417  019C  00A4               	movwf	??_ini_adxl345
  1418  019D                     u677:	
  1419  019D  0BA4               	decfsz	??_ini_adxl345,f
  1420  019E  299D               	goto	u677
  1421  019F  0BA5               	decfsz	??_ini_adxl345+1,f
  1422  01A0  299D               	goto	u677
  1423                           
  1424                           ;ADXL_m.c: 14: E_Write(45,0x08);
  1425  01A1  302D               	movlw	45
  1426  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  1427  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  1428  01A4  00A1               	movwf	E_Write@addr
  1429  01A5  3000               	movlw	0
  1430  01A6  00A2               	movwf	E_Write@addr+1
  1431  01A7  3008               	movlw	8
  1432  01A8  00A4               	movwf	??_ini_adxl345
  1433  01A9  0824               	movf	??_ini_adxl345,w
  1434  01AA  00A3               	movwf	E_Write@ch
  1435  01AB  22FA               	fcall	_E_Write
  1436  01AC  0008               	return
  1437  01AD                     __end_of_ini_adxl345:	
  1438                           
  1439                           	psect	text3
  1440  02FA                     __ptext3:	
  1441 ;; *************** function _E_Write *****************
  1442 ;; Defined at:
  1443 ;;		line 154 in file "ADXL_m.c"
  1444 ;; Parameters:    Size  Location     Type
  1445 ;;  addr            2    1[BANK0 ] int 
  1446 ;;  ch              1    3[BANK0 ] unsigned char 
  1447 ;; Auto vars:     Size  Location     Type
  1448 ;;		None
  1449 ;; Return value:  Size  Location     Type
  1450 ;;                  1    wreg      unsigned char 
  1451 ;; Registers used:
  1452 ;;		wreg, status,2, status,0, pclath, cstack
  1453 ;; Tracked objects:
  1454 ;;		On entry : 0/0
  1455 ;;		On exit  : 0/0
  1456 ;;		Unchanged: 0/0
  1457 ;; Data sizes:     COMMON   BANK0   BANK1
  1458 ;;      Params:         0       3       0
  1459 ;;      Locals:         0       0       0
  1460 ;;      Temps:          0       0       0
  1461 ;;      Totals:         0       3       0
  1462 ;;Total ram usage:        3 bytes
  1463 ;; Hardware stack levels used:    1
  1464 ;; Hardware stack levels required when called:    5
  1465 ;; This function calls:
  1466 ;;		_I2CSend
  1467 ;;		_I2CStart
  1468 ;;		_I2CStop
  1469 ;; This function is called by:
  1470 ;;		_ini_adxl345
  1471 ;; This function uses a non-reentrant model
  1472 ;;
  1473                           
  1474                           
  1475                           ;psect for function _E_Write
  1476  02FA                     _E_Write:	
  1477                           
  1478                           ;ADXL_m.c: 157: I2CStart();
  1479                           
  1480                           ;incstack = 0
  1481                           ; Regs used in _E_Write: [wreg+status,2+status,0+pclath+cstack]
  1482  02FA  235C               	fcall	_I2CStart
  1483                           
  1484                           ;ADXL_m.c: 159: I2CSend(0xA6);
  1485  02FB  30A6               	movlw	166
  1486  02FC  232C               	fcall	_I2CSend
  1487                           
  1488                           ;ADXL_m.c: 161: I2CSend(addr);
  1489  02FD  1283               	bcf	3,5	;RP0=0, select bank0
  1490  02FE  1303               	bcf	3,6	;RP1=0, select bank0
  1491  02FF  0821               	movf	E_Write@addr,w
  1492  0300  232C               	fcall	_I2CSend
  1493                           
  1494                           ;ADXL_m.c: 163: I2CSend(ch);
  1495  0301  1283               	bcf	3,5	;RP0=0, select bank0
  1496  0302  1303               	bcf	3,6	;RP1=0, select bank0
  1497  0303  0823               	movf	E_Write@ch,w
  1498  0304  232C               	fcall	_I2CSend
  1499                           
  1500                           ;ADXL_m.c: 165: I2CStop();
  1501  0305  2356               	fcall	_I2CStop
  1502  0306  0008               	return
  1503  0307                     __end_of_E_Write:	
  1504                           ;ADXL_m.c: 166: return 1;
  1505                           ;	Return value of _E_Write is never used
  1506                           
  1507                           
  1508                           	psect	text4
  1509  01AD                     __ptext4:	
  1510 ;; *************** function _get_averageZ *****************
  1511 ;; Defined at:
  1512 ;;		line 27 in file "average_calculations.c"
  1513 ;; Parameters:    Size  Location     Type
  1514 ;;  Data            2   15[BANK0 ] short 
  1515 ;; Auto vars:     Size  Location     Type
  1516 ;;		None
  1517 ;; Return value:  Size  Location     Type
  1518 ;;                  2   15[BANK0 ] short 
  1519 ;; Registers used:
  1520 ;;		wreg, status,2, status,0, pclath, cstack
  1521 ;; Tracked objects:
  1522 ;;		On entry : 0/0
  1523 ;;		On exit  : 0/0
  1524 ;;		Unchanged: 0/0
  1525 ;; Data sizes:     COMMON   BANK0   BANK1
  1526 ;;      Params:         0       2       0
  1527 ;;      Locals:         0       0       0
  1528 ;;      Temps:          0       2       0
  1529 ;;      Totals:         0       4       0
  1530 ;;Total ram usage:        4 bytes
  1531 ;; Hardware stack levels used:    1
  1532 ;; Hardware stack levels required when called:    4
  1533 ;; This function calls:
  1534 ;;		___awdiv
  1535 ;;		___wmul
  1536 ;; This function is called by:
  1537 ;;		_main
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           
  1542                           ;psect for function _get_averageZ
  1543  01AD                     _get_averageZ:	
  1544                           
  1545                           ;average_calculations.c: 29: static short OutPut = 0;
  1546                           ;average_calculations.c: 30: OutPut = (92 * Data + 8 * OutPut)/100;
  1547                           
  1548                           ;incstack = 0
  1549                           ; Regs used in _get_averageZ: [wreg+status,2+status,0+pclath+cstack]
  1550  01AD  3064               	movlw	100
  1551  01AE  1283               	bcf	3,5	;RP0=0, select bank0
  1552  01AF  1303               	bcf	3,6	;RP1=0, select bank0
  1553  01B0  00A6               	movwf	___awdiv@divisor
  1554  01B1  3000               	movlw	0
  1555  01B2  00A7               	movwf	___awdiv@divisor+1
  1556  01B3  0850               	movf	get_averageZ@OutPut+1,w
  1557  01B4  00B2               	movwf	??_get_averageZ+1
  1558  01B5  084F               	movf	get_averageZ@OutPut,w
  1559  01B6  00B1               	movwf	??_get_averageZ
  1560  01B7  1003               	clrc
  1561  01B8  0DB1               	rlf	??_get_averageZ,f
  1562  01B9  0DB2               	rlf	??_get_averageZ+1,f
  1563  01BA  1003               	clrc
  1564  01BB  0DB1               	rlf	??_get_averageZ,f
  1565  01BC  0DB2               	rlf	??_get_averageZ+1,f
  1566  01BD  1003               	clrc
  1567  01BE  0DB1               	rlf	??_get_averageZ,f
  1568  01BF  0DB2               	rlf	??_get_averageZ+1,f
  1569  01C0  0830               	movf	get_averageZ@Data+1,w
  1570  01C1  00A1               	movwf	___wmul@multiplier+1
  1571  01C2  082F               	movf	get_averageZ@Data,w
  1572  01C3  00A0               	movwf	___wmul@multiplier
  1573  01C4  305C               	movlw	92
  1574  01C5  00A2               	movwf	___wmul@multiplicand
  1575  01C6  3000               	movlw	0
  1576  01C7  00A3               	movwf	___wmul@multiplicand+1
  1577  01C8  226E               	fcall	___wmul
  1578  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1579  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1580  01CB  0831               	movf	??_get_averageZ,w
  1581  01CC  0720               	addwf	?___wmul,w
  1582  01CD  00A8               	movwf	___awdiv@dividend
  1583  01CE  0832               	movf	??_get_averageZ+1,w
  1584  01CF  1803               	skipnc
  1585  01D0  0A32               	incf	??_get_averageZ+1,w
  1586  01D1  0721               	addwf	?___wmul+1,w
  1587  01D2  00A9               	movwf	___awdiv@dividend+1
  1588  01D3  2107               	fcall	___awdiv
  1589  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1590  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  1591  01D6  0827               	movf	?___awdiv+1,w
  1592  01D7  00D0               	movwf	get_averageZ@OutPut+1
  1593  01D8  0826               	movf	?___awdiv,w
  1594  01D9  00CF               	movwf	get_averageZ@OutPut
  1595                           
  1596                           ;average_calculations.c: 31: return OutPut;
  1597  01DA  0850               	movf	get_averageZ@OutPut+1,w
  1598  01DB  00B0               	movwf	?_get_averageZ+1
  1599  01DC  084F               	movf	get_averageZ@OutPut,w
  1600  01DD  00AF               	movwf	?_get_averageZ
  1601  01DE  0008               	return
  1602  01DF                     __end_of_get_averageZ:	
  1603                           
  1604                           	psect	text5
  1605  01DF                     __ptext5:	
  1606 ;; *************** function _get_averageY *****************
  1607 ;; Defined at:
  1608 ;;		line 20 in file "average_calculations.c"
  1609 ;; Parameters:    Size  Location     Type
  1610 ;;  Data            2   15[BANK0 ] short 
  1611 ;; Auto vars:     Size  Location     Type
  1612 ;;		None
  1613 ;; Return value:  Size  Location     Type
  1614 ;;                  2   15[BANK0 ] short 
  1615 ;; Registers used:
  1616 ;;		wreg, status,2, status,0, pclath, cstack
  1617 ;; Tracked objects:
  1618 ;;		On entry : 0/0
  1619 ;;		On exit  : 0/0
  1620 ;;		Unchanged: 0/0
  1621 ;; Data sizes:     COMMON   BANK0   BANK1
  1622 ;;      Params:         0       2       0
  1623 ;;      Locals:         0       0       0
  1624 ;;      Temps:          0       2       0
  1625 ;;      Totals:         0       4       0
  1626 ;;Total ram usage:        4 bytes
  1627 ;; Hardware stack levels used:    1
  1628 ;; Hardware stack levels required when called:    4
  1629 ;; This function calls:
  1630 ;;		___awdiv
  1631 ;;		___wmul
  1632 ;; This function is called by:
  1633 ;;		_main
  1634 ;; This function uses a non-reentrant model
  1635 ;;
  1636                           
  1637                           
  1638                           ;psect for function _get_averageY
  1639  01DF                     _get_averageY:	
  1640                           
  1641                           ;average_calculations.c: 22: static short OutPut = 0;
  1642                           ;average_calculations.c: 23: OutPut = (92 * Data + 8 * OutPut)/100;
  1643                           
  1644                           ;incstack = 0
  1645                           ; Regs used in _get_averageY: [wreg+status,2+status,0+pclath+cstack]
  1646  01DF  3064               	movlw	100
  1647  01E0  1283               	bcf	3,5	;RP0=0, select bank0
  1648  01E1  1303               	bcf	3,6	;RP1=0, select bank0
  1649  01E2  00A6               	movwf	___awdiv@divisor
  1650  01E3  3000               	movlw	0
  1651  01E4  00A7               	movwf	___awdiv@divisor+1
  1652  01E5  0852               	movf	get_averageY@OutPut+1,w
  1653  01E6  00B2               	movwf	??_get_averageY+1
  1654  01E7  0851               	movf	get_averageY@OutPut,w
  1655  01E8  00B1               	movwf	??_get_averageY
  1656  01E9  1003               	clrc
  1657  01EA  0DB1               	rlf	??_get_averageY,f
  1658  01EB  0DB2               	rlf	??_get_averageY+1,f
  1659  01EC  1003               	clrc
  1660  01ED  0DB1               	rlf	??_get_averageY,f
  1661  01EE  0DB2               	rlf	??_get_averageY+1,f
  1662  01EF  1003               	clrc
  1663  01F0  0DB1               	rlf	??_get_averageY,f
  1664  01F1  0DB2               	rlf	??_get_averageY+1,f
  1665  01F2  0830               	movf	get_averageY@Data+1,w
  1666  01F3  00A1               	movwf	___wmul@multiplier+1
  1667  01F4  082F               	movf	get_averageY@Data,w
  1668  01F5  00A0               	movwf	___wmul@multiplier
  1669  01F6  305C               	movlw	92
  1670  01F7  00A2               	movwf	___wmul@multiplicand
  1671  01F8  3000               	movlw	0
  1672  01F9  00A3               	movwf	___wmul@multiplicand+1
  1673  01FA  226E               	fcall	___wmul
  1674  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  1675  01FC  1303               	bcf	3,6	;RP1=0, select bank0
  1676  01FD  0831               	movf	??_get_averageY,w
  1677  01FE  0720               	addwf	?___wmul,w
  1678  01FF  00A8               	movwf	___awdiv@dividend
  1679  0200  0832               	movf	??_get_averageY+1,w
  1680  0201  1803               	skipnc
  1681  0202  0A32               	incf	??_get_averageY+1,w
  1682  0203  0721               	addwf	?___wmul+1,w
  1683  0204  00A9               	movwf	___awdiv@dividend+1
  1684  0205  2107               	fcall	___awdiv
  1685  0206  1283               	bcf	3,5	;RP0=0, select bank0
  1686  0207  1303               	bcf	3,6	;RP1=0, select bank0
  1687  0208  0827               	movf	?___awdiv+1,w
  1688  0209  00D2               	movwf	get_averageY@OutPut+1
  1689  020A  0826               	movf	?___awdiv,w
  1690  020B  00D1               	movwf	get_averageY@OutPut
  1691                           
  1692                           ;average_calculations.c: 24: return OutPut;
  1693  020C  0852               	movf	get_averageY@OutPut+1,w
  1694  020D  00B0               	movwf	?_get_averageY+1
  1695  020E  0851               	movf	get_averageY@OutPut,w
  1696  020F  00AF               	movwf	?_get_averageY
  1697  0210  0008               	return
  1698  0211                     __end_of_get_averageY:	
  1699                           
  1700                           	psect	text6
  1701  0211                     __ptext6:	
  1702 ;; *************** function _get_averageX *****************
  1703 ;; Defined at:
  1704 ;;		line 13 in file "average_calculations.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;  Data            2   15[BANK0 ] short 
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;		None
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  2   15[BANK0 ] short 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0, pclath, cstack
  1713 ;; Tracked objects:
  1714 ;;		On entry : 0/0
  1715 ;;		On exit  : 0/0
  1716 ;;		Unchanged: 0/0
  1717 ;; Data sizes:     COMMON   BANK0   BANK1
  1718 ;;      Params:         0       2       0
  1719 ;;      Locals:         0       0       0
  1720 ;;      Temps:          0       2       0
  1721 ;;      Totals:         0       4       0
  1722 ;;Total ram usage:        4 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    4
  1725 ;; This function calls:
  1726 ;;		___awdiv
  1727 ;;		___wmul
  1728 ;; This function is called by:
  1729 ;;		_main
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732                           
  1733                           
  1734                           ;psect for function _get_averageX
  1735  0211                     _get_averageX:	
  1736                           
  1737                           ;average_calculations.c: 15: static short OutPut = 0;
  1738                           ;average_calculations.c: 16: OutPut = (92 * Data + 8 * OutPut)/100;
  1739                           
  1740                           ;incstack = 0
  1741                           ; Regs used in _get_averageX: [wreg+status,2+status,0+pclath+cstack]
  1742  0211  3064               	movlw	100
  1743  0212  1283               	bcf	3,5	;RP0=0, select bank0
  1744  0213  1303               	bcf	3,6	;RP1=0, select bank0
  1745  0214  00A6               	movwf	___awdiv@divisor
  1746  0215  3000               	movlw	0
  1747  0216  00A7               	movwf	___awdiv@divisor+1
  1748  0217  0854               	movf	get_averageX@OutPut+1,w
  1749  0218  00B2               	movwf	??_get_averageX+1
  1750  0219  0853               	movf	get_averageX@OutPut,w
  1751  021A  00B1               	movwf	??_get_averageX
  1752  021B  1003               	clrc
  1753  021C  0DB1               	rlf	??_get_averageX,f
  1754  021D  0DB2               	rlf	??_get_averageX+1,f
  1755  021E  1003               	clrc
  1756  021F  0DB1               	rlf	??_get_averageX,f
  1757  0220  0DB2               	rlf	??_get_averageX+1,f
  1758  0221  1003               	clrc
  1759  0222  0DB1               	rlf	??_get_averageX,f
  1760  0223  0DB2               	rlf	??_get_averageX+1,f
  1761  0224  0830               	movf	get_averageX@Data+1,w
  1762  0225  00A1               	movwf	___wmul@multiplier+1
  1763  0226  082F               	movf	get_averageX@Data,w
  1764  0227  00A0               	movwf	___wmul@multiplier
  1765  0228  305C               	movlw	92
  1766  0229  00A2               	movwf	___wmul@multiplicand
  1767  022A  3000               	movlw	0
  1768  022B  00A3               	movwf	___wmul@multiplicand+1
  1769  022C  226E               	fcall	___wmul
  1770  022D  1283               	bcf	3,5	;RP0=0, select bank0
  1771  022E  1303               	bcf	3,6	;RP1=0, select bank0
  1772  022F  0831               	movf	??_get_averageX,w
  1773  0230  0720               	addwf	?___wmul,w
  1774  0231  00A8               	movwf	___awdiv@dividend
  1775  0232  0832               	movf	??_get_averageX+1,w
  1776  0233  1803               	skipnc
  1777  0234  0A32               	incf	??_get_averageX+1,w
  1778  0235  0721               	addwf	?___wmul+1,w
  1779  0236  00A9               	movwf	___awdiv@dividend+1
  1780  0237  2107               	fcall	___awdiv
  1781  0238  1283               	bcf	3,5	;RP0=0, select bank0
  1782  0239  1303               	bcf	3,6	;RP1=0, select bank0
  1783  023A  0827               	movf	?___awdiv+1,w
  1784  023B  00D4               	movwf	get_averageX@OutPut+1
  1785  023C  0826               	movf	?___awdiv,w
  1786  023D  00D3               	movwf	get_averageX@OutPut
  1787                           
  1788                           ;average_calculations.c: 17: return OutPut;
  1789  023E  0854               	movf	get_averageX@OutPut+1,w
  1790  023F  00B0               	movwf	?_get_averageX+1
  1791  0240  0853               	movf	get_averageX@OutPut,w
  1792  0241  00AF               	movwf	?_get_averageX
  1793  0242  0008               	return
  1794  0243                     __end_of_get_averageX:	
  1795                           
  1796                           	psect	text7
  1797  026E                     __ptext7:	
  1798 ;; *************** function ___wmul *****************
  1799 ;; Defined at:
  1800 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  1801 ;; Parameters:    Size  Location     Type
  1802 ;;  multiplier      2    0[BANK0 ] unsigned int 
  1803 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  1804 ;; Auto vars:     Size  Location     Type
  1805 ;;  product         2    4[BANK0 ] unsigned int 
  1806 ;; Return value:  Size  Location     Type
  1807 ;;                  2    0[BANK0 ] unsigned int 
  1808 ;; Registers used:
  1809 ;;		wreg, status,2, status,0
  1810 ;; Tracked objects:
  1811 ;;		On entry : 0/0
  1812 ;;		On exit  : 0/0
  1813 ;;		Unchanged: 0/0
  1814 ;; Data sizes:     COMMON   BANK0   BANK1
  1815 ;;      Params:         0       4       0
  1816 ;;      Locals:         0       2       0
  1817 ;;      Temps:          0       0       0
  1818 ;;      Totals:         0       6       0
  1819 ;;Total ram usage:        6 bytes
  1820 ;; Hardware stack levels used:    1
  1821 ;; Hardware stack levels required when called:    3
  1822 ;; This function calls:
  1823 ;;		Nothing
  1824 ;; This function is called by:
  1825 ;;		_get_averageX
  1826 ;;		_get_averageY
  1827 ;;		_get_averageZ
  1828 ;; This function uses a non-reentrant model
  1829 ;;
  1830                           
  1831                           
  1832                           ;psect for function ___wmul
  1833  026E                     ___wmul:	
  1834                           
  1835                           ;incstack = 0
  1836                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  1837  026E  1283               	bcf	3,5	;RP0=0, select bank0
  1838  026F  1303               	bcf	3,6	;RP1=0, select bank0
  1839  0270  01A4               	clrf	___wmul@product
  1840  0271  01A5               	clrf	___wmul@product+1
  1841  0272                     l1090:	
  1842  0272  1C20               	btfss	___wmul@multiplier,0
  1843  0273  2A7A               	goto	l336
  1844  0274  0822               	movf	___wmul@multiplicand,w
  1845  0275  07A4               	addwf	___wmul@product,f
  1846  0276  1803               	skipnc
  1847  0277  0AA5               	incf	___wmul@product+1,f
  1848  0278  0823               	movf	___wmul@multiplicand+1,w
  1849  0279  07A5               	addwf	___wmul@product+1,f
  1850  027A                     l336:	
  1851  027A  3001               	movlw	1
  1852  027B                     u465:	
  1853  027B  1003               	clrc
  1854  027C  0DA2               	rlf	___wmul@multiplicand,f
  1855  027D  0DA3               	rlf	___wmul@multiplicand+1,f
  1856  027E  3EFF               	addlw	-1
  1857  027F  1D03               	skipz
  1858  0280  2A7B               	goto	u465
  1859  0281  3001               	movlw	1
  1860  0282                     u475:	
  1861  0282  1003               	clrc
  1862  0283  0CA1               	rrf	___wmul@multiplier+1,f
  1863  0284  0CA0               	rrf	___wmul@multiplier,f
  1864  0285  3EFF               	addlw	-1
  1865  0286  1D03               	skipz
  1866  0287  2A82               	goto	u475
  1867  0288  0820               	movf	___wmul@multiplier,w
  1868  0289  0421               	iorwf	___wmul@multiplier+1,w
  1869  028A  1D03               	btfss	3,2
  1870  028B  2A72               	goto	l1090
  1871  028C  0825               	movf	___wmul@product+1,w
  1872  028D  00A1               	movwf	?___wmul+1
  1873  028E  0824               	movf	___wmul@product,w
  1874  028F  00A0               	movwf	?___wmul
  1875  0290  0008               	return
  1876  0291                     __end_of___wmul:	
  1877                           
  1878                           	psect	text8
  1879  0107                     __ptext8:	
  1880 ;; *************** function ___awdiv *****************
  1881 ;; Defined at:
  1882 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\awdiv.c"
  1883 ;; Parameters:    Size  Location     Type
  1884 ;;  divisor         2    6[BANK0 ] int 
  1885 ;;  dividend        2    8[BANK0 ] int 
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;  quotient        2   13[BANK0 ] int 
  1888 ;;  sign            1   12[BANK0 ] unsigned char 
  1889 ;;  counter         1   11[BANK0 ] unsigned char 
  1890 ;; Return value:  Size  Location     Type
  1891 ;;                  2    6[BANK0 ] int 
  1892 ;; Registers used:
  1893 ;;		wreg, status,2, status,0
  1894 ;; Tracked objects:
  1895 ;;		On entry : 0/0
  1896 ;;		On exit  : 0/0
  1897 ;;		Unchanged: 0/0
  1898 ;; Data sizes:     COMMON   BANK0   BANK1
  1899 ;;      Params:         0       4       0
  1900 ;;      Locals:         0       4       0
  1901 ;;      Temps:          0       1       0
  1902 ;;      Totals:         0       9       0
  1903 ;;Total ram usage:        9 bytes
  1904 ;; Hardware stack levels used:    1
  1905 ;; Hardware stack levels required when called:    3
  1906 ;; This function calls:
  1907 ;;		Nothing
  1908 ;; This function is called by:
  1909 ;;		_get_averageX
  1910 ;;		_get_averageY
  1911 ;;		_get_averageZ
  1912 ;; This function uses a non-reentrant model
  1913 ;;
  1914                           
  1915                           
  1916                           ;psect for function ___awdiv
  1917  0107                     ___awdiv:	
  1918                           
  1919                           ;incstack = 0
  1920                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1921  0107  1283               	bcf	3,5	;RP0=0, select bank0
  1922  0108  1303               	bcf	3,6	;RP1=0, select bank0
  1923  0109  01AC               	clrf	___awdiv@sign
  1924  010A  1FA7               	btfss	___awdiv@divisor+1,7
  1925  010B  2913               	goto	l1110
  1926  010C  09A6               	comf	___awdiv@divisor,f
  1927  010D  09A7               	comf	___awdiv@divisor+1,f
  1928  010E  0AA6               	incf	___awdiv@divisor,f
  1929  010F  1903               	skipnz
  1930  0110  0AA7               	incf	___awdiv@divisor+1,f
  1931  0111  01AC               	clrf	___awdiv@sign
  1932  0112  0AAC               	incf	___awdiv@sign,f
  1933  0113                     l1110:	
  1934  0113  1FA9               	btfss	___awdiv@dividend+1,7
  1935  0114  291E               	goto	l1116
  1936  0115  09A8               	comf	___awdiv@dividend,f
  1937  0116  09A9               	comf	___awdiv@dividend+1,f
  1938  0117  0AA8               	incf	___awdiv@dividend,f
  1939  0118  1903               	skipnz
  1940  0119  0AA9               	incf	___awdiv@dividend+1,f
  1941  011A  3001               	movlw	1
  1942  011B  00AA               	movwf	??___awdiv
  1943  011C  082A               	movf	??___awdiv,w
  1944  011D  06AC               	xorwf	___awdiv@sign,f
  1945  011E                     l1116:	
  1946  011E  01AD               	clrf	___awdiv@quotient
  1947  011F  01AE               	clrf	___awdiv@quotient+1
  1948  0120  0826               	movf	___awdiv@divisor,w
  1949  0121  0427               	iorwf	___awdiv@divisor+1,w
  1950  0122  1903               	btfsc	3,2
  1951  0123  2955               	goto	l1138
  1952  0124  01AB               	clrf	___awdiv@counter
  1953  0125  0AAB               	incf	___awdiv@counter,f
  1954  0126                     l1126:	
  1955  0126  1BA7               	btfsc	___awdiv@divisor+1,7
  1956  0127  2934               	goto	l1128
  1957  0128  3001               	movlw	1
  1958  0129                     u525:	
  1959  0129  1003               	clrc
  1960  012A  0DA6               	rlf	___awdiv@divisor,f
  1961  012B  0DA7               	rlf	___awdiv@divisor+1,f
  1962  012C  3EFF               	addlw	-1
  1963  012D  1D03               	skipz
  1964  012E  2929               	goto	u525
  1965  012F  3001               	movlw	1
  1966  0130  00AA               	movwf	??___awdiv
  1967  0131  082A               	movf	??___awdiv,w
  1968  0132  07AB               	addwf	___awdiv@counter,f
  1969  0133  2926               	goto	l1126
  1970  0134                     l1128:	
  1971  0134  3001               	movlw	1
  1972  0135                     u545:	
  1973  0135  1003               	clrc
  1974  0136  0DAD               	rlf	___awdiv@quotient,f
  1975  0137  0DAE               	rlf	___awdiv@quotient+1,f
  1976  0138  3EFF               	addlw	-1
  1977  0139  1D03               	skipz
  1978  013A  2935               	goto	u545
  1979  013B  0827               	movf	___awdiv@divisor+1,w
  1980  013C  0229               	subwf	___awdiv@dividend+1,w
  1981  013D  1D03               	skipz
  1982  013E  2941               	goto	u555
  1983  013F  0826               	movf	___awdiv@divisor,w
  1984  0140  0228               	subwf	___awdiv@dividend,w
  1985  0141                     u555:	
  1986  0141  1C03               	skipc
  1987  0142  294A               	goto	l1134
  1988  0143  0826               	movf	___awdiv@divisor,w
  1989  0144  02A8               	subwf	___awdiv@dividend,f
  1990  0145  0827               	movf	___awdiv@divisor+1,w
  1991  0146  1C03               	skipc
  1992  0147  03A9               	decf	___awdiv@dividend+1,f
  1993  0148  02A9               	subwf	___awdiv@dividend+1,f
  1994  0149  142D               	bsf	___awdiv@quotient,0
  1995  014A                     l1134:	
  1996  014A  3001               	movlw	1
  1997  014B                     u565:	
  1998  014B  1003               	clrc
  1999  014C  0CA7               	rrf	___awdiv@divisor+1,f
  2000  014D  0CA6               	rrf	___awdiv@divisor,f
  2001  014E  3EFF               	addlw	-1
  2002  014F  1D03               	skipz
  2003  0150  294B               	goto	u565
  2004  0151  3001               	movlw	1
  2005  0152  02AB               	subwf	___awdiv@counter,f
  2006  0153  1D03               	btfss	3,2
  2007  0154  2934               	goto	l1128
  2008  0155                     l1138:	
  2009  0155  082C               	movf	___awdiv@sign,w
  2010  0156  1903               	btfsc	3,2
  2011  0157  295D               	goto	l1142
  2012  0158  09AD               	comf	___awdiv@quotient,f
  2013  0159  09AE               	comf	___awdiv@quotient+1,f
  2014  015A  0AAD               	incf	___awdiv@quotient,f
  2015  015B  1903               	skipnz
  2016  015C  0AAE               	incf	___awdiv@quotient+1,f
  2017  015D                     l1142:	
  2018  015D  082E               	movf	___awdiv@quotient+1,w
  2019  015E  00A7               	movwf	?___awdiv+1
  2020  015F  082D               	movf	___awdiv@quotient,w
  2021  0160  00A6               	movwf	?___awdiv
  2022  0161  0008               	return
  2023  0162                     __end_of___awdiv:	
  2024                           
  2025                           	psect	text9
  2026  0291                     __ptext9:	
  2027 ;; *************** function _UART_vidInit *****************
  2028 ;; Defined at:
  2029 ;;		line 16 in file "UART_m.c"
  2030 ;; Parameters:    Size  Location     Type
  2031 ;;		None
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;		None
  2034 ;; Return value:  Size  Location     Type
  2035 ;;                  1    wreg      void 
  2036 ;; Registers used:
  2037 ;;		wreg, pclath, cstack
  2038 ;; Tracked objects:
  2039 ;;		On entry : 0/0
  2040 ;;		On exit  : 0/0
  2041 ;;		Unchanged: 0/0
  2042 ;; Data sizes:     COMMON   BANK0   BANK1
  2043 ;;      Params:         0       0       0
  2044 ;;      Locals:         0       0       0
  2045 ;;      Temps:          0       1       0
  2046 ;;      Totals:         0       1       0
  2047 ;;Total ram usage:        1 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    4
  2050 ;; This function calls:
  2051 ;;		_UART_u8GetNodeID
  2052 ;; This function is called by:
  2053 ;;		_main
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057                           
  2058                           ;psect for function _UART_vidInit
  2059  0291                     _UART_vidInit:	
  2060                           
  2061                           ;UART_m.c: 18: BRGH = 0;
  2062                           
  2063                           ;incstack = 0
  2064                           ; Regs used in _UART_vidInit: [wreg+pclath+cstack]
  2065  0291  1683               	bsf	3,5	;RP0=1, select bank1
  2066  0292  1303               	bcf	3,6	;RP1=0, select bank1
  2067  0293  1118               	bcf	24,2	;volatile
  2068                           
  2069                           ;UART_m.c: 19: SPBRG = (unsigned char)((((unsigned long)20000000 / 9600)/64) - 1);
  2070  0294  301F               	movlw	31
  2071  0295  0099               	movwf	25	;volatile
  2072                           
  2073                           ;UART_m.c: 20: SYNC = 0;
  2074  0296  1218               	bcf	24,4	;volatile
  2075                           
  2076                           ;UART_m.c: 21: SPEN = 1;
  2077  0297  1283               	bcf	3,5	;RP0=0, select bank0
  2078  0298  1303               	bcf	3,6	;RP1=0, select bank0
  2079  0299  1798               	bsf	24,7	;volatile
  2080                           
  2081                           ;UART_m.c: 22: TRISC6 = 1;
  2082  029A  1683               	bsf	3,5	;RP0=1, select bank1
  2083  029B  1303               	bcf	3,6	;RP1=0, select bank1
  2084  029C  1707               	bsf	7,6	;volatile
  2085                           
  2086                           ;UART_m.c: 23: TRISC7 = 1;
  2087  029D  1787               	bsf	7,7	;volatile
  2088                           
  2089                           ;UART_m.c: 24: TXEN = 1;
  2090  029E  1698               	bsf	24,5	;volatile
  2091                           
  2092                           ;UART_m.c: 25: RCIE = 1;
  2093  029F  168C               	bsf	12,5	;volatile
  2094                           
  2095                           ;UART_m.c: 26: PEIE = 1;
  2096  02A0  170B               	bsf	11,6	;volatile
  2097                           
  2098                           ;UART_m.c: 27: GIE = 1;
  2099  02A1  178B               	bsf	11,7	;volatile
  2100                           
  2101                           ;UART_m.c: 28: CREN = 1;
  2102  02A2  1283               	bcf	3,5	;RP0=0, select bank0
  2103  02A3  1303               	bcf	3,6	;RP1=0, select bank0
  2104  02A4  1618               	bsf	24,4	;volatile
  2105                           
  2106                           ;UART_m.c: 30: ECU_ID = UART_u8GetNodeID();
  2107  02A5  2368               	fcall	_UART_u8GetNodeID
  2108  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  2109  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  2110  02A8  00A0               	movwf	??_UART_vidInit
  2111  02A9  0820               	movf	??_UART_vidInit,w
  2112  02AA  00FA               	movwf	_ECU_ID
  2113  02AB  0008               	return
  2114  02AC                     __end_of_UART_vidInit:	
  2115                           
  2116                           	psect	text10
  2117  0368                     __ptext10:	
  2118 ;; *************** function _UART_u8GetNodeID *****************
  2119 ;; Defined at:
  2120 ;;		line 72 in file "UART_m.c"
  2121 ;; Parameters:    Size  Location     Type
  2122 ;;		None
  2123 ;; Auto vars:     Size  Location     Type
  2124 ;;		None
  2125 ;; Return value:  Size  Location     Type
  2126 ;;                  1    wreg      unsigned char 
  2127 ;; Registers used:
  2128 ;;		wreg
  2129 ;; Tracked objects:
  2130 ;;		On entry : 0/0
  2131 ;;		On exit  : 0/0
  2132 ;;		Unchanged: 0/0
  2133 ;; Data sizes:     COMMON   BANK0   BANK1
  2134 ;;      Params:         0       0       0
  2135 ;;      Locals:         0       0       0
  2136 ;;      Temps:          0       0       0
  2137 ;;      Totals:         0       0       0
  2138 ;;Total ram usage:        0 bytes
  2139 ;; Hardware stack levels used:    1
  2140 ;; Hardware stack levels required when called:    3
  2141 ;; This function calls:
  2142 ;;		Nothing
  2143 ;; This function is called by:
  2144 ;;		_UART_vidInit
  2145 ;; This function uses a non-reentrant model
  2146 ;;
  2147                           
  2148                           
  2149                           ;psect for function _UART_u8GetNodeID
  2150  0368                     _UART_u8GetNodeID:	
  2151                           
  2152                           ;UART_m.c: 74: return 0x35;
  2153                           
  2154                           ;incstack = 0
  2155                           ; Regs used in _UART_u8GetNodeID: [wreg]
  2156  0368  3035               	movlw	53
  2157  0369  0008               	return
  2158  036A                     __end_of_UART_u8GetNodeID:	
  2159                           
  2160                           	psect	text11
  2161  0320                     __ptext11:	
  2162 ;; *************** function _UART_Write *****************
  2163 ;; Defined at:
  2164 ;;		line 13 in file "main.c"
  2165 ;; Parameters:    Size  Location     Type
  2166 ;;  data            1    wreg     unsigned char 
  2167 ;; Auto vars:     Size  Location     Type
  2168 ;;  data            1    0[BANK0 ] unsigned char 
  2169 ;; Return value:  Size  Location     Type
  2170 ;;                  1    wreg      void 
  2171 ;; Registers used:
  2172 ;;		wreg
  2173 ;; Tracked objects:
  2174 ;;		On entry : 0/0
  2175 ;;		On exit  : 0/0
  2176 ;;		Unchanged: 0/0
  2177 ;; Data sizes:     COMMON   BANK0   BANK1
  2178 ;;      Params:         0       0       0
  2179 ;;      Locals:         0       1       0
  2180 ;;      Temps:          0       0       0
  2181 ;;      Totals:         0       1       0
  2182 ;;Total ram usage:        1 bytes
  2183 ;; Hardware stack levels used:    1
  2184 ;; Hardware stack levels required when called:    3
  2185 ;; This function calls:
  2186 ;;		Nothing
  2187 ;; This function is called by:
  2188 ;;		_main
  2189 ;; This function uses a non-reentrant model
  2190 ;;
  2191                           
  2192                           
  2193                           ;psect for function _UART_Write
  2194  0320                     _UART_Write:	
  2195                           
  2196                           ;incstack = 0
  2197                           ; Regs used in _UART_Write: [wreg]
  2198                           ;UART_Write@data stored from wreg
  2199  0320  1283               	bcf	3,5	;RP0=0, select bank0
  2200  0321  1303               	bcf	3,6	;RP1=0, select bank0
  2201  0322  00A0               	movwf	UART_Write@data
  2202  0323                     l49:	
  2203                           ;main.c: 15: while(!TRMT);
  2204                           
  2205  0323  1683               	bsf	3,5	;RP0=1, select bank1
  2206  0324  1303               	bcf	3,6	;RP1=0, select bank1
  2207  0325  1C98               	btfss	24,1	;volatile
  2208  0326  2B23               	goto	l49
  2209                           
  2210                           ;main.c: 16: TXREG = data;
  2211  0327  1283               	bcf	3,5	;RP0=0, select bank0
  2212  0328  1303               	bcf	3,6	;RP1=0, select bank0
  2213  0329  0820               	movf	UART_Write@data,w
  2214  032A  0099               	movwf	25	;volatile
  2215  032B  0008               	return
  2216  032C                     __end_of_UART_Write:	
  2217                           
  2218                           	psect	text12
  2219  02D7                     __ptext12:	
  2220 ;; *************** function _I2CInit *****************
  2221 ;; Defined at:
  2222 ;;		line 23 in file "ADXL_m.c"
  2223 ;; Parameters:    Size  Location     Type
  2224 ;;		None
  2225 ;; Auto vars:     Size  Location     Type
  2226 ;;		None
  2227 ;; Return value:  Size  Location     Type
  2228 ;;                  1    wreg      void 
  2229 ;; Registers used:
  2230 ;;		wreg, status,2
  2231 ;; Tracked objects:
  2232 ;;		On entry : 0/0
  2233 ;;		On exit  : 0/0
  2234 ;;		Unchanged: 0/0
  2235 ;; Data sizes:     COMMON   BANK0   BANK1
  2236 ;;      Params:         0       0       0
  2237 ;;      Locals:         0       0       0
  2238 ;;      Temps:          0       0       0
  2239 ;;      Totals:         0       0       0
  2240 ;;Total ram usage:        0 bytes
  2241 ;; Hardware stack levels used:    1
  2242 ;; Hardware stack levels required when called:    3
  2243 ;; This function calls:
  2244 ;;		Nothing
  2245 ;; This function is called by:
  2246 ;;		_main
  2247 ;; This function uses a non-reentrant model
  2248 ;;
  2249                           
  2250                           
  2251                           ;psect for function _I2CInit
  2252  02D7                     _I2CInit:	
  2253                           
  2254                           ;ADXL_m.c: 25: TRISCbits.TRISC3 = 1;
  2255                           
  2256                           ;incstack = 0
  2257                           ; Regs used in _I2CInit: [wreg+status,2]
  2258  02D7  1683               	bsf	3,5	;RP0=1, select bank1
  2259  02D8  1303               	bcf	3,6	;RP1=0, select bank1
  2260  02D9  1587               	bsf	7,3	;volatile
  2261                           
  2262                           ;ADXL_m.c: 26: TRISCbits.TRISC4 = 1;
  2263  02DA  1607               	bsf	7,4	;volatile
  2264                           
  2265                           ;ADXL_m.c: 27: SSPSTAT |= 0x80;
  2266  02DB  1794               	bsf	20,7	;volatile
  2267                           
  2268                           ;ADXL_m.c: 28: SSPCON = 0x28;
  2269  02DC  3028               	movlw	40
  2270  02DD  1283               	bcf	3,5	;RP0=0, select bank0
  2271  02DE  1303               	bcf	3,6	;RP1=0, select bank0
  2272  02DF  0094               	movwf	20	;volatile
  2273                           
  2274                           ;ADXL_m.c: 30: SSPCON2 = 0x00;
  2275  02E0  1683               	bsf	3,5	;RP0=1, select bank1
  2276  02E1  1303               	bcf	3,6	;RP1=0, select bank1
  2277  02E2  0191               	clrf	17	;volatile
  2278                           
  2279                           ;ADXL_m.c: 31: SSPADD = 49;
  2280  02E3  3031               	movlw	49
  2281  02E4  0093               	movwf	19	;volatile
  2282                           
  2283                           ;ADXL_m.c: 32: PIR1bits.SSPIF = 0;
  2284  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  2285  02E6  1303               	bcf	3,6	;RP1=0, select bank0
  2286  02E7  118C               	bcf	12,3	;volatile
  2287                           
  2288                           ;ADXL_m.c: 33: PIR2bits.BCLIF = 0;
  2289  02E8  118D               	bcf	13,3	;volatile
  2290  02E9  0008               	return
  2291  02EA                     __end_of_I2CInit:	
  2292                           
  2293                           	psect	text13
  2294  0348                     __ptext13:	
  2295 ;; *************** function _I2CAck *****************
  2296 ;; Defined at:
  2297 ;;		line 89 in file "ADXL_m.c"
  2298 ;; Parameters:    Size  Location     Type
  2299 ;;		None
  2300 ;; Auto vars:     Size  Location     Type
  2301 ;;		None
  2302 ;; Return value:  Size  Location     Type
  2303 ;;                  1    wreg      void 
  2304 ;; Registers used:
  2305 ;;		None
  2306 ;; Tracked objects:
  2307 ;;		On entry : 0/0
  2308 ;;		On exit  : 0/0
  2309 ;;		Unchanged: 0/0
  2310 ;; Data sizes:     COMMON   BANK0   BANK1
  2311 ;;      Params:         0       0       0
  2312 ;;      Locals:         0       0       0
  2313 ;;      Temps:          0       0       0
  2314 ;;      Totals:         0       0       0
  2315 ;;Total ram usage:        0 bytes
  2316 ;; Hardware stack levels used:    1
  2317 ;; Hardware stack levels required when called:    3
  2318 ;; This function calls:
  2319 ;;		Nothing
  2320 ;; This function is called by:
  2321 ;;		_main
  2322 ;; This function uses a non-reentrant model
  2323 ;;
  2324                           
  2325                           
  2326                           ;psect for function _I2CAck
  2327  0348                     _I2CAck:	
  2328                           
  2329                           ;ADXL_m.c: 91: ACKDT = 0;
  2330                           
  2331                           ;incstack = 0
  2332                           ; Regs used in _I2CAck: []
  2333  0348  1683               	bsf	3,5	;RP0=1, select bank1
  2334  0349  1303               	bcf	3,6	;RP1=0, select bank1
  2335  034A  1291               	bcf	17,5	;volatile
  2336                           
  2337                           ;ADXL_m.c: 92: ACKEN = 1;
  2338  034B  1611               	bsf	17,4	;volatile
  2339  034C                     l194:	
  2340                           ;ADXL_m.c: 93: while(ACKEN);
  2341                           
  2342  034C  1E11               	btfss	17,4	;volatile
  2343  034D  0008               	return
  2344  034E  2B4C               	goto	l194
  2345  034F                     __end_of_I2CAck:	
  2346                           
  2347                           	psect	text14
  2348  02AC                     __ptext14:	
  2349 ;; *************** function _E_Read *****************
  2350 ;; Defined at:
  2351 ;;		line 171 in file "ADXL_m.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;  addr            2    2[BANK0 ] int 
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;  ch              1    5[BANK0 ] unsigned char 
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  1    wreg      unsigned char 
  2358 ;; Registers used:
  2359 ;;		wreg, status,2, status,0, pclath, cstack
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMMON   BANK0   BANK1
  2365 ;;      Params:         0       2       0
  2366 ;;      Locals:         0       1       0
  2367 ;;      Temps:          0       1       0
  2368 ;;      Totals:         0       4       0
  2369 ;;Total ram usage:        4 bytes
  2370 ;; Hardware stack levels used:    1
  2371 ;; Hardware stack levels required when called:    5
  2372 ;; This function calls:
  2373 ;;		_I2CNak
  2374 ;;		_I2CRead
  2375 ;;		_I2CRestart
  2376 ;;		_I2CSend
  2377 ;;		_I2CStart
  2378 ;;		_I2CStop
  2379 ;; This function is called by:
  2380 ;;		_main
  2381 ;; This function uses a non-reentrant model
  2382 ;;
  2383                           
  2384                           
  2385                           ;psect for function _E_Read
  2386  02AC                     _E_Read:	
  2387                           
  2388                           ;ADXL_m.c: 173: unsigned char ch;
  2389                           ;ADXL_m.c: 175: I2CStart();
  2390                           
  2391                           ;incstack = 0
  2392                           ; Regs used in _E_Read: [wreg+status,2+status,0+pclath+cstack]
  2393  02AC  235C               	fcall	_I2CStart
  2394                           
  2395                           ;ADXL_m.c: 177: I2CSend(0xA6);
  2396  02AD  30A6               	movlw	166
  2397  02AE  232C               	fcall	_I2CSend
  2398                           
  2399                           ;ADXL_m.c: 179: I2CSend(addr);
  2400  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2401  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2402  02B1  0822               	movf	E_Read@addr,w
  2403  02B2  232C               	fcall	_I2CSend
  2404                           
  2405                           ;ADXL_m.c: 181: I2CRestart();
  2406  02B3  2362               	fcall	_I2CRestart
  2407                           
  2408                           ;ADXL_m.c: 183: I2CSend(0xA7);
  2409  02B4  30A7               	movlw	167
  2410  02B5  232C               	fcall	_I2CSend
  2411                           
  2412                           ;ADXL_m.c: 185: ch = I2CRead();
  2413  02B6  22EA               	fcall	_I2CRead
  2414  02B7  1283               	bcf	3,5	;RP0=0, select bank0
  2415  02B8  1303               	bcf	3,6	;RP1=0, select bank0
  2416  02B9  00A4               	movwf	??_E_Read
  2417  02BA  0824               	movf	??_E_Read,w
  2418  02BB  00A5               	movwf	E_Read@ch
  2419                           
  2420                           ;ADXL_m.c: 186: I2CNak();
  2421  02BC  234F               	fcall	_I2CNak
  2422                           
  2423                           ;ADXL_m.c: 187: I2CStop();
  2424  02BD  2356               	fcall	_I2CStop
  2425                           
  2426                           ;ADXL_m.c: 188: return ch;
  2427  02BE  1283               	bcf	3,5	;RP0=0, select bank0
  2428  02BF  1303               	bcf	3,6	;RP1=0, select bank0
  2429  02C0  0825               	movf	E_Read@ch,w
  2430  02C1  0008               	return
  2431  02C2                     __end_of_E_Read:	
  2432                           
  2433                           	psect	text15
  2434  0356                     __ptext15:	
  2435 ;; *************** function _I2CStop *****************
  2436 ;; Defined at:
  2437 ;;		line 64 in file "ADXL_m.c"
  2438 ;; Parameters:    Size  Location     Type
  2439 ;;		None
  2440 ;; Auto vars:     Size  Location     Type
  2441 ;;		None
  2442 ;; Return value:  Size  Location     Type
  2443 ;;                  1    wreg      void 
  2444 ;; Registers used:
  2445 ;;		None
  2446 ;; Tracked objects:
  2447 ;;		On entry : 0/0
  2448 ;;		On exit  : 0/0
  2449 ;;		Unchanged: 0/0
  2450 ;; Data sizes:     COMMON   BANK0   BANK1
  2451 ;;      Params:         0       0       0
  2452 ;;      Locals:         0       0       0
  2453 ;;      Temps:          0       0       0
  2454 ;;      Totals:         0       0       0
  2455 ;;Total ram usage:        0 bytes
  2456 ;; Hardware stack levels used:    1
  2457 ;; Hardware stack levels required when called:    3
  2458 ;; This function calls:
  2459 ;;		Nothing
  2460 ;; This function is called by:
  2461 ;;		_main
  2462 ;;		_E_Write
  2463 ;;		_E_Read
  2464 ;; This function uses a non-reentrant model
  2465 ;;
  2466                           
  2467                           
  2468                           ;psect for function _I2CStop
  2469  0356                     _I2CStop:	
  2470                           
  2471                           ;ADXL_m.c: 66: PEN = 1;
  2472                           
  2473                           ;incstack = 0
  2474                           ; Regs used in _I2CStop: []
  2475  0356  1683               	bsf	3,5	;RP0=1, select bank1
  2476  0357  1303               	bcf	3,6	;RP1=0, select bank1
  2477  0358  1511               	bsf	17,2	;volatile
  2478  0359                     l182:	
  2479                           ;ADXL_m.c: 67: while(PEN);
  2480                           
  2481  0359  1D11               	btfss	17,2	;volatile
  2482  035A  0008               	return
  2483  035B  2B59               	goto	l182
  2484  035C                     __end_of_I2CStop:	
  2485                           
  2486                           	psect	text16
  2487  035C                     __ptext16:	
  2488 ;; *************** function _I2CStart *****************
  2489 ;; Defined at:
  2490 ;;		line 51 in file "ADXL_m.c"
  2491 ;; Parameters:    Size  Location     Type
  2492 ;;		None
  2493 ;; Auto vars:     Size  Location     Type
  2494 ;;		None
  2495 ;; Return value:  Size  Location     Type
  2496 ;;                  1    wreg      void 
  2497 ;; Registers used:
  2498 ;;		None
  2499 ;; Tracked objects:
  2500 ;;		On entry : 0/0
  2501 ;;		On exit  : 0/0
  2502 ;;		Unchanged: 0/0
  2503 ;; Data sizes:     COMMON   BANK0   BANK1
  2504 ;;      Params:         0       0       0
  2505 ;;      Locals:         0       0       0
  2506 ;;      Temps:          0       0       0
  2507 ;;      Totals:         0       0       0
  2508 ;;Total ram usage:        0 bytes
  2509 ;; Hardware stack levels used:    1
  2510 ;; Hardware stack levels required when called:    3
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_main
  2515 ;;		_E_Write
  2516 ;;		_E_Read
  2517 ;; This function uses a non-reentrant model
  2518 ;;
  2519                           
  2520                           
  2521                           ;psect for function _I2CStart
  2522  035C                     _I2CStart:	
  2523                           
  2524                           ;ADXL_m.c: 53: SEN = 1;
  2525                           
  2526                           ;incstack = 0
  2527                           ; Regs used in _I2CStart: []
  2528  035C  1683               	bsf	3,5	;RP0=1, select bank1
  2529  035D  1303               	bcf	3,6	;RP1=0, select bank1
  2530  035E  1411               	bsf	17,0	;volatile
  2531  035F                     l176:	
  2532                           ;ADXL_m.c: 54: while(SEN);
  2533                           
  2534  035F  1C11               	btfss	17,0	;volatile
  2535  0360  0008               	return
  2536  0361  2B5F               	goto	l176
  2537  0362                     __end_of_I2CStart:	
  2538                           
  2539                           	psect	text17
  2540  032C                     __ptext17:	
  2541 ;; *************** function _I2CSend *****************
  2542 ;; Defined at:
  2543 ;;		line 128 in file "ADXL_m.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  dat             1    wreg     unsigned char 
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  dat             1    0[BANK0 ] unsigned char 
  2548 ;; Return value:  Size  Location     Type
  2549 ;;                  1    wreg      void 
  2550 ;; Registers used:
  2551 ;;		wreg, status,2, status,0, pclath, cstack
  2552 ;; Tracked objects:
  2553 ;;		On entry : 0/0
  2554 ;;		On exit  : 0/0
  2555 ;;		Unchanged: 0/0
  2556 ;; Data sizes:     COMMON   BANK0   BANK1
  2557 ;;      Params:         0       0       0
  2558 ;;      Locals:         0       1       0
  2559 ;;      Temps:          0       0       0
  2560 ;;      Totals:         0       1       0
  2561 ;;Total ram usage:        1 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; Hardware stack levels required when called:    4
  2564 ;; This function calls:
  2565 ;;		_I2CWait
  2566 ;; This function is called by:
  2567 ;;		_main
  2568 ;;		_E_Write
  2569 ;;		_E_Read
  2570 ;; This function uses a non-reentrant model
  2571 ;;
  2572                           
  2573                           
  2574                           ;psect for function _I2CSend
  2575  032C                     _I2CSend:	
  2576                           
  2577                           ;incstack = 0
  2578                           ; Regs used in _I2CSend: [wreg+status,2+status,0+pclath+cstack]
  2579                           ;I2CSend@dat stored from wreg
  2580  032C  1283               	bcf	3,5	;RP0=0, select bank0
  2581  032D  1303               	bcf	3,6	;RP1=0, select bank0
  2582  032E  00A0               	movwf	I2CSend@dat
  2583                           
  2584                           ;ADXL_m.c: 130: SSPBUF = dat;
  2585  032F  0820               	movf	I2CSend@dat,w
  2586  0330  0093               	movwf	19	;volatile
  2587  0331                     l212:	
  2588                           ;ADXL_m.c: 131: while(BF);
  2589                           
  2590  0331  1683               	bsf	3,5	;RP0=1, select bank1
  2591  0332  1303               	bcf	3,6	;RP1=0, select bank1
  2592  0333  1814               	btfsc	20,0	;volatile
  2593  0334  2B31               	goto	l212
  2594                           
  2595                           ;ADXL_m.c: 132: I2CWait();
  2596  0335  2337               	fcall	_I2CWait
  2597  0336  0008               	return
  2598  0337                     __end_of_I2CSend:	
  2599                           
  2600                           	psect	text18
  2601  0362                     __ptext18:	
  2602 ;; *************** function _I2CRestart *****************
  2603 ;; Defined at:
  2604 ;;		line 77 in file "ADXL_m.c"
  2605 ;; Parameters:    Size  Location     Type
  2606 ;;		None
  2607 ;; Auto vars:     Size  Location     Type
  2608 ;;		None
  2609 ;; Return value:  Size  Location     Type
  2610 ;;                  1    wreg      void 
  2611 ;; Registers used:
  2612 ;;		None
  2613 ;; Tracked objects:
  2614 ;;		On entry : 0/0
  2615 ;;		On exit  : 0/0
  2616 ;;		Unchanged: 0/0
  2617 ;; Data sizes:     COMMON   BANK0   BANK1
  2618 ;;      Params:         0       0       0
  2619 ;;      Locals:         0       0       0
  2620 ;;      Temps:          0       0       0
  2621 ;;      Totals:         0       0       0
  2622 ;;Total ram usage:        0 bytes
  2623 ;; Hardware stack levels used:    1
  2624 ;; Hardware stack levels required when called:    3
  2625 ;; This function calls:
  2626 ;;		Nothing
  2627 ;; This function is called by:
  2628 ;;		_main
  2629 ;;		_E_Read
  2630 ;; This function uses a non-reentrant model
  2631 ;;
  2632                           
  2633                           
  2634                           ;psect for function _I2CRestart
  2635  0362                     _I2CRestart:	
  2636                           
  2637                           ;ADXL_m.c: 79: RSEN = 1;
  2638                           
  2639                           ;incstack = 0
  2640                           ; Regs used in _I2CRestart: []
  2641  0362  1683               	bsf	3,5	;RP0=1, select bank1
  2642  0363  1303               	bcf	3,6	;RP1=0, select bank1
  2643  0364  1491               	bsf	17,1	;volatile
  2644  0365                     l188:	
  2645                           ;ADXL_m.c: 80: while(RSEN);
  2646                           
  2647  0365  1C91               	btfss	17,1	;volatile
  2648  0366  0008               	return
  2649  0367  2B65               	goto	l188
  2650  0368                     __end_of_I2CRestart:	
  2651                           
  2652                           	psect	text19
  2653  02EA                     __ptext19:	
  2654 ;; *************** function _I2CRead *****************
  2655 ;; Defined at:
  2656 ;;		line 141 in file "ADXL_m.c"
  2657 ;; Parameters:    Size  Location     Type
  2658 ;;		None
  2659 ;; Auto vars:     Size  Location     Type
  2660 ;;  temp            1    1[BANK0 ] unsigned char 
  2661 ;; Return value:  Size  Location     Type
  2662 ;;                  1    wreg      unsigned char 
  2663 ;; Registers used:
  2664 ;;		wreg, status,2, status,0, pclath, cstack
  2665 ;; Tracked objects:
  2666 ;;		On entry : 0/0
  2667 ;;		On exit  : 0/0
  2668 ;;		Unchanged: 0/0
  2669 ;; Data sizes:     COMMON   BANK0   BANK1
  2670 ;;      Params:         0       0       0
  2671 ;;      Locals:         0       1       0
  2672 ;;      Temps:          0       1       0
  2673 ;;      Totals:         0       2       0
  2674 ;;Total ram usage:        2 bytes
  2675 ;; Hardware stack levels used:    1
  2676 ;; Hardware stack levels required when called:    4
  2677 ;; This function calls:
  2678 ;;		_I2CWait
  2679 ;; This function is called by:
  2680 ;;		_main
  2681 ;;		_E_Read
  2682 ;; This function uses a non-reentrant model
  2683 ;;
  2684                           
  2685                           
  2686                           ;psect for function _I2CRead
  2687  02EA                     _I2CRead:	
  2688                           
  2689                           ;ADXL_m.c: 143: unsigned char temp;
  2690                           ;ADXL_m.c: 145: RCEN = 1;
  2691                           
  2692                           ;incstack = 0
  2693                           ; Regs used in _I2CRead: [wreg+status,2+status,0+pclath+cstack]
  2694  02EA  1683               	bsf	3,5	;RP0=1, select bank1
  2695  02EB  1303               	bcf	3,6	;RP1=0, select bank1
  2696  02EC  1591               	bsf	17,3	;volatile
  2697  02ED                     l218:	
  2698                           ;ADXL_m.c: 146: while(!BF);
  2699                           
  2700  02ED  1C14               	btfss	20,0	;volatile
  2701  02EE  2AED               	goto	l218
  2702                           
  2703                           ;ADXL_m.c: 147: temp = SSPBUF;
  2704  02EF  1283               	bcf	3,5	;RP0=0, select bank0
  2705  02F0  1303               	bcf	3,6	;RP1=0, select bank0
  2706  02F1  0813               	movf	19,w	;volatile
  2707  02F2  00A0               	movwf	??_I2CRead
  2708  02F3  0820               	movf	??_I2CRead,w
  2709  02F4  00A1               	movwf	I2CRead@temp
  2710                           
  2711                           ;ADXL_m.c: 148: I2CWait();
  2712  02F5  2337               	fcall	_I2CWait
  2713                           
  2714                           ;ADXL_m.c: 149: return temp;
  2715  02F6  1283               	bcf	3,5	;RP0=0, select bank0
  2716  02F7  1303               	bcf	3,6	;RP1=0, select bank0
  2717  02F8  0821               	movf	I2CRead@temp,w
  2718  02F9  0008               	return
  2719  02FA                     __end_of_I2CRead:	
  2720                           
  2721                           	psect	text20
  2722  0337                     __ptext20:	
  2723 ;; *************** function _I2CWait *****************
  2724 ;; Defined at:
  2725 ;;		line 115 in file "ADXL_m.c"
  2726 ;; Parameters:    Size  Location     Type
  2727 ;;		None
  2728 ;; Auto vars:     Size  Location     Type
  2729 ;;		None
  2730 ;; Return value:  Size  Location     Type
  2731 ;;                  1    wreg      void 
  2732 ;; Registers used:
  2733 ;;		wreg, status,2
  2734 ;; Tracked objects:
  2735 ;;		On entry : 0/0
  2736 ;;		On exit  : 0/0
  2737 ;;		Unchanged: 0/0
  2738 ;; Data sizes:     COMMON   BANK0   BANK1
  2739 ;;      Params:         0       0       0
  2740 ;;      Locals:         0       0       0
  2741 ;;      Temps:          0       0       0
  2742 ;;      Totals:         0       0       0
  2743 ;;Total ram usage:        0 bytes
  2744 ;; Hardware stack levels used:    1
  2745 ;; Hardware stack levels required when called:    3
  2746 ;; This function calls:
  2747 ;;		Nothing
  2748 ;; This function is called by:
  2749 ;;		_I2CSend
  2750 ;;		_I2CRead
  2751 ;; This function uses a non-reentrant model
  2752 ;;
  2753                           
  2754                           
  2755                           ;psect for function _I2CWait
  2756  0337                     _I2CWait:	
  2757  0337                     l1034:	
  2758                           ;ADXL_m.c: 117: while ((SSPCON2 & 0x1F ) || ( SSPSTAT & 0x04 ) );
  2759                           
  2760                           ;incstack = 0
  2761                           ; Regs used in _I2CWait: [wreg+status,2]
  2762                           
  2763  0337  1683               	bsf	3,5	;RP0=1, select bank1
  2764  0338  1303               	bcf	3,6	;RP1=0, select bank1
  2765  0339  0811               	movf	17,w	;volatile
  2766  033A  391F               	andlw	31
  2767  033B  1D03               	btfss	3,2
  2768  033C  2B37               	goto	l1034
  2769  033D  1D14               	btfss	20,2	;volatile
  2770  033E  0008               	return
  2771  033F  2B37               	goto	l1034
  2772  0340                     __end_of_I2CWait:	
  2773                           
  2774                           	psect	text21
  2775  034F                     __ptext21:	
  2776 ;; *************** function _I2CNak *****************
  2777 ;; Defined at:
  2778 ;;		line 102 in file "ADXL_m.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;		None
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		None
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1
  2792 ;;      Params:         0       0       0
  2793 ;;      Locals:         0       0       0
  2794 ;;      Temps:          0       0       0
  2795 ;;      Totals:         0       0       0
  2796 ;;Total ram usage:        0 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    3
  2799 ;; This function calls:
  2800 ;;		Nothing
  2801 ;; This function is called by:
  2802 ;;		_main
  2803 ;;		_E_Read
  2804 ;; This function uses a non-reentrant model
  2805 ;;
  2806                           
  2807                           
  2808                           ;psect for function _I2CNak
  2809  034F                     _I2CNak:	
  2810                           
  2811                           ;ADXL_m.c: 104: ACKDT = 1;
  2812                           
  2813                           ;incstack = 0
  2814                           ; Regs used in _I2CNak: []
  2815  034F  1683               	bsf	3,5	;RP0=1, select bank1
  2816  0350  1303               	bcf	3,6	;RP1=0, select bank1
  2817  0351  1691               	bsf	17,5	;volatile
  2818                           
  2819                           ;ADXL_m.c: 105: ACKEN = 1;
  2820  0352  1611               	bsf	17,4	;volatile
  2821  0353                     l200:	
  2822                           ;ADXL_m.c: 106: while(ACKEN);
  2823                           
  2824  0353  1E11               	btfss	17,4	;volatile
  2825  0354  0008               	return
  2826  0355  2B53               	goto	l200
  2827  0356                     __end_of_I2CNak:	
  2828                           
  2829                           	psect	text22
  2830  02C2                     __ptext22:	
  2831 ;; *************** function _UART_vidNewDataReceived *****************
  2832 ;; Defined at:
  2833 ;;		line 33 in file "UART_m.c"
  2834 ;; Parameters:    Size  Location     Type
  2835 ;;		None
  2836 ;; Auto vars:     Size  Location     Type
  2837 ;;		None
  2838 ;; Return value:  Size  Location     Type
  2839 ;;                  1    wreg      void 
  2840 ;; Registers used:
  2841 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2842 ;; Tracked objects:
  2843 ;;		On entry : 0/0
  2844 ;;		On exit  : 0/0
  2845 ;;		Unchanged: 0/0
  2846 ;; Data sizes:     COMMON   BANK0   BANK1
  2847 ;;      Params:         0       0       0
  2848 ;;      Locals:         0       0       0
  2849 ;;      Temps:          4       0       0
  2850 ;;      Totals:         4       0       0
  2851 ;;Total ram usage:        4 bytes
  2852 ;; Hardware stack levels used:    1
  2853 ;; Hardware stack levels required when called:    2
  2854 ;; This function calls:
  2855 ;;		_RS845_ManageState
  2856 ;; This function is called by:
  2857 ;;		Interrupt level 1
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860                           
  2861                           
  2862                           ;psect for function _UART_vidNewDataReceived
  2863  02C2                     _UART_vidNewDataReceived:	
  2864                           
  2865                           ;UART_m.c: 35: if(RCIF == 1)
  2866  02C2  1E8C               	btfss	12,5	;volatile
  2867  02C3  2ACC               	goto	i1l113
  2868                           
  2869                           ;UART_m.c: 36: {
  2870                           ;UART_m.c: 37: GIE = 0;
  2871  02C4  138B               	bcf	11,7	;volatile
  2872                           
  2873                           ;UART_m.c: 38: RS845_ManageState();
  2874  02C5  2307               	fcall	_RS845_ManageState
  2875                           
  2876                           ;UART_m.c: 39: GIE = 1;
  2877  02C6  178B               	bsf	11,7	;volatile
  2878                           
  2879                           ;UART_m.c: 40: RCIF = 0;
  2880  02C7  1283               	bcf	3,5	;RP0=0, select bank0
  2881  02C8  1303               	bcf	3,6	;RP1=0, select bank0
  2882  02C9  128C               	bcf	12,5	;volatile
  2883                           
  2884                           ;UART_m.c: 41: RC0 ^= 1;
  2885  02CA  3001               	movlw	1
  2886  02CB  0687               	xorwf	7,f
  2887  02CC                     i1l113:	
  2888                           ;UART_m.c: 43: else
  2889                           ;UART_m.c: 44: {
  2890                           
  2891                           ;UART_m.c: 42: }
  2892                           
  2893  02CC  0879               	movf	??_UART_vidNewDataReceived+3,w
  2894  02CD  00FF               	movwf	127
  2895  02CE  0878               	movf	??_UART_vidNewDataReceived+2,w
  2896  02CF  008A               	movwf	10
  2897  02D0  0877               	movf	??_UART_vidNewDataReceived+1,w
  2898  02D1  0084               	movwf	4
  2899  02D2  0E76               	swapf	??_UART_vidNewDataReceived^(0+-128),w
  2900  02D3  0083               	movwf	3
  2901  02D4  0EFE               	swapf	126,f
  2902  02D5  0E7E               	swapf	126,w
  2903  02D6  0009               	retfie
  2904  02D7                     __end_of_UART_vidNewDataReceived:	
  2905                           
  2906                           	psect	intentry
  2907  0004                     __pintentry:	
  2908                           ;incstack = 0
  2909                           ; Regs used in _UART_vidNewDataReceived: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2910                           
  2911  0004                     interrupt_function:	
  2912  007E                     saved_w	set	btemp
  2913  0004  00FE               	movwf	btemp
  2914  0005  0E03               	swapf	3,w
  2915  0006  00F6               	movwf	??_UART_vidNewDataReceived
  2916  0007  0804               	movf	4,w
  2917  0008  00F7               	movwf	??_UART_vidNewDataReceived+1
  2918  0009  080A               	movf	10,w
  2919  000A  00F8               	movwf	??_UART_vidNewDataReceived+2
  2920  000B  1283               	bcf	3,5	;RP0=0, select bank0
  2921  000C  1303               	bcf	3,6	;RP1=0, select bank0
  2922  000D  087F               	movf	btemp+1,w
  2923  000E  00F9               	movwf	??_UART_vidNewDataReceived+3
  2924  000F  2AC2               	ljmp	_UART_vidNewDataReceived
  2925                           
  2926                           	psect	text23
  2927  0307                     __ptext23:	
  2928 ;; *************** function _RS845_ManageState *****************
  2929 ;; Defined at:
  2930 ;;		line 49 in file "UART_m.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;		None
  2933 ;; Auto vars:     Size  Location     Type
  2934 ;;		None
  2935 ;; Return value:  Size  Location     Type
  2936 ;;                  1    wreg      void 
  2937 ;; Registers used:
  2938 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2939 ;; Tracked objects:
  2940 ;;		On entry : 0/0
  2941 ;;		On exit  : 0/0
  2942 ;;		Unchanged: 0/0
  2943 ;; Data sizes:     COMMON   BANK0   BANK1
  2944 ;;      Params:         0       0       0
  2945 ;;      Locals:         0       0       0
  2946 ;;      Temps:          0       0       0
  2947 ;;      Totals:         0       0       0
  2948 ;;Total ram usage:        0 bytes
  2949 ;; Hardware stack levels used:    1
  2950 ;; Hardware stack levels required when called:    1
  2951 ;; This function calls:
  2952 ;;		_UART_vidSend
  2953 ;; This function is called by:
  2954 ;;		_UART_vidNewDataReceived
  2955 ;; This function uses a non-reentrant model
  2956 ;;
  2957                           
  2958                           
  2959                           ;psect for function _RS845_ManageState
  2960  0307                     _RS845_ManageState:	
  2961                           
  2962                           ;UART_m.c: 51: if(RCREG == (unsigned char)ECU_ID)
  2963                           
  2964                           ;incstack = 0
  2965                           ; Regs used in _RS845_ManageState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2966  0307  1283               	bcf	3,5	;RP0=0, select bank0
  2967  0308  1303               	bcf	3,6	;RP1=0, select bank0
  2968  0309  081A               	movf	26,w	;volatile
  2969  030A  067A               	xorwf	_ECU_ID,w
  2970  030B  1D03               	skipz
  2971  030C  0008               	return
  2972                           
  2973                           ;UART_m.c: 52: {
  2974                           ;UART_m.c: 53: UART_vidSend(&Data_Buffer.DATA_BUFFER[0],((unsigned char)10));
  2975  030D  300A               	movlw	10
  2976  030E  00F0               	movwf	UART_vidSend@Len
  2977  030F  3000               	movlw	0
  2978  0310  00F1               	movwf	UART_vidSend@Len+1
  2979  0311  3055               	movlw	(low (_Data_Buffer| 0))& (0+255)
  2980  0312  2243               	fcall	_UART_vidSend
  2981                           
  2982                           ;UART_m.c: 54: }
  2983  0313  0008               	return
  2984  0314                     __end_of_RS845_ManageState:	
  2985                           ;UART_m.c: 55: else
  2986                           ;UART_m.c: 56: {
  2987                           
  2988                           
  2989                           	psect	text24
  2990  0243                     __ptext24:	
  2991 ;; *************** function _UART_vidSend *****************
  2992 ;; Defined at:
  2993 ;;		line 60 in file "UART_m.c"
  2994 ;; Parameters:    Size  Location     Type
  2995 ;;  data            1    wreg     const PTR unsigned char 
  2996 ;;		 -> Data_Buffer(10), 
  2997 ;;  Len             2    0[COMMON] const unsigned short 
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;  data            1    3[COMMON] const PTR unsigned char 
  3000 ;;		 -> Data_Buffer(10), 
  3001 ;;  UART_u16Inde    2    4[COMMON] unsigned short 
  3002 ;; Return value:  Size  Location     Type
  3003 ;;                  1    wreg      void 
  3004 ;; Registers used:
  3005 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3006 ;; Tracked objects:
  3007 ;;		On entry : 0/0
  3008 ;;		On exit  : 0/0
  3009 ;;		Unchanged: 0/0
  3010 ;; Data sizes:     COMMON   BANK0   BANK1
  3011 ;;      Params:         2       0       0
  3012 ;;      Locals:         3       0       0
  3013 ;;      Temps:          1       0       0
  3014 ;;      Totals:         6       0       0
  3015 ;;Total ram usage:        6 bytes
  3016 ;; Hardware stack levels used:    1
  3017 ;; This function calls:
  3018 ;;		Nothing
  3019 ;; This function is called by:
  3020 ;;		_RS845_ManageState
  3021 ;; This function uses a non-reentrant model
  3022 ;;
  3023                           
  3024                           
  3025                           ;psect for function _UART_vidSend
  3026  0243                     _UART_vidSend:	
  3027                           
  3028                           ;incstack = 0
  3029                           ; Regs used in _UART_vidSend: [wreg-fsr0h+status,2+status,0]
  3030                           ;UART_vidSend@data stored from wreg
  3031  0243  00F3               	movwf	UART_vidSend@data
  3032                           
  3033                           ;UART_m.c: 62: unsigned short UART_u16Index = 0;
  3034  0244  01F4               	clrf	UART_vidSend@UART_u16Index
  3035  0245  01F5               	clrf	UART_vidSend@UART_u16Index+1
  3036                           
  3037                           ;UART_m.c: 64: for(UART_u16Index = 0; UART_u16Index < Len; UART_u16Index++)
  3038  0246  01F4               	clrf	UART_vidSend@UART_u16Index
  3039  0247  01F5               	clrf	UART_vidSend@UART_u16Index+1
  3040  0248  0871               	movf	UART_vidSend@Len+1,w
  3041  0249  0275               	subwf	UART_vidSend@UART_u16Index+1,w
  3042  024A  1D03               	skipz
  3043  024B  2A4E               	goto	u42_25
  3044  024C  0870               	movf	UART_vidSend@Len,w
  3045  024D  0274               	subwf	UART_vidSend@UART_u16Index,w
  3046  024E                     u42_25:	
  3047  024E  1803               	btfsc	3,0
  3048  024F  2A6A               	goto	i1l122
  3049  0250                     i1l123:	
  3050                           ;UART_m.c: 65: {
  3051                           ;UART_m.c: 66: while(PIR1bits.TXIF == 0);
  3052                           
  3053  0250  1283               	bcf	3,5	;RP0=0, select bank0
  3054  0251  1303               	bcf	3,6	;RP1=0, select bank0
  3055  0252  1E0C               	btfss	12,4	;volatile
  3056  0253  2A50               	goto	i1l123
  3057                           
  3058                           ;UART_m.c: 67: TXREG = data[UART_u16Index];
  3059  0254  0874               	movf	UART_vidSend@UART_u16Index,w
  3060  0255  0773               	addwf	UART_vidSend@data,w
  3061  0256  00F2               	movwf	??_UART_vidSend
  3062  0257  0872               	movf	??_UART_vidSend,w
  3063  0258  0084               	movwf	4
  3064  0259  1383               	bcf	3,7	;select IRP bank0
  3065  025A  0800               	movf	0,w
  3066  025B  0099               	movwf	25	;volatile
  3067  025C  3001               	movlw	1
  3068  025D  07F4               	addwf	UART_vidSend@UART_u16Index,f
  3069  025E  1803               	skipnc
  3070  025F  0AF5               	incf	UART_vidSend@UART_u16Index+1,f
  3071  0260  3000               	movlw	0
  3072  0261  07F5               	addwf	UART_vidSend@UART_u16Index+1,f
  3073  0262  0871               	movf	UART_vidSend@Len+1,w
  3074  0263  0275               	subwf	UART_vidSend@UART_u16Index+1,w
  3075  0264  1D03               	skipz
  3076  0265  2A68               	goto	u44_25
  3077  0266  0870               	movf	UART_vidSend@Len,w
  3078  0267  0274               	subwf	UART_vidSend@UART_u16Index,w
  3079  0268                     u44_25:	
  3080  0268  1C03               	skipc
  3081  0269  2A50               	goto	i1l123
  3082  026A                     i1l122:	
  3083                           
  3084                           ;UART_m.c: 68: }
  3085                           ;UART_m.c: 69: PIR1bits.TXIF = 0;
  3086  026A  1283               	bcf	3,5	;RP0=0, select bank0
  3087  026B  1303               	bcf	3,6	;RP1=0, select bank0
  3088  026C  120C               	bcf	12,4	;volatile
  3089  026D  0008               	return
  3090  026E                     __end_of_UART_vidSend:	
  3091  007E                     btemp	set	126	;btemp
  3092  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         17
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      12
    BANK0            80     47      63
    BANK1            32      0       0

Pointer List with Targets:

    UART_vidSend@data	const PTR unsigned char  size(1) Largest target is 10
		 -> Data_Buffer(BANK0[10]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _UART_vidNewDataReceived in COMMON

    _RS845_ManageState->_UART_vidSend

Critical Paths under _main in BANK0

    _main->_get_averageX
    _main->_get_averageY
    _main->_get_averageZ
    _ini_adxl345->_E_Write
    _E_Write->_I2CSend
    _get_averageZ->___awdiv
    _get_averageY->___awdiv
    _get_averageX->___awdiv
    ___awdiv->___wmul
    _E_Read->_I2CRead

Critical Paths under _UART_vidNewDataReceived in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART_vidNewDataReceived in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                30    30      0    5079
                                             19 BANK0     28    28      0
                             _E_Read
                             _I2CAck
                            _I2CInit
                             _I2CNak
                            _I2CRead
                         _I2CRestart
                            _I2CSend
                           _I2CStart
                            _I2CStop
                         _UART_Write
                       _UART_vidInit
                       _get_averageX
                       _get_averageY
                       _get_averageZ
                        _ini_adxl345
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ini_adxl345                                          2     2      0     578
                                              4 BANK0      2     2      0
                            _E_Write
 ---------------------------------------------------------------------------------
 (2) _E_Write                                              3     0      3     578
                                              1 BANK0      3     0      3
                            _I2CSend
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (1) _get_averageZ                                         4     2      2    1246
                                             15 BANK0      4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_averageY                                         4     2      2    1246
                                             15 BANK0      4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _get_averageX                                         4     2      2    1246
                                             15 BANK0      4     2      2
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     476
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     684
                                              6 BANK0      9     5      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _UART_vidInit                                         1     1      0       0
                                              0 BANK0      1     1      0
                   _UART_u8GetNodeID
 ---------------------------------------------------------------------------------
 (2) _UART_u8GetNodeID                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _UART_Write                                           1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CAck                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _E_Read                                               4     2      2     282
                                              2 BANK0      4     2      2
                             _I2CNak
                            _I2CRead
                         _I2CRestart
                            _I2CSend
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (3) _I2CStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2CSend                                              1     1      0      22
                                              0 BANK0      1     1      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (1) _I2CRestart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CRead                                              2     2      0      23
                                              0 BANK0      2     2      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (4) _I2CWait                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CNak                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _UART_vidNewDataReceived                              4     4      0     229
                                              6 COMMON     4     4      0
                  _RS845_ManageState
 ---------------------------------------------------------------------------------
 (6) _RS845_ManageState                                    0     0      0     229
                       _UART_vidSend
 ---------------------------------------------------------------------------------
 (7) _UART_vidSend                                         6     4      2     229
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _E_Read
     _I2CNak
     _I2CRead
       _I2CWait
     _I2CRestart
     _I2CSend
       _I2CWait
     _I2CStart
     _I2CStop
   _I2CAck
   _I2CInit
   _I2CNak
   _I2CRead
     _I2CWait
   _I2CRestart
   _I2CSend
     _I2CWait
   _I2CStart
   _I2CStop
   _UART_Write
   _UART_vidInit
     _UART_u8GetNodeID
   _get_averageX
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _get_averageY
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _get_averageZ
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _ini_adxl345
     _E_Write
       _I2CSend
         _I2CWait
       _I2CStart
       _I2CStop
   _system_init

 _UART_vidNewDataReceived (ROOT)
   _RS845_ManageState
     _UART_vidSend

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       C       1       85.7%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     2F      3F       4       78.8%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            20      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               20      0       0       6        0.0%
ABS                  0      0      4B       7        0.0%
DATA                 0      0      4B       8        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Jan 30 12:23:20 2021

       ??_UART_vidNewDataReceived 0076                       __CFG_CP$OFF 0000                                _BF 04A0  
                              l49 0323                      ___awdiv@sign 002C                                fsr 0004  
             ___wmul@multiplicand 0022               __size_of_I2CRestart 0006               __end_of_system_init 0320  
                             l200 0353                               l212 0331                               l218 02ED  
                             l182 0359                               l176 035F                               l336 027A  
                             l194 034C                               l188 0365                               _GIE 005F  
                             _RC0 0038                               _PEN 048A                      __CFG_CPD$OFF 0000  
                             u525 0129                               u545 0135                               u465 027B  
                             u555 0141                               u475 0282                               _SEN 0488  
                             u565 014B                               u637 0033                               u647 004E  
                             u657 0173                               u667 0188                               u677 019D  
                 __end_of_I2CInit 02EA                   __end_of_I2CRead 02FA                   __end_of_I2CSend 0337  
                             fsr0 0004                   __end_of_I2CWait 0340                               indf 0000  
                 __end_of_I2CStop 035C                      __CFG_FOSC$HS 0000                      __CFG_LVP$OFF 0000  
                     main@bw_rate 003B                              l1110 0113                              l1034 0337  
                            l1116 011E                              l1142 015D                              l1134 014A  
                            l1126 0126                              l1128 0134                              l1138 0155  
                            l1090 0272                              l1252 0063                              _BRGH 04C2  
                            _CREN 00C4                      ?_ini_adxl345 0070                              _PEIE 005E  
                            _RCIE 0465                              _RCEN 048B                              _RCIF 0065  
                            _SPEN 00C7                              _RSEN 0489                              _TRMT 04C1  
                            _TXEN 04C5                    ??_get_averageX 0031                              _SYNC 04C4  
                  ??_get_averageY 0031                    ??_get_averageZ 0031                      __CFG_WRT$OFF 0000  
                            _main 0019                              btemp 007E                  __end_of_I2CStart 0362  
                 __end_of_E_Write 0307                              start 0010                     __CFG_IESO$OFF 0000  
                     _Data_Buffer 0055                             ?_main 0070                             _ACKEN 048C  
                           _ACKDT 048D                   __end_of___awdiv 0162                     __CFG_WDTE$OFF 0000  
                           _ANSEL 0188                   ___awdiv@divisor 0026                             i1l113 02CC  
                           i1l122 026A                             i1l123 0250                   ___awdiv@counter 002B  
                           _RCREG 001A                             _SPBRG 0099                             u42_25 024E  
                           u44_25 0268                             _TRISA 0085                             _TXREG 0019  
                  __CFG_FCMEN$OFF 0000                       ?_UART_Write 0070                             main@X 003D  
                           main@Y 003F                             main@Z 0041                    __CFG_BOREN$OFF 0000  
                           pclath 000A                             status 0003                             wtemp0 007E  
                  __CFG_MCLRE$OFF 0000                   __initialization 0011                       _system_init 0314  
                    __end_of_main 0107                         ??_I2CInit 0020                         ??_I2CRead 0020  
                       ??_I2CSend 0020                         ??_I2CWait 0020                         ??_I2CStop 0020  
                          ??_main 0033                            _ADCON0 001F                            _I2CAck 0348  
                          _I2CNak 034F                  ___awdiv@dividend 0028                         ??_E_Write 0024  
                          _ECU_ID 007A                      ??_I2CRestart 0020                            _E_Read 02AC  
                          _SSPADD 0093                            _TRISC0 0438                            _TRISC6 043E  
                          _TRISC7 043F                            _SSPCON 0014                            _SSPBUF 0013  
                  __CFG_PWRTE$OFF 0000               __size_of_UART_Write 000C                            ___wmul 026E  
                       ??___awdiv 002A                  ___awdiv@quotient 002D              __end_of_get_averageX 0243  
            __end_of_get_averageY 0211              __end_of_get_averageZ 01DF                            main@XH 0044  
                          main@YH 0045                            main@ZH 0047                            main@XL 0043  
                          main@YL 0046                            main@ZL 0048                            main@id 0037  
              __end_of_I2CRestart 0368                         ?_I2CStart 0070                            saved_w 007E  
         __end_of__initialization 0017              __size_of_ini_adxl345 004B                 ?_UART_u8GetNodeID 0070  
                  __pcstackCOMMON 0070                ??_UART_u8GetNodeID 0020                        ??_I2CStart 0020  
                         ?_I2CAck 0070                           ?_I2CNak 0070                        __pbssBANK0 004F  
                         ?_E_Read 0022                        __pnvCOMMON 007A                        I2CSend@dat 0020  
                      __pmaintext 0019                           ?___wmul 0020                        __pintentry 0004  
                         _I2CInit 02D7                           _I2CRead 02EA                           _I2CSend 032C  
                         _I2CWait 0337                           _I2CStop 0356                   UART_vidSend@Len 0070  
                    ??_UART_Write 0020                           _SSPCON2 0091                   __size_of_I2CAck 0007  
                 __size_of_I2CNak 0007                           _SSPSTAT 0094                           _E_Write 02FA  
                 __size_of_E_Read 0016          ?_UART_vidNewDataReceived 0070                         E_Write@ch 0023  
                    ?_system_init 0070             __size_of_get_averageX 0032             __size_of_get_averageY 0032  
           __size_of_get_averageZ 0032                           ___awdiv 0107                   __size_of___wmul 0023  
              __end_of_UART_Write 032C                           __ptext1 0314                           __ptext2 0162  
                         __ptext3 02FA                           __ptext4 01AD                           __ptext5 01DF  
                         __ptext6 0211                           __ptext7 026E                           __ptext8 0107  
                         __ptext9 0291                     ?_UART_vidInit 0070                     ?_UART_vidSend 0070  
                         clrloop0 0341                           main@pow 0039              end_of_initialization 0017  
                    _get_averageX 0211                      _get_averageY 01DF                      _get_averageZ 01AD  
                 _RECEIVED_ECU_ID 007B                    ??_UART_vidInit 0020                    ??_UART_vidSend 0072  
                  UART_Write@data 0020                         _TRISCbits 0087                 __size_of_I2CStart 0006  
 __end_of_UART_vidNewDataReceived 02D7                    __end_of_I2CAck 034F                    __end_of_I2CNak 0356  
                  __end_of_E_Read 02C2                    __end_of___wmul 0291                get_averageX@OutPut 0053  
             start_initialization 0011         __size_of_UART_u8GetNodeID 0002                get_averageY@OutPut 0051  
              get_averageZ@OutPut 004F                          ??_I2CAck 0020                          ??_I2CNak 0020  
                   ??_ini_adxl345 0024                          ??_E_Read 0024                       E_Write@addr 0021  
                        ??___wmul 0024              __size_of_system_init 000C                          ?_I2CInit 0070  
                        ?_I2CRead 0070                          ?_I2CSend 0070                          ?_I2CWait 0070  
                        ?_I2CStop 0070         UART_vidSend@UART_u16Index 0074                       __pbssCOMMON 007B  
                       ___latbits 0000                     __pcstackBANK0 0020                  get_averageX@Data 002F  
                get_averageY@Data 002F                  get_averageZ@Data 002F                          ?_E_Write 0021  
                     I2CRead@temp 0021              __end_of_UART_vidInit 02AC              __end_of_UART_vidSend 026E  
               _RS845_ManageState 0307               __end_of_ini_adxl345 01AD                ?_RS845_ManageState 0070  
                        ?___awdiv 0026               ??_RS845_ManageState 0076                          E_Read@ch 0025  
__size_of_UART_vidNewDataReceived 0015                          _I2CStart 035C                  UART_vidSend@data 0073  
       __end_of_RS845_ManageState 0314                 interrupt_function 0004                    ___wmul@product 0024  
                       clear_ram0 0340                        E_Read@addr 0022                          _PIR1bits 000C  
                        _PIR2bits 000D                  __size_of_I2CInit 0013                  __size_of_I2CRead 0010  
                __size_of_I2CSend 000B                  __size_of_I2CWait 0009                  __size_of_I2CStop 0006  
               ___wmul@multiplier 0020                  _UART_u8GetNodeID 0368                        _I2CRestart 0362  
                     _ini_adxl345 0162                  __size_of_E_Write 000D                  __size_of___awdiv 005B  
                        __ptext10 0368                          __ptext11 0320                          __ptext20 0337  
                        __ptext12 02D7                          __ptext21 034F                          __ptext13 0348  
                        __ptext22 02C2                          __ptext14 02AC                          __ptext23 0307  
                        __ptext15 0356                          __ptext24 0243                          __ptext16 035C  
                        __ptext17 032C                          __ptext18 0362                          __ptext19 02EA  
               __CFG_BOR4V$BOR40V 0000             __size_of_UART_vidInit 001B             __size_of_UART_vidSend 002B  
      __size_of_RS845_ManageState 000D                     __size_of_main 00EE                          main@XAVG 0049  
                        main@YAVG 004B                          main@ZAVG 004D           _UART_vidNewDataReceived 02C2  
                    _UART_vidInit 0291                      _UART_vidSend 0243                       ?_I2CRestart 0070  
                        intlevel1 0000                     ??_system_init 0020                        _UART_Write 0320  
                   ?_get_averageX 002F                     ?_get_averageY 002F                     ?_get_averageZ 002F  
        __end_of_UART_u8GetNodeID 036A  
