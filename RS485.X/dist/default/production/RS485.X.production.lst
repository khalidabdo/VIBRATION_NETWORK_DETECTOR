

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Fri Feb 12 07:21:20 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F882
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text9,local,class=CODE,merge=1,delta=2
    24                           	psect	text10,local,class=CODE,merge=1,delta=2
    25                           	psect	text11,local,class=CODE,merge=1,delta=2
    26                           	psect	text12,local,class=CODE,merge=1,delta=2
    27                           	psect	text13,local,class=CODE,merge=1,delta=2
    28                           	psect	text14,local,class=CODE,merge=1,delta=2
    29                           	psect	text15,local,class=CODE,merge=1,delta=2
    30                           	psect	text16,local,class=CODE,merge=1,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	intentry,global,class=CODE,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	text24,local,class=CODE,merge=1,delta=2
    40                           	psect	text25,local,class=CODE,merge=1,delta=2
    41                           	psect	text26,local,class=CODE,merge=1,delta=2
    42                           	psect	functab,global,reloc=256,class=CODE,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 1.41
    46                           ; Generated 25/01/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F882 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  001D                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  0087                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  0105                     	;# 
   141  0107                     	;# 
   142  0108                     	;# 
   143  0109                     	;# 
   144  010C                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  0185                     	;# 
   150  0187                     	;# 
   151  0188                     	;# 
   152  0189                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  000E                     	;# 
   170  000F                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0013                     	;# 
   175  0014                     	;# 
   176  0015                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  001D                     	;# 
   187  001E                     	;# 
   188  001F                     	;# 
   189  0081                     	;# 
   190  0085                     	;# 
   191  0086                     	;# 
   192  0087                     	;# 
   193  0089                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  008F                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0093                     	;# 
   203  0093                     	;# 
   204  0094                     	;# 
   205  0095                     	;# 
   206  0096                     	;# 
   207  0097                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  0105                     	;# 
   217  0107                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010E                     	;# 
   224  010F                     	;# 
   225  0185                     	;# 
   226  0187                     	;# 
   227  0188                     	;# 
   228  0189                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231  0000                     	;# 
   232  0001                     	;# 
   233  0002                     	;# 
   234  0003                     	;# 
   235  0004                     	;# 
   236  0005                     	;# 
   237  0006                     	;# 
   238  0007                     	;# 
   239  0009                     	;# 
   240  000A                     	;# 
   241  000B                     	;# 
   242  000C                     	;# 
   243  000D                     	;# 
   244  000E                     	;# 
   245  000E                     	;# 
   246  000F                     	;# 
   247  0010                     	;# 
   248  0011                     	;# 
   249  0012                     	;# 
   250  0013                     	;# 
   251  0014                     	;# 
   252  0015                     	;# 
   253  0015                     	;# 
   254  0016                     	;# 
   255  0017                     	;# 
   256  0018                     	;# 
   257  0019                     	;# 
   258  001A                     	;# 
   259  001B                     	;# 
   260  001B                     	;# 
   261  001C                     	;# 
   262  001D                     	;# 
   263  001E                     	;# 
   264  001F                     	;# 
   265  0081                     	;# 
   266  0085                     	;# 
   267  0086                     	;# 
   268  0087                     	;# 
   269  0089                     	;# 
   270  008C                     	;# 
   271  008D                     	;# 
   272  008E                     	;# 
   273  008F                     	;# 
   274  0090                     	;# 
   275  0091                     	;# 
   276  0092                     	;# 
   277  0093                     	;# 
   278  0093                     	;# 
   279  0093                     	;# 
   280  0094                     	;# 
   281  0095                     	;# 
   282  0096                     	;# 
   283  0097                     	;# 
   284  0098                     	;# 
   285  0099                     	;# 
   286  009A                     	;# 
   287  009B                     	;# 
   288  009C                     	;# 
   289  009D                     	;# 
   290  009E                     	;# 
   291  009F                     	;# 
   292  0105                     	;# 
   293  0107                     	;# 
   294  0108                     	;# 
   295  0109                     	;# 
   296  010C                     	;# 
   297  010C                     	;# 
   298  010D                     	;# 
   299  010E                     	;# 
   300  010F                     	;# 
   301  0185                     	;# 
   302  0187                     	;# 
   303  0188                     	;# 
   304  0189                     	;# 
   305  018C                     	;# 
   306  018D                     	;# 
   307  0000                     	;# 
   308  0001                     	;# 
   309  0002                     	;# 
   310  0003                     	;# 
   311  0004                     	;# 
   312  0005                     	;# 
   313  0006                     	;# 
   314  0007                     	;# 
   315  0009                     	;# 
   316  000A                     	;# 
   317  000B                     	;# 
   318  000C                     	;# 
   319  000D                     	;# 
   320  000E                     	;# 
   321  000E                     	;# 
   322  000F                     	;# 
   323  0010                     	;# 
   324  0011                     	;# 
   325  0012                     	;# 
   326  0013                     	;# 
   327  0014                     	;# 
   328  0015                     	;# 
   329  0015                     	;# 
   330  0016                     	;# 
   331  0017                     	;# 
   332  0018                     	;# 
   333  0019                     	;# 
   334  001A                     	;# 
   335  001B                     	;# 
   336  001B                     	;# 
   337  001C                     	;# 
   338  001D                     	;# 
   339  001E                     	;# 
   340  001F                     	;# 
   341  0081                     	;# 
   342  0085                     	;# 
   343  0086                     	;# 
   344  0087                     	;# 
   345  0089                     	;# 
   346  008C                     	;# 
   347  008D                     	;# 
   348  008E                     	;# 
   349  008F                     	;# 
   350  0090                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0093                     	;# 
   356  0094                     	;# 
   357  0095                     	;# 
   358  0096                     	;# 
   359  0097                     	;# 
   360  0098                     	;# 
   361  0099                     	;# 
   362  009A                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  009F                     	;# 
   368  0105                     	;# 
   369  0107                     	;# 
   370  0108                     	;# 
   371  0109                     	;# 
   372  010C                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  010F                     	;# 
   377  0185                     	;# 
   378  0187                     	;# 
   379  0188                     	;# 
   380  0189                     	;# 
   381  018C                     	;# 
   382  018D                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  000E                     	;# 
   398  000F                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  001D                     	;# 
   415  001E                     	;# 
   416  001F                     	;# 
   417  0081                     	;# 
   418  0085                     	;# 
   419  0086                     	;# 
   420  0087                     	;# 
   421  0089                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  008F                     	;# 
   426  0090                     	;# 
   427  0091                     	;# 
   428  0092                     	;# 
   429  0093                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0094                     	;# 
   433  0095                     	;# 
   434  0096                     	;# 
   435  0097                     	;# 
   436  0098                     	;# 
   437  0099                     	;# 
   438  009A                     	;# 
   439  009B                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  0105                     	;# 
   445  0107                     	;# 
   446  0108                     	;# 
   447  0109                     	;# 
   448  010C                     	;# 
   449  010C                     	;# 
   450  010D                     	;# 
   451  010E                     	;# 
   452  010F                     	;# 
   453  0185                     	;# 
   454  0187                     	;# 
   455  0188                     	;# 
   456  0189                     	;# 
   457  018C                     	;# 
   458  018D                     	;# 
   459                           
   460                           	psect	idataCOMMON
   461  0667                     __pidataCOMMON:	
   462                           
   463                           ;initializer for _ptrFinishBuffer
   464  0667  3401               	retlw	low (fp__FinishBuffer-i1fpbase)
   465                           
   466                           	psect	nvBANK0
   467  0068                     __pnvBANK0:	
   468  0068                     _ECU_ID:	
   469  0068                     	ds	1
   470  0013                     _SSPBUF	set	19
   471  000D                     _PIR2bits	set	13
   472  0014                     _SSPCON	set	20
   473  0006                     _PORTB	set	6
   474  0019                     _TXREG	set	25
   475  000C                     _PIR1bits	set	12
   476  001A                     _RCREG	set	26
   477  001E                     _ADRESH	set	30
   478  001F                     _ADCON0	set	31
   479  0065                     _RCIF	set	101
   480  00C4                     _CREN	set	196
   481  005F                     _GIE	set	95
   482  005E                     _PEIE	set	94
   483  00C7                     _SPEN	set	199
   484  0093                     _SSPADD	set	147
   485  0091                     _SSPCON2	set	145
   486  0094                     _SSPSTAT	set	148
   487  0087                     _TRISCbits	set	135
   488  0099                     _SPBRG	set	153
   489  009E                     _ADRESL	set	158
   490  0095                     _WPUB	set	149
   491  0086                     _TRISB	set	134
   492  0081                     _OPTION_REGbits	set	129
   493  048B                     _RCEN	set	1163
   494  04A0                     _BF	set	1184
   495  048C                     _ACKEN	set	1164
   496  048D                     _ACKDT	set	1165
   497  0489                     _RSEN	set	1161
   498  048A                     _PEN	set	1162
   499  0488                     _SEN	set	1160
   500  0465                     _RCIE	set	1125
   501  04C5                     _TXEN	set	1221
   502  043F                     _TRISC7	set	1087
   503  043E                     _TRISC6	set	1086
   504  04C4                     _SYNC	set	1220
   505  04C2                     _BRGH	set	1218
   506  0438                     _TRISC0	set	1080
   507  0189                     _ANSELH	set	393
   508  0C43                     _ANS3	set	3139
   509                           
   510                           ; #config settings
   511  0000                     
   512                           	psect	cinit
   513  0011                     start_initialization:	
   514  0011                     __initialization:	
   515                           
   516                           ; Initialize objects allocated to COMMON
   517  0011  2667               	fcall	__pidataCOMMON	;fetch initializer
   518  0012  00FD               	movwf	__pdataCOMMON& (0+127)
   519                           
   520                           ; Clear objects allocated to BANK1
   521  0013  1383               	bcf	3,7	;select IRP bank0
   522  0014  30A0               	movlw	low __pbssBANK1
   523  0015  0084               	movwf	4
   524  0016  30AC               	movlw	low (__pbssBANK1+12)
   525  0017  263F               	fcall	clear_ram0
   526                           
   527                           ; Clear objects allocated to BANK0
   528  0018  3058               	movlw	low __pbssBANK0
   529  0019  0084               	movwf	4
   530  001A  3068               	movlw	low (__pbssBANK0+16)
   531  001B  263F               	fcall	clear_ram0
   532                           
   533                           ; Clear objects allocated to COMMON
   534  001C  01FC               	clrf	__pbssCOMMON& (0+127)
   535  001D                     end_of_initialization:	
   536                           ;End of C runtime variable initialization code
   537                           
   538  001D                     __end_of__initialization:	
   539  001D  0183               	clrf	3
   540  001E  2908               	ljmp	_main	;jump to C main() function
   541                           
   542                           	psect	bssCOMMON
   543  007C                     __pbssCOMMON:	
   544  007C                     _RECEIVED_ECU_ID:	
   545  007C                     	ds	1
   546                           
   547                           	psect	dataCOMMON
   548  007D                     __pdataCOMMON:	
   549  007D                     _ptrFinishBuffer:	
   550  007D                     	ds	1
   551                           
   552                           	psect	bssBANK0
   553  0058                     __pbssBANK0:	
   554  0058                     get_average@OutPut:	
   555  0058                     	ds	2
   556  005A                     get_averageZ@OutPut:	
   557  005A                     	ds	2
   558  005C                     get_averageY@OutPut:	
   559  005C                     	ds	2
   560  005E                     get_averageX@OutPut:	
   561  005E                     	ds	2
   562  0060                     _AVG:	
   563  0060                     	ds	2
   564  0062                     _ZAVG:	
   565  0062                     	ds	2
   566  0064                     _YAVG:	
   567  0064                     	ds	2
   568  0066                     _XAVG:	
   569  0066                     	ds	2
   570                           
   571                           	psect	bssBANK1
   572  00A0                     __pbssBANK1:	
   573  00A0                     _Data_Buffer:	
   574  00A0                     	ds	12
   575                           
   576                           	psect	clrtext
   577  063F                     clear_ram0:	
   578                           ;	Called with FSR containing the base address, and
   579                           ;	W with the last address+1
   580                           
   581  063F  0064               	clrwdt	;clear the watchdog before getting into this loop
   582  0640                     clrloop0:	
   583  0640  0180               	clrf	0	;clear RAM location pointed to by FSR
   584  0641  0A84               	incf	4,f	;increment pointer
   585  0642  0604               	xorwf	4,w	;XOR with final address
   586  0643  1903               	btfsc	3,2	;have we reached the end yet?
   587  0644  3400               	retlw	0	;all done for this memory range, return
   588  0645  0604               	xorwf	4,w	;XOR again to restore value
   589  0646  2E40               	goto	clrloop0	;do the next byte
   590                           
   591                           	psect	cstackCOMMON
   592  0070                     __pcstackCOMMON:	
   593  0070                     ?_FinishBuffer:	
   594  0070                     ?_UART_vidInit:	
   595                           ; 1 bytes @ 0x0
   596                           
   597  0070                     ?_I2CInit:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ?_I2CStart:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ?_I2CSend:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ?_I2CStop:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?_I2CRestart:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ?_I2CRead:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_I2CAck:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ?_I2CNak:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ?_UART_u8GetNodeID:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ?_Get_CRC8:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ?_RS845_ManageState:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0070                     ?_system_init:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ?_main:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ?_UART_vidNewDataReceived:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     ?_I2CWait:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0070                     ?i1_UART_vidSend:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0070                     ?_Get_Tempreture:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0070                     Get_CRC8@DataSize:	
   649                           ; 2 bytes @ 0x0
   650                           
   651  0070                     i1UART_vidSend@Len:	
   652                           ; 1 bytes @ 0x0
   653                           
   654                           
   655                           ; 1 bytes @ 0x0
   656  0070                     	ds	1
   657  0071                     ??_Get_CRC8:	
   658  0071                     ??i1_UART_vidSend:	
   659                           ; 1 bytes @ 0x1
   660                           
   661                           
   662                           ; 1 bytes @ 0x1
   663  0071                     	ds	1
   664  0072                     ??_Get_Tempreture:	
   665                           
   666                           ; 1 bytes @ 0x2
   667  0072                     	ds	1
   668  0073                     Get_CRC8@Data:	
   669  0073                     i1UART_vidSend@data:	
   670                           ; 1 bytes @ 0x3
   671                           
   672                           
   673                           ; 1 bytes @ 0x3
   674  0073                     	ds	1
   675  0074                     Get_CRC8@DataIndex:	
   676  0074                     i1UART_vidSend@UART_u16Index:	
   677                           ; 1 bytes @ 0x4
   678                           
   679                           
   680                           ; 2 bytes @ 0x4
   681  0074                     	ds	1
   682  0075                     Get_CRC8@bitIndex:	
   683                           
   684                           ; 1 bytes @ 0x5
   685  0075                     	ds	1
   686  0076                     ??_RS845_ManageState:	
   687  0076                     Get_CRC8@CRC:	
   688                           ; 1 bytes @ 0x6
   689                           
   690                           
   691                           ; 1 bytes @ 0x6
   692  0076                     	ds	3
   693  0079                     Get_Tempreture@Result:	
   694                           
   695                           ; 2 bytes @ 0x9
   696  0079                     	ds	2
   697  007B                     ??_FinishBuffer:	
   698                           
   699                           ; 1 bytes @ 0xB
   700  007B                     	ds	1
   701                           
   702                           	psect	cstackBANK0
   703  0020                     __pcstackBANK0:	
   704  0020                     ??_UART_vidNewDataReceived:	
   705                           
   706                           ; 1 bytes @ 0x0
   707  0020                     	ds	6
   708  0026                     ??_I2CInit:	
   709  0026                     ??_I2CStart:	
   710                           ; 1 bytes @ 0x6
   711                           
   712  0026                     ??_I2CSend:	
   713                           ; 1 bytes @ 0x6
   714                           
   715  0026                     ??_I2CStop:	
   716                           ; 1 bytes @ 0x6
   717                           
   718  0026                     ??_I2CRestart:	
   719                           ; 1 bytes @ 0x6
   720                           
   721  0026                     ??_I2CRead:	
   722                           ; 1 bytes @ 0x6
   723                           
   724  0026                     ??_I2CAck:	
   725                           ; 1 bytes @ 0x6
   726                           
   727  0026                     ??_I2CNak:	
   728                           ; 1 bytes @ 0x6
   729                           
   730  0026                     ??_UART_u8GetNodeID:	
   731                           ; 1 bytes @ 0x6
   732                           
   733  0026                     ?_UART_vidSend:	
   734                           ; 1 bytes @ 0x6
   735                           
   736  0026                     ??_system_init:	
   737                           ; 1 bytes @ 0x6
   738                           
   739  0026                     ??_I2CWait:	
   740                           ; 1 bytes @ 0x6
   741                           
   742  0026                     ?___lwdiv:	
   743                           ; 1 bytes @ 0x6
   744                           
   745  0026                     ?___lmul:	
   746                           ; 2 bytes @ 0x6
   747                           
   748  0026                     UART_vidSend@Len:	
   749                           ; 4 bytes @ 0x6
   750                           
   751  0026                     I2CSend@dat:	
   752                           ; 1 bytes @ 0x6
   753                           
   754  0026                     ___lwdiv@divisor:	
   755                           ; 1 bytes @ 0x6
   756                           
   757  0026                     ___lmul@multiplier:	
   758                           ; 2 bytes @ 0x6
   759                           
   760                           
   761                           ; 4 bytes @ 0x6
   762  0026                     	ds	1
   763  0027                     ??_UART_vidSend:	
   764  0027                     I2CRead@temp:	
   765                           ; 1 bytes @ 0x7
   766                           
   767                           
   768                           ; 1 bytes @ 0x7
   769  0027                     	ds	1
   770  0028                     ___lwdiv@dividend:	
   771                           
   772                           ; 2 bytes @ 0x8
   773  0028                     	ds	1
   774  0029                     UART_vidSend@data:	
   775                           
   776                           ; 1 bytes @ 0x9
   777  0029                     	ds	1
   778  002A                     ??___lwdiv:	
   779  002A                     UART_vidSend@UART_u16Index:	
   780                           ; 1 bytes @ 0xA
   781                           
   782  002A                     ___lmul@multiplicand:	
   783                           ; 2 bytes @ 0xA
   784                           
   785                           
   786                           ; 4 bytes @ 0xA
   787  002A                     	ds	1
   788  002B                     ___lwdiv@quotient:	
   789                           
   790                           ; 2 bytes @ 0xB
   791  002B                     	ds	1
   792  002C                     ??_UART_vidInit:	
   793                           
   794                           ; 1 bytes @ 0xC
   795  002C                     	ds	1
   796  002D                     ___lwdiv@counter:	
   797                           
   798                           ; 1 bytes @ 0xD
   799  002D                     	ds	1
   800  002E                     ??___lmul:	
   801                           
   802                           ; 1 bytes @ 0xE
   803  002E                     	ds	1
   804  002F                     ___lmul@product:	
   805                           
   806                           ; 4 bytes @ 0xF
   807  002F                     	ds	4
   808  0033                     ?___aldiv:	
   809  0033                     ___aldiv@divisor:	
   810                           ; 4 bytes @ 0x13
   811                           
   812                           
   813                           ; 4 bytes @ 0x13
   814  0033                     	ds	4
   815  0037                     ___aldiv@dividend:	
   816                           
   817                           ; 4 bytes @ 0x17
   818  0037                     	ds	4
   819  003B                     ??___aldiv:	
   820                           
   821                           ; 1 bytes @ 0x1B
   822  003B                     	ds	1
   823  003C                     ___aldiv@counter:	
   824                           
   825                           ; 1 bytes @ 0x1C
   826  003C                     	ds	1
   827  003D                     ___aldiv@sign:	
   828                           
   829                           ; 1 bytes @ 0x1D
   830  003D                     	ds	1
   831  003E                     ___aldiv@quotient:	
   832                           
   833                           ; 4 bytes @ 0x1E
   834  003E                     	ds	4
   835  0042                     ?_get_averageX:	
   836  0042                     ?_get_averageY:	
   837                           ; 2 bytes @ 0x22
   838                           
   839  0042                     ?_get_averageZ:	
   840                           ; 2 bytes @ 0x22
   841                           
   842  0042                     ?_get_average:	
   843                           ; 2 bytes @ 0x22
   844                           
   845  0042                     get_averageX@Data:	
   846                           ; 2 bytes @ 0x22
   847                           
   848  0042                     get_averageY@Data:	
   849                           ; 2 bytes @ 0x22
   850                           
   851  0042                     get_averageZ@Data:	
   852                           ; 2 bytes @ 0x22
   853                           
   854  0042                     get_average@Data:	
   855                           ; 2 bytes @ 0x22
   856                           
   857                           
   858                           ; 2 bytes @ 0x22
   859  0042                     	ds	2
   860  0044                     ??_get_averageX:	
   861  0044                     ??_get_averageY:	
   862                           ; 1 bytes @ 0x24
   863                           
   864  0044                     ??_get_averageZ:	
   865                           ; 1 bytes @ 0x24
   866                           
   867  0044                     ??_get_average:	
   868                           ; 1 bytes @ 0x24
   869                           
   870                           
   871                           ; 1 bytes @ 0x24
   872  0044                     	ds	4
   873  0048                     ??_main:	
   874                           
   875                           ; 1 bytes @ 0x28
   876  0048                     	ds	4
   877  004C                     main@X:	
   878                           
   879                           ; 2 bytes @ 0x2C
   880  004C                     	ds	2
   881  004E                     main@Y:	
   882                           
   883                           ; 2 bytes @ 0x2E
   884  004E                     	ds	2
   885  0050                     main@Z:	
   886                           
   887                           ; 2 bytes @ 0x30
   888  0050                     	ds	2
   889  0052                     main@XL:	
   890                           
   891                           ; 1 bytes @ 0x32
   892  0052                     	ds	1
   893  0053                     main@XH:	
   894                           
   895                           ; 1 bytes @ 0x33
   896  0053                     	ds	1
   897  0054                     main@YH:	
   898                           
   899                           ; 1 bytes @ 0x34
   900  0054                     	ds	1
   901  0055                     main@YL:	
   902                           
   903                           ; 1 bytes @ 0x35
   904  0055                     	ds	1
   905  0056                     main@ZH:	
   906                           
   907                           ; 1 bytes @ 0x36
   908  0056                     	ds	1
   909  0057                     main@ZL:	
   910                           
   911                           ; 1 bytes @ 0x37
   912  0057                     	ds	1
   913                           
   914                           	psect	maintext
   915  0108                     __pmaintext:	
   916 ;;
   917 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   918 ;;
   919 ;; *************** function _main *****************
   920 ;; Defined at:
   921 ;;		line 29 in file "main.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;  Z               2   48[BANK0 ] short 
   926 ;;  Y               2   46[BANK0 ] short 
   927 ;;  X               2   44[BANK0 ] short 
   928 ;;  bw_rate         2    0        int 
   929 ;;  pow             2    0        int 
   930 ;;  id              2    0        int 
   931 ;;  ZL              1   55[BANK0 ] unsigned char 
   932 ;;  ZH              1   54[BANK0 ] unsigned char 
   933 ;;  YL              1   53[BANK0 ] unsigned char 
   934 ;;  YH              1   52[BANK0 ] unsigned char 
   935 ;;  XH              1   51[BANK0 ] unsigned char 
   936 ;;  XL              1   50[BANK0 ] unsigned char 
   937 ;; Return value:  Size  Location     Type
   938 ;;                  1    wreg      void 
   939 ;; Registers used:
   940 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   941 ;; Tracked objects:
   942 ;;		On entry : B00/0
   943 ;;		On exit  : 0/0
   944 ;;		Unchanged: 0/0
   945 ;; Data sizes:     COMMON   BANK0   BANK1
   946 ;;      Params:         0       0       0
   947 ;;      Locals:         0      12       0
   948 ;;      Temps:          0       4       0
   949 ;;      Totals:         0      16       0
   950 ;;Total ram usage:       16 bytes
   951 ;; Hardware stack levels required when called:    5
   952 ;; This function calls:
   953 ;;		_I2CAck
   954 ;;		_I2CInit
   955 ;;		_I2CNak
   956 ;;		_I2CRead
   957 ;;		_I2CRestart
   958 ;;		_I2CSend
   959 ;;		_I2CStart
   960 ;;		_I2CStop
   961 ;;		_UART_vidInit
   962 ;;		___lwdiv
   963 ;;		_get_average
   964 ;;		_get_averageX
   965 ;;		_get_averageY
   966 ;;		_get_averageZ
   967 ;;		_system_init
   968 ;; This function is called by:
   969 ;;		Startup code after reset
   970 ;; This function uses a non-reentrant model
   971 ;;
   972                           
   973                           
   974                           ;psect for function _main
   975  0108                     _main:	
   976                           
   977                           ;main.c: 31: int id, pow, bw_rate;
   978                           ;main.c: 32: char XL,XH,YH,YL,ZH,ZL;
   979                           ;main.c: 33: short X, Y, Z;
   980                           ;main.c: 35: system_init();
   981                           
   982                           ;incstack = 0
   983                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   984  0108  25DD               	fcall	_system_init
   985                           
   986                           ;main.c: 36: UART_vidInit();
   987  0109  25BE               	fcall	_UART_vidInit
   988                           
   989                           ;main.c: 39: I2CInit();
   990  010A  25F0               	fcall	_I2CInit
   991                           
   992                           ;main.c: 49: I2CStart();
   993  010B  265B               	fcall	_I2CStart
   994                           
   995                           ;main.c: 50: I2CSend(0xA6);
   996  010C  30A6               	movlw	166
   997  010D  262B               	fcall	_I2CSend
   998                           
   999                           ;main.c: 51: I2CSend(0X2D);
  1000  010E  302D               	movlw	45
  1001  010F  262B               	fcall	_I2CSend
  1002                           
  1003                           ;main.c: 52: I2CSend(0X00);
  1004  0110  3000               	movlw	0
  1005  0111  262B               	fcall	_I2CSend
  1006                           
  1007                           ;main.c: 53: I2CStop();
  1008  0112  2655               	fcall	_I2CStop
  1009                           
  1010                           ;main.c: 55: _delay((unsigned long)((10)*(20000000/4000.0)));
  1011  0113  3041               	movlw	65
  1012  0114  1283               	bcf	3,5	;RP0=0, select bank0
  1013  0115  1303               	bcf	3,6	;RP1=0, select bank0
  1014  0116  00C9               	movwf	??_main+1
  1015  0117  30EE               	movlw	238
  1016  0118  00C8               	movwf	??_main
  1017  0119                     u1057:	
  1018  0119  0BC8               	decfsz	??_main,f
  1019  011A  2919               	goto	u1057
  1020  011B  0BC9               	decfsz	??_main+1,f
  1021  011C  2919               	goto	u1057
  1022                           
  1023                           ;main.c: 57: I2CStart();
  1024  011D  265B               	fcall	_I2CStart
  1025                           
  1026                           ;main.c: 58: I2CSend(0xA6);
  1027  011E  30A6               	movlw	166
  1028  011F  262B               	fcall	_I2CSend
  1029                           
  1030                           ;main.c: 59: I2CSend(0X31);
  1031  0120  3031               	movlw	49
  1032  0121  262B               	fcall	_I2CSend
  1033                           
  1034                           ;main.c: 60: I2CSend(0X08);
  1035  0122  3008               	movlw	8
  1036  0123  262B               	fcall	_I2CSend
  1037                           
  1038                           ;main.c: 61: I2CStop();
  1039  0124  2655               	fcall	_I2CStop
  1040                           
  1041                           ;main.c: 63: _delay((unsigned long)((10)*(20000000/4000.0)));
  1042  0125  3041               	movlw	65
  1043  0126  1283               	bcf	3,5	;RP0=0, select bank0
  1044  0127  1303               	bcf	3,6	;RP1=0, select bank0
  1045  0128  00C9               	movwf	??_main+1
  1046  0129  30EE               	movlw	238
  1047  012A  00C8               	movwf	??_main
  1048  012B                     u1067:	
  1049  012B  0BC8               	decfsz	??_main,f
  1050  012C  292B               	goto	u1067
  1051  012D  0BC9               	decfsz	??_main+1,f
  1052  012E  292B               	goto	u1067
  1053                           
  1054                           ;main.c: 65: I2CStart();
  1055  012F  265B               	fcall	_I2CStart
  1056                           
  1057                           ;main.c: 66: I2CSend(0xA6);
  1058  0130  30A6               	movlw	166
  1059  0131  262B               	fcall	_I2CSend
  1060                           
  1061                           ;main.c: 67: I2CSend(0X2C);
  1062  0132  302C               	movlw	44
  1063  0133  262B               	fcall	_I2CSend
  1064                           
  1065                           ;main.c: 68: I2CSend(0X09);
  1066  0134  3009               	movlw	9
  1067  0135  262B               	fcall	_I2CSend
  1068                           
  1069                           ;main.c: 69: I2CStop();
  1070  0136  2655               	fcall	_I2CStop
  1071                           
  1072                           ;main.c: 71: _delay((unsigned long)((10)*(20000000/4000.0)));
  1073  0137  3041               	movlw	65
  1074  0138  1283               	bcf	3,5	;RP0=0, select bank0
  1075  0139  1303               	bcf	3,6	;RP1=0, select bank0
  1076  013A  00C9               	movwf	??_main+1
  1077  013B  30EE               	movlw	238
  1078  013C  00C8               	movwf	??_main
  1079  013D                     u1077:	
  1080  013D  0BC8               	decfsz	??_main,f
  1081  013E  293D               	goto	u1077
  1082  013F  0BC9               	decfsz	??_main+1,f
  1083  0140  293D               	goto	u1077
  1084                           
  1085                           ;main.c: 72: I2CStart();
  1086  0141  265B               	fcall	_I2CStart
  1087                           
  1088                           ;main.c: 73: I2CSend(0xA6);
  1089  0142  30A6               	movlw	166
  1090  0143  262B               	fcall	_I2CSend
  1091                           
  1092                           ;main.c: 74: I2CSend(0X2D);
  1093  0144  302D               	movlw	45
  1094  0145  262B               	fcall	_I2CSend
  1095                           
  1096                           ;main.c: 75: I2CSend(0X08);
  1097  0146  3008               	movlw	8
  1098  0147  262B               	fcall	_I2CSend
  1099                           
  1100                           ;main.c: 76: I2CStop();
  1101  0148  2655               	fcall	_I2CStop
  1102                           
  1103                           ;main.c: 77: _delay((unsigned long)((10)*(20000000/4000.0)));
  1104  0149  3041               	movlw	65
  1105  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1106  014B  1303               	bcf	3,6	;RP1=0, select bank0
  1107  014C  00C9               	movwf	??_main+1
  1108  014D  30EE               	movlw	238
  1109  014E  00C8               	movwf	??_main
  1110  014F                     u1087:	
  1111  014F  0BC8               	decfsz	??_main,f
  1112  0150  294F               	goto	u1087
  1113  0151  0BC9               	decfsz	??_main+1,f
  1114  0152  294F               	goto	u1087
  1115  0153                     l1485:	
  1116                           ;main.c: 79: while(1)
  1117                           
  1118                           
  1119                           ;main.c: 80: {
  1120                           ;main.c: 81: X = Y = Z = 0;
  1121  0153  1283               	bcf	3,5	;RP0=0, select bank0
  1122  0154  1303               	bcf	3,6	;RP1=0, select bank0
  1123  0155  01D0               	clrf	main@Z
  1124  0156  01D1               	clrf	main@Z+1
  1125  0157  01CE               	clrf	main@Y
  1126  0158  01CF               	clrf	main@Y+1
  1127  0159  01CC               	clrf	main@X
  1128  015A  01CD               	clrf	main@X+1
  1129                           
  1130                           ;main.c: 83: I2CStart();
  1131  015B  265B               	fcall	_I2CStart
  1132                           
  1133                           ;main.c: 84: I2CSend(0xA6);
  1134  015C  30A6               	movlw	166
  1135  015D  262B               	fcall	_I2CSend
  1136                           
  1137                           ;main.c: 85: I2CSend(50);
  1138  015E  3032               	movlw	50
  1139  015F  262B               	fcall	_I2CSend
  1140                           
  1141                           ;main.c: 86: I2CRestart();
  1142  0160  2661               	fcall	_I2CRestart
  1143                           
  1144                           ;main.c: 87: I2CSend(0xA7);
  1145  0161  30A7               	movlw	167
  1146  0162  262B               	fcall	_I2CSend
  1147                           
  1148                           ;main.c: 88: XL = I2CRead();
  1149  0163  2603               	fcall	_I2CRead
  1150  0164  1283               	bcf	3,5	;RP0=0, select bank0
  1151  0165  1303               	bcf	3,6	;RP1=0, select bank0
  1152  0166  00C8               	movwf	??_main
  1153  0167  0848               	movf	??_main,w
  1154  0168  00D2               	movwf	main@XL
  1155                           
  1156                           ;main.c: 89: I2CAck();
  1157  0169  264E               	fcall	_I2CAck
  1158                           
  1159                           ;main.c: 90: XH = I2CRead();
  1160  016A  2603               	fcall	_I2CRead
  1161  016B  1283               	bcf	3,5	;RP0=0, select bank0
  1162  016C  1303               	bcf	3,6	;RP1=0, select bank0
  1163  016D  00C8               	movwf	??_main
  1164  016E  0848               	movf	??_main,w
  1165  016F  00D3               	movwf	main@XH
  1166                           
  1167                           ;main.c: 91: I2CAck();
  1168  0170  264E               	fcall	_I2CAck
  1169                           
  1170                           ;main.c: 92: YL = I2CRead();
  1171  0171  2603               	fcall	_I2CRead
  1172  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1173  0173  1303               	bcf	3,6	;RP1=0, select bank0
  1174  0174  00C8               	movwf	??_main
  1175  0175  0848               	movf	??_main,w
  1176  0176  00D5               	movwf	main@YL
  1177                           
  1178                           ;main.c: 93: I2CAck();
  1179  0177  264E               	fcall	_I2CAck
  1180                           
  1181                           ;main.c: 94: YH = I2CRead();
  1182  0178  2603               	fcall	_I2CRead
  1183  0179  1283               	bcf	3,5	;RP0=0, select bank0
  1184  017A  1303               	bcf	3,6	;RP1=0, select bank0
  1185  017B  00C8               	movwf	??_main
  1186  017C  0848               	movf	??_main,w
  1187  017D  00D4               	movwf	main@YH
  1188                           
  1189                           ;main.c: 95: I2CAck();
  1190  017E  264E               	fcall	_I2CAck
  1191                           
  1192                           ;main.c: 96: ZL = I2CRead();
  1193  017F  2603               	fcall	_I2CRead
  1194  0180  1283               	bcf	3,5	;RP0=0, select bank0
  1195  0181  1303               	bcf	3,6	;RP1=0, select bank0
  1196  0182  00C8               	movwf	??_main
  1197  0183  0848               	movf	??_main,w
  1198  0184  00D7               	movwf	main@ZL
  1199                           
  1200                           ;main.c: 97: I2CAck();
  1201  0185  264E               	fcall	_I2CAck
  1202                           
  1203                           ;main.c: 98: ZH = I2CRead();
  1204  0186  2603               	fcall	_I2CRead
  1205  0187  1283               	bcf	3,5	;RP0=0, select bank0
  1206  0188  1303               	bcf	3,6	;RP1=0, select bank0
  1207  0189  00C8               	movwf	??_main
  1208  018A  0848               	movf	??_main,w
  1209  018B  00D6               	movwf	main@ZH
  1210                           
  1211                           ;main.c: 99: I2CNak();
  1212  018C  2647               	fcall	_I2CNak
  1213                           
  1214                           ;main.c: 100: I2CStop();
  1215  018D  2655               	fcall	_I2CStop
  1216                           
  1217                           ;main.c: 102: X = ((XH<<8) | XL);
  1218  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1219  018F  1303               	bcf	3,6	;RP1=0, select bank0
  1220  0190  0852               	movf	main@XL,w
  1221  0191  00C8               	movwf	??_main
  1222  0192  01C9               	clrf	??_main+1
  1223  0193  0853               	movf	main@XH,w
  1224  0194  00CA               	movwf	??_main+2
  1225  0195  01CB               	clrf	??_main+3
  1226  0196  084A               	movf	??_main+2,w
  1227  0197  00CB               	movwf	??_main+3
  1228  0198  01CA               	clrf	??_main+2
  1229  0199  0848               	movf	??_main,w
  1230  019A  044A               	iorwf	??_main+2,w
  1231  019B  00CC               	movwf	main@X
  1232  019C  0849               	movf	??_main+1,w
  1233  019D  044B               	iorwf	??_main+3,w
  1234  019E  00CD               	movwf	main@X+1
  1235                           
  1236                           ;main.c: 103: Y = ((YH<<8) | YL);
  1237  019F  0855               	movf	main@YL,w
  1238  01A0  00C8               	movwf	??_main
  1239  01A1  01C9               	clrf	??_main+1
  1240  01A2  0854               	movf	main@YH,w
  1241  01A3  00CA               	movwf	??_main+2
  1242  01A4  01CB               	clrf	??_main+3
  1243  01A5  084A               	movf	??_main+2,w
  1244  01A6  00CB               	movwf	??_main+3
  1245  01A7  01CA               	clrf	??_main+2
  1246  01A8  0848               	movf	??_main,w
  1247  01A9  044A               	iorwf	??_main+2,w
  1248  01AA  00CE               	movwf	main@Y
  1249  01AB  0849               	movf	??_main+1,w
  1250  01AC  044B               	iorwf	??_main+3,w
  1251  01AD  00CF               	movwf	main@Y+1
  1252                           
  1253                           ;main.c: 104: Z = ((ZH<<8) | ZL);
  1254  01AE  0857               	movf	main@ZL,w
  1255  01AF  00C8               	movwf	??_main
  1256  01B0  01C9               	clrf	??_main+1
  1257  01B1  0856               	movf	main@ZH,w
  1258  01B2  00CA               	movwf	??_main+2
  1259  01B3  01CB               	clrf	??_main+3
  1260  01B4  084A               	movf	??_main+2,w
  1261  01B5  00CB               	movwf	??_main+3
  1262  01B6  01CA               	clrf	??_main+2
  1263  01B7  0848               	movf	??_main,w
  1264  01B8  044A               	iorwf	??_main+2,w
  1265  01B9  00D0               	movwf	main@Z
  1266  01BA  0849               	movf	??_main+1,w
  1267  01BB  044B               	iorwf	??_main+3,w
  1268  01BC  00D1               	movwf	main@Z+1
  1269                           
  1270                           ;main.c: 107: XAVG = get_averageX(X);
  1271  01BD  084D               	movf	main@X+1,w
  1272  01BE  00C3               	movwf	get_averageX@Data+1
  1273  01BF  084C               	movf	main@X,w
  1274  01C0  00C2               	movwf	get_averageX@Data
  1275  01C1  235A               	fcall	_get_averageX
  1276  01C2  1283               	bcf	3,5	;RP0=0, select bank0
  1277  01C3  1303               	bcf	3,6	;RP1=0, select bank0
  1278  01C4  0843               	movf	?_get_averageX+1,w
  1279  01C5  00E7               	movwf	_XAVG+1
  1280  01C6  0842               	movf	?_get_averageX,w
  1281  01C7  00E6               	movwf	_XAVG
  1282                           
  1283                           ;main.c: 108: YAVG = get_averageY(Y);
  1284  01C8  084F               	movf	main@Y+1,w
  1285  01C9  00C3               	movwf	get_averageY@Data+1
  1286  01CA  084E               	movf	main@Y,w
  1287  01CB  00C2               	movwf	get_averageY@Data
  1288  01CC  2304               	fcall	_get_averageY
  1289  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  1290  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  1291  01CF  0843               	movf	?_get_averageY+1,w
  1292  01D0  00E5               	movwf	_YAVG+1
  1293  01D1  0842               	movf	?_get_averageY,w
  1294  01D2  00E4               	movwf	_YAVG
  1295                           
  1296                           ;main.c: 109: ZAVG = get_averageZ(Z);
  1297  01D3  0851               	movf	main@Z+1,w
  1298  01D4  00C3               	movwf	get_averageZ@Data+1
  1299  01D5  0850               	movf	main@Z,w
  1300  01D6  00C2               	movwf	get_averageZ@Data
  1301  01D7  22AE               	fcall	_get_averageZ
  1302  01D8  1283               	bcf	3,5	;RP0=0, select bank0
  1303  01D9  1303               	bcf	3,6	;RP1=0, select bank0
  1304  01DA  0843               	movf	?_get_averageZ+1,w
  1305  01DB  00E3               	movwf	_ZAVG+1
  1306  01DC  0842               	movf	?_get_averageZ,w
  1307  01DD  00E2               	movwf	_ZAVG
  1308                           
  1309                           ;main.c: 111: AVG = (XAVG/3) + (YAVG/3)+ (ZAVG/3);
  1310  01DE  3003               	movlw	3
  1311  01DF  00A6               	movwf	___lwdiv@divisor
  1312  01E0  3000               	movlw	0
  1313  01E1  00A7               	movwf	___lwdiv@divisor+1
  1314  01E2  0867               	movf	_XAVG+1,w
  1315  01E3  00A9               	movwf	___lwdiv@dividend+1
  1316  01E4  0866               	movf	_XAVG,w
  1317  01E5  00A8               	movwf	___lwdiv@dividend
  1318  01E6  2496               	fcall	___lwdiv
  1319  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  1320  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  1321  01E9  0826               	movf	?___lwdiv,w
  1322  01EA  00C8               	movwf	??_main
  1323  01EB  0827               	movf	?___lwdiv+1,w
  1324  01EC  00C9               	movwf	??_main+1
  1325  01ED  3003               	movlw	3
  1326  01EE  00A6               	movwf	___lwdiv@divisor
  1327  01EF  3000               	movlw	0
  1328  01F0  00A7               	movwf	___lwdiv@divisor+1
  1329  01F1  0865               	movf	_YAVG+1,w
  1330  01F2  00A9               	movwf	___lwdiv@dividend+1
  1331  01F3  0864               	movf	_YAVG,w
  1332  01F4  00A8               	movwf	___lwdiv@dividend
  1333  01F5  2496               	fcall	___lwdiv
  1334  01F6  1283               	bcf	3,5	;RP0=0, select bank0
  1335  01F7  1303               	bcf	3,6	;RP1=0, select bank0
  1336  01F8  0826               	movf	?___lwdiv,w
  1337  01F9  0748               	addwf	??_main,w
  1338  01FA  00CA               	movwf	??_main+2
  1339  01FB  0827               	movf	?___lwdiv+1,w
  1340  01FC  1803               	skipnc
  1341  01FD  0A27               	incf	?___lwdiv+1,w
  1342  01FE  0749               	addwf	??_main+1,w
  1343  01FF  00CB               	movwf	??_main+3
  1344  0200  3003               	movlw	3
  1345  0201  00A6               	movwf	___lwdiv@divisor
  1346  0202  3000               	movlw	0
  1347  0203  00A7               	movwf	___lwdiv@divisor+1
  1348  0204  0863               	movf	_ZAVG+1,w
  1349  0205  00A9               	movwf	___lwdiv@dividend+1
  1350  0206  0862               	movf	_ZAVG,w
  1351  0207  00A8               	movwf	___lwdiv@dividend
  1352  0208  2496               	fcall	___lwdiv
  1353  0209  1283               	bcf	3,5	;RP0=0, select bank0
  1354  020A  1303               	bcf	3,6	;RP1=0, select bank0
  1355  020B  0826               	movf	?___lwdiv,w
  1356  020C  074A               	addwf	??_main+2,w
  1357  020D  00E0               	movwf	_AVG
  1358  020E  0827               	movf	?___lwdiv+1,w
  1359  020F  1803               	skipnc
  1360  0210  0A27               	incf	?___lwdiv+1,w
  1361  0211  074B               	addwf	??_main+3,w
  1362  0212  00E1               	movwf	_AVG+1
  1363                           
  1364                           ;main.c: 113: AVG = get_average(AVG);
  1365  0213  0861               	movf	_AVG+1,w
  1366  0214  00C3               	movwf	get_average@Data+1
  1367  0215  0860               	movf	_AVG,w
  1368  0216  00C2               	movwf	get_average@Data
  1369  0217  23B0               	fcall	_get_average
  1370  0218  1283               	bcf	3,5	;RP0=0, select bank0
  1371  0219  1303               	bcf	3,6	;RP1=0, select bank0
  1372  021A  0843               	movf	?_get_average+1,w
  1373  021B  00E1               	movwf	_AVG+1
  1374  021C  0842               	movf	?_get_average,w
  1375  021D  00E0               	movwf	_AVG
  1376  021E  2953               	goto	l1485
  1377  021F                     __end_of_main:	
  1378                           
  1379                           	psect	text1
  1380  05DD                     __ptext1:	
  1381 ;; *************** function _system_init *****************
  1382 ;; Defined at:
  1383 ;;		line 17 in file "main.c"
  1384 ;; Parameters:    Size  Location     Type
  1385 ;;		None
  1386 ;; Auto vars:     Size  Location     Type
  1387 ;;		None
  1388 ;; Return value:  Size  Location     Type
  1389 ;;                  1    wreg      void 
  1390 ;; Registers used:
  1391 ;;		wreg, status,2
  1392 ;; Tracked objects:
  1393 ;;		On entry : 0/0
  1394 ;;		On exit  : 0/0
  1395 ;;		Unchanged: 0/0
  1396 ;; Data sizes:     COMMON   BANK0   BANK1
  1397 ;;      Params:         0       0       0
  1398 ;;      Locals:         0       0       0
  1399 ;;      Temps:          0       0       0
  1400 ;;      Totals:         0       0       0
  1401 ;;Total ram usage:        0 bytes
  1402 ;; Hardware stack levels used:    1
  1403 ;; Hardware stack levels required when called:    3
  1404 ;; This function calls:
  1405 ;;		Nothing
  1406 ;; This function is called by:
  1407 ;;		_main
  1408 ;; This function uses a non-reentrant model
  1409 ;;
  1410                           
  1411                           
  1412                           ;psect for function _system_init
  1413  05DD                     _system_init:	
  1414                           
  1415                           ;main.c: 19: TRISC0 = 0;
  1416                           
  1417                           ;incstack = 0
  1418                           ; Regs used in _system_init: [wreg+status,2]
  1419  05DD  1683               	bsf	3,5	;RP0=1, select bank1
  1420  05DE  1303               	bcf	3,6	;RP1=0, select bank1
  1421  05DF  1007               	bcf	7,0	;volatile
  1422                           
  1423                           ;main.c: 20: OPTION_REGbits.nRBPU = 0;
  1424  05E0  1381               	bcf	1,7	;volatile
  1425                           
  1426                           ;main.c: 21: TRISB = 0x7F;
  1427  05E1  307F               	movlw	127
  1428  05E2  0086               	movwf	6	;volatile
  1429                           
  1430                           ;main.c: 22: WPUB = 0x7F;
  1431  05E3  307F               	movlw	127
  1432  05E4  0095               	movwf	21	;volatile
  1433                           
  1434                           ;main.c: 23: ANS3 = 1;
  1435  05E5  1683               	bsf	3,5	;RP0=1, select bank3
  1436  05E6  1703               	bsf	3,6	;RP1=1, select bank3
  1437  05E7  1588               	bsf	8,3	;volatile
  1438                           
  1439                           ;main.c: 24: ADCON0 = 0x0D;
  1440  05E8  300D               	movlw	13
  1441  05E9  1283               	bcf	3,5	;RP0=0, select bank0
  1442  05EA  1303               	bcf	3,6	;RP1=0, select bank0
  1443  05EB  009F               	movwf	31	;volatile
  1444                           
  1445                           ;main.c: 25: ANSELH = 0x00;
  1446  05EC  1683               	bsf	3,5	;RP0=1, select bank3
  1447  05ED  1703               	bsf	3,6	;RP1=1, select bank3
  1448  05EE  0189               	clrf	9	;volatile
  1449  05EF  0008               	return
  1450  05F0                     __end_of_system_init:	
  1451                           
  1452                           	psect	text2
  1453  02AE                     __ptext2:	
  1454 ;; *************** function _get_averageZ *****************
  1455 ;; Defined at:
  1456 ;;		line 25 in file "average_calculations.c"
  1457 ;; Parameters:    Size  Location     Type
  1458 ;;  Data            2   34[BANK0 ] short 
  1459 ;; Auto vars:     Size  Location     Type
  1460 ;;		None
  1461 ;; Return value:  Size  Location     Type
  1462 ;;                  2   34[BANK0 ] short 
  1463 ;; Registers used:
  1464 ;;		wreg, status,2, status,0, pclath, cstack
  1465 ;; Tracked objects:
  1466 ;;		On entry : 0/0
  1467 ;;		On exit  : 0/0
  1468 ;;		Unchanged: 0/0
  1469 ;; Data sizes:     COMMON   BANK0   BANK1
  1470 ;;      Params:         0       2       0
  1471 ;;      Locals:         0       0       0
  1472 ;;      Temps:          0       4       0
  1473 ;;      Totals:         0       6       0
  1474 ;;Total ram usage:        6 bytes
  1475 ;; Hardware stack levels used:    1
  1476 ;; Hardware stack levels required when called:    4
  1477 ;; This function calls:
  1478 ;;		___aldiv
  1479 ;;		___lmul
  1480 ;; This function is called by:
  1481 ;;		_main
  1482 ;; This function uses a non-reentrant model
  1483 ;;
  1484                           
  1485                           
  1486                           ;psect for function _get_averageZ
  1487  02AE                     _get_averageZ:	
  1488                           
  1489                           ;average_calculations.c: 27: static short OutPut = 0;
  1490                           ;average_calculations.c: 28: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  1491                           
  1492                           ;incstack = 0
  1493                           ; Regs used in _get_averageZ: [wreg+status,2+status,0+pclath+cstack]
  1494  02AE  3000               	movlw	0
  1495  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  1496  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  1497  02B1  00B6               	movwf	___aldiv@divisor+3
  1498  02B2  3000               	movlw	0
  1499  02B3  00B5               	movwf	___aldiv@divisor+2
  1500  02B4  3000               	movlw	0
  1501  02B5  00B4               	movwf	___aldiv@divisor+1
  1502  02B6  3064               	movlw	100
  1503  02B7  00B3               	movwf	___aldiv@divisor
  1504  02B8  085A               	movf	get_averageZ@OutPut,w
  1505  02B9  00C4               	movwf	??_get_averageZ
  1506  02BA  085B               	movf	get_averageZ@OutPut+1,w
  1507  02BB  00C5               	movwf	??_get_averageZ+1
  1508  02BC  3000               	movlw	0
  1509  02BD  1BC5               	btfsc	??_get_averageZ+1,7
  1510  02BE  30FF               	movlw	255
  1511  02BF  00C6               	movwf	??_get_averageZ+2
  1512  02C0  00C7               	movwf	??_get_averageZ+3
  1513  02C1  3003               	movlw	3
  1514  02C2                     u885:	
  1515  02C2  1003               	clrc
  1516  02C3  0DC4               	rlf	??_get_averageZ,f
  1517  02C4  0DC5               	rlf	??_get_averageZ+1,f
  1518  02C5  0DC6               	rlf	??_get_averageZ+2,f
  1519  02C6  0DC7               	rlf	??_get_averageZ+3,f
  1520  02C7  3EFF               	addlw	-1
  1521  02C8  1D03               	skipz
  1522  02C9  2AC2               	goto	u885
  1523  02CA  0842               	movf	get_averageZ@Data,w
  1524  02CB  00A6               	movwf	___lmul@multiplier
  1525  02CC  0843               	movf	get_averageZ@Data+1,w
  1526  02CD  00A7               	movwf	___lmul@multiplier+1
  1527  02CE  3000               	movlw	0
  1528  02CF  1BA7               	btfsc	___lmul@multiplier+1,7
  1529  02D0  30FF               	movlw	255
  1530  02D1  00A8               	movwf	___lmul@multiplier+2
  1531  02D2  00A9               	movwf	___lmul@multiplier+3
  1532  02D3  3000               	movlw	0
  1533  02D4  00AD               	movwf	___lmul@multiplicand+3
  1534  02D5  3000               	movlw	0
  1535  02D6  00AC               	movwf	___lmul@multiplicand+2
  1536  02D7  3000               	movlw	0
  1537  02D8  00AB               	movwf	___lmul@multiplicand+1
  1538  02D9  305C               	movlw	92
  1539  02DA  00AA               	movwf	___lmul@multiplicand
  1540  02DB  2455               	fcall	___lmul
  1541  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  1542  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  1543  02DE  0826               	movf	?___lmul,w
  1544  02DF  07C4               	addwf	??_get_averageZ,f
  1545  02E0  0827               	movf	?___lmul+1,w
  1546  02E1  1803               	skipnc
  1547  02E2  0F27               	incfsz	?___lmul+1,w
  1548  02E3  2AE5               	goto	u890
  1549  02E4  2AE6               	goto	u891
  1550  02E5                     u890:	
  1551  02E5  07C5               	addwf	??_get_averageZ+1,f
  1552  02E6                     u891:	
  1553  02E6  0828               	movf	?___lmul+2,w
  1554  02E7  1803               	skipnc
  1555  02E8  0F28               	incfsz	?___lmul+2,w
  1556  02E9  2AEB               	goto	u892
  1557  02EA  2AEC               	goto	u893
  1558  02EB                     u892:	
  1559  02EB  07C6               	addwf	??_get_averageZ+2,f
  1560  02EC                     u893:	
  1561  02EC  0829               	movf	?___lmul+3,w
  1562  02ED  1803               	skipnc
  1563  02EE  0A29               	incf	?___lmul+3,w
  1564  02EF  07C7               	addwf	??_get_averageZ+3,f
  1565  02F0  0847               	movf	??_get_averageZ+3,w
  1566  02F1  00BA               	movwf	___aldiv@dividend+3
  1567  02F2  0846               	movf	??_get_averageZ+2,w
  1568  02F3  00B9               	movwf	___aldiv@dividend+2
  1569  02F4  0845               	movf	??_get_averageZ+1,w
  1570  02F5  00B8               	movwf	___aldiv@dividend+1
  1571  02F6  0844               	movf	??_get_averageZ,w
  1572  02F7  00B7               	movwf	___aldiv@dividend
  1573  02F8  221F               	fcall	___aldiv
  1574  02F9  1283               	bcf	3,5	;RP0=0, select bank0
  1575  02FA  1303               	bcf	3,6	;RP1=0, select bank0
  1576  02FB  0834               	movf	?___aldiv+1,w
  1577  02FC  00DB               	movwf	get_averageZ@OutPut+1
  1578  02FD  0833               	movf	?___aldiv,w
  1579  02FE  00DA               	movwf	get_averageZ@OutPut
  1580                           
  1581                           ;average_calculations.c: 29: return OutPut;
  1582  02FF  085B               	movf	get_averageZ@OutPut+1,w
  1583  0300  00C3               	movwf	?_get_averageZ+1
  1584  0301  085A               	movf	get_averageZ@OutPut,w
  1585  0302  00C2               	movwf	?_get_averageZ
  1586  0303  0008               	return
  1587  0304                     __end_of_get_averageZ:	
  1588                           
  1589                           	psect	text3
  1590  0304                     __ptext3:	
  1591 ;; *************** function _get_averageY *****************
  1592 ;; Defined at:
  1593 ;;		line 19 in file "average_calculations.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  Data            2   34[BANK0 ] short 
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;		None
  1598 ;; Return value:  Size  Location     Type
  1599 ;;                  2   34[BANK0 ] short 
  1600 ;; Registers used:
  1601 ;;		wreg, status,2, status,0, pclath, cstack
  1602 ;; Tracked objects:
  1603 ;;		On entry : 0/0
  1604 ;;		On exit  : 0/0
  1605 ;;		Unchanged: 0/0
  1606 ;; Data sizes:     COMMON   BANK0   BANK1
  1607 ;;      Params:         0       2       0
  1608 ;;      Locals:         0       0       0
  1609 ;;      Temps:          0       4       0
  1610 ;;      Totals:         0       6       0
  1611 ;;Total ram usage:        6 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; Hardware stack levels required when called:    4
  1614 ;; This function calls:
  1615 ;;		___aldiv
  1616 ;;		___lmul
  1617 ;; This function is called by:
  1618 ;;		_main
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           
  1623                           ;psect for function _get_averageY
  1624  0304                     _get_averageY:	
  1625                           
  1626                           ;average_calculations.c: 21: static short OutPut = 0;
  1627                           ;average_calculations.c: 22: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  1628                           
  1629                           ;incstack = 0
  1630                           ; Regs used in _get_averageY: [wreg+status,2+status,0+pclath+cstack]
  1631  0304  3000               	movlw	0
  1632  0305  1283               	bcf	3,5	;RP0=0, select bank0
  1633  0306  1303               	bcf	3,6	;RP1=0, select bank0
  1634  0307  00B6               	movwf	___aldiv@divisor+3
  1635  0308  3000               	movlw	0
  1636  0309  00B5               	movwf	___aldiv@divisor+2
  1637  030A  3000               	movlw	0
  1638  030B  00B4               	movwf	___aldiv@divisor+1
  1639  030C  3064               	movlw	100
  1640  030D  00B3               	movwf	___aldiv@divisor
  1641  030E  085C               	movf	get_averageY@OutPut,w
  1642  030F  00C4               	movwf	??_get_averageY
  1643  0310  085D               	movf	get_averageY@OutPut+1,w
  1644  0311  00C5               	movwf	??_get_averageY+1
  1645  0312  3000               	movlw	0
  1646  0313  1BC5               	btfsc	??_get_averageY+1,7
  1647  0314  30FF               	movlw	255
  1648  0315  00C6               	movwf	??_get_averageY+2
  1649  0316  00C7               	movwf	??_get_averageY+3
  1650  0317  3003               	movlw	3
  1651  0318                     u865:	
  1652  0318  1003               	clrc
  1653  0319  0DC4               	rlf	??_get_averageY,f
  1654  031A  0DC5               	rlf	??_get_averageY+1,f
  1655  031B  0DC6               	rlf	??_get_averageY+2,f
  1656  031C  0DC7               	rlf	??_get_averageY+3,f
  1657  031D  3EFF               	addlw	-1
  1658  031E  1D03               	skipz
  1659  031F  2B18               	goto	u865
  1660  0320  0842               	movf	get_averageY@Data,w
  1661  0321  00A6               	movwf	___lmul@multiplier
  1662  0322  0843               	movf	get_averageY@Data+1,w
  1663  0323  00A7               	movwf	___lmul@multiplier+1
  1664  0324  3000               	movlw	0
  1665  0325  1BA7               	btfsc	___lmul@multiplier+1,7
  1666  0326  30FF               	movlw	255
  1667  0327  00A8               	movwf	___lmul@multiplier+2
  1668  0328  00A9               	movwf	___lmul@multiplier+3
  1669  0329  3000               	movlw	0
  1670  032A  00AD               	movwf	___lmul@multiplicand+3
  1671  032B  3000               	movlw	0
  1672  032C  00AC               	movwf	___lmul@multiplicand+2
  1673  032D  3000               	movlw	0
  1674  032E  00AB               	movwf	___lmul@multiplicand+1
  1675  032F  305C               	movlw	92
  1676  0330  00AA               	movwf	___lmul@multiplicand
  1677  0331  2455               	fcall	___lmul
  1678  0332  1283               	bcf	3,5	;RP0=0, select bank0
  1679  0333  1303               	bcf	3,6	;RP1=0, select bank0
  1680  0334  0826               	movf	?___lmul,w
  1681  0335  07C4               	addwf	??_get_averageY,f
  1682  0336  0827               	movf	?___lmul+1,w
  1683  0337  1803               	skipnc
  1684  0338  0F27               	incfsz	?___lmul+1,w
  1685  0339  2B3B               	goto	u870
  1686  033A  2B3C               	goto	u871
  1687  033B                     u870:	
  1688  033B  07C5               	addwf	??_get_averageY+1,f
  1689  033C                     u871:	
  1690  033C  0828               	movf	?___lmul+2,w
  1691  033D  1803               	skipnc
  1692  033E  0F28               	incfsz	?___lmul+2,w
  1693  033F  2B41               	goto	u872
  1694  0340  2B42               	goto	u873
  1695  0341                     u872:	
  1696  0341  07C6               	addwf	??_get_averageY+2,f
  1697  0342                     u873:	
  1698  0342  0829               	movf	?___lmul+3,w
  1699  0343  1803               	skipnc
  1700  0344  0A29               	incf	?___lmul+3,w
  1701  0345  07C7               	addwf	??_get_averageY+3,f
  1702  0346  0847               	movf	??_get_averageY+3,w
  1703  0347  00BA               	movwf	___aldiv@dividend+3
  1704  0348  0846               	movf	??_get_averageY+2,w
  1705  0349  00B9               	movwf	___aldiv@dividend+2
  1706  034A  0845               	movf	??_get_averageY+1,w
  1707  034B  00B8               	movwf	___aldiv@dividend+1
  1708  034C  0844               	movf	??_get_averageY,w
  1709  034D  00B7               	movwf	___aldiv@dividend
  1710  034E  221F               	fcall	___aldiv
  1711  034F  1283               	bcf	3,5	;RP0=0, select bank0
  1712  0350  1303               	bcf	3,6	;RP1=0, select bank0
  1713  0351  0834               	movf	?___aldiv+1,w
  1714  0352  00DD               	movwf	get_averageY@OutPut+1
  1715  0353  0833               	movf	?___aldiv,w
  1716  0354  00DC               	movwf	get_averageY@OutPut
  1717                           
  1718                           ;average_calculations.c: 23: return OutPut;
  1719  0355  085D               	movf	get_averageY@OutPut+1,w
  1720  0356  00C3               	movwf	?_get_averageY+1
  1721  0357  085C               	movf	get_averageY@OutPut,w
  1722  0358  00C2               	movwf	?_get_averageY
  1723  0359  0008               	return
  1724  035A                     __end_of_get_averageY:	
  1725                           
  1726                           	psect	text4
  1727  035A                     __ptext4:	
  1728 ;; *************** function _get_averageX *****************
  1729 ;; Defined at:
  1730 ;;		line 13 in file "average_calculations.c"
  1731 ;; Parameters:    Size  Location     Type
  1732 ;;  Data            2   34[BANK0 ] short 
  1733 ;; Auto vars:     Size  Location     Type
  1734 ;;		None
  1735 ;; Return value:  Size  Location     Type
  1736 ;;                  2   34[BANK0 ] short 
  1737 ;; Registers used:
  1738 ;;		wreg, status,2, status,0, pclath, cstack
  1739 ;; Tracked objects:
  1740 ;;		On entry : 0/0
  1741 ;;		On exit  : 0/0
  1742 ;;		Unchanged: 0/0
  1743 ;; Data sizes:     COMMON   BANK0   BANK1
  1744 ;;      Params:         0       2       0
  1745 ;;      Locals:         0       0       0
  1746 ;;      Temps:          0       4       0
  1747 ;;      Totals:         0       6       0
  1748 ;;Total ram usage:        6 bytes
  1749 ;; Hardware stack levels used:    1
  1750 ;; Hardware stack levels required when called:    4
  1751 ;; This function calls:
  1752 ;;		___aldiv
  1753 ;;		___lmul
  1754 ;; This function is called by:
  1755 ;;		_main
  1756 ;; This function uses a non-reentrant model
  1757 ;;
  1758                           
  1759                           
  1760                           ;psect for function _get_averageX
  1761  035A                     _get_averageX:	
  1762                           
  1763                           ;average_calculations.c: 15: static short OutPut = 0;
  1764                           ;average_calculations.c: 16: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  1765                           
  1766                           ;incstack = 0
  1767                           ; Regs used in _get_averageX: [wreg+status,2+status,0+pclath+cstack]
  1768  035A  3000               	movlw	0
  1769  035B  1283               	bcf	3,5	;RP0=0, select bank0
  1770  035C  1303               	bcf	3,6	;RP1=0, select bank0
  1771  035D  00B6               	movwf	___aldiv@divisor+3
  1772  035E  3000               	movlw	0
  1773  035F  00B5               	movwf	___aldiv@divisor+2
  1774  0360  3000               	movlw	0
  1775  0361  00B4               	movwf	___aldiv@divisor+1
  1776  0362  3064               	movlw	100
  1777  0363  00B3               	movwf	___aldiv@divisor
  1778  0364  085E               	movf	get_averageX@OutPut,w
  1779  0365  00C4               	movwf	??_get_averageX
  1780  0366  085F               	movf	get_averageX@OutPut+1,w
  1781  0367  00C5               	movwf	??_get_averageX+1
  1782  0368  3000               	movlw	0
  1783  0369  1BC5               	btfsc	??_get_averageX+1,7
  1784  036A  30FF               	movlw	255
  1785  036B  00C6               	movwf	??_get_averageX+2
  1786  036C  00C7               	movwf	??_get_averageX+3
  1787  036D  3003               	movlw	3
  1788  036E                     u845:	
  1789  036E  1003               	clrc
  1790  036F  0DC4               	rlf	??_get_averageX,f
  1791  0370  0DC5               	rlf	??_get_averageX+1,f
  1792  0371  0DC6               	rlf	??_get_averageX+2,f
  1793  0372  0DC7               	rlf	??_get_averageX+3,f
  1794  0373  3EFF               	addlw	-1
  1795  0374  1D03               	skipz
  1796  0375  2B6E               	goto	u845
  1797  0376  0842               	movf	get_averageX@Data,w
  1798  0377  00A6               	movwf	___lmul@multiplier
  1799  0378  0843               	movf	get_averageX@Data+1,w
  1800  0379  00A7               	movwf	___lmul@multiplier+1
  1801  037A  3000               	movlw	0
  1802  037B  1BA7               	btfsc	___lmul@multiplier+1,7
  1803  037C  30FF               	movlw	255
  1804  037D  00A8               	movwf	___lmul@multiplier+2
  1805  037E  00A9               	movwf	___lmul@multiplier+3
  1806  037F  3000               	movlw	0
  1807  0380  00AD               	movwf	___lmul@multiplicand+3
  1808  0381  3000               	movlw	0
  1809  0382  00AC               	movwf	___lmul@multiplicand+2
  1810  0383  3000               	movlw	0
  1811  0384  00AB               	movwf	___lmul@multiplicand+1
  1812  0385  305C               	movlw	92
  1813  0386  00AA               	movwf	___lmul@multiplicand
  1814  0387  2455               	fcall	___lmul
  1815  0388  1283               	bcf	3,5	;RP0=0, select bank0
  1816  0389  1303               	bcf	3,6	;RP1=0, select bank0
  1817  038A  0826               	movf	?___lmul,w
  1818  038B  07C4               	addwf	??_get_averageX,f
  1819  038C  0827               	movf	?___lmul+1,w
  1820  038D  1803               	skipnc
  1821  038E  0F27               	incfsz	?___lmul+1,w
  1822  038F  2B91               	goto	u850
  1823  0390  2B92               	goto	u851
  1824  0391                     u850:	
  1825  0391  07C5               	addwf	??_get_averageX+1,f
  1826  0392                     u851:	
  1827  0392  0828               	movf	?___lmul+2,w
  1828  0393  1803               	skipnc
  1829  0394  0F28               	incfsz	?___lmul+2,w
  1830  0395  2B97               	goto	u852
  1831  0396  2B98               	goto	u853
  1832  0397                     u852:	
  1833  0397  07C6               	addwf	??_get_averageX+2,f
  1834  0398                     u853:	
  1835  0398  0829               	movf	?___lmul+3,w
  1836  0399  1803               	skipnc
  1837  039A  0A29               	incf	?___lmul+3,w
  1838  039B  07C7               	addwf	??_get_averageX+3,f
  1839  039C  0847               	movf	??_get_averageX+3,w
  1840  039D  00BA               	movwf	___aldiv@dividend+3
  1841  039E  0846               	movf	??_get_averageX+2,w
  1842  039F  00B9               	movwf	___aldiv@dividend+2
  1843  03A0  0845               	movf	??_get_averageX+1,w
  1844  03A1  00B8               	movwf	___aldiv@dividend+1
  1845  03A2  0844               	movf	??_get_averageX,w
  1846  03A3  00B7               	movwf	___aldiv@dividend
  1847  03A4  221F               	fcall	___aldiv
  1848  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  1849  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  1850  03A7  0834               	movf	?___aldiv+1,w
  1851  03A8  00DF               	movwf	get_averageX@OutPut+1
  1852  03A9  0833               	movf	?___aldiv,w
  1853  03AA  00DE               	movwf	get_averageX@OutPut
  1854                           
  1855                           ;average_calculations.c: 17: return OutPut;
  1856  03AB  085F               	movf	get_averageX@OutPut+1,w
  1857  03AC  00C3               	movwf	?_get_averageX+1
  1858  03AD  085E               	movf	get_averageX@OutPut,w
  1859  03AE  00C2               	movwf	?_get_averageX
  1860  03AF  0008               	return
  1861  03B0                     __end_of_get_averageX:	
  1862                           
  1863                           	psect	text5
  1864  03B0                     __ptext5:	
  1865 ;; *************** function _get_average *****************
  1866 ;; Defined at:
  1867 ;;		line 32 in file "average_calculations.c"
  1868 ;; Parameters:    Size  Location     Type
  1869 ;;  Data            2   34[BANK0 ] short 
  1870 ;; Auto vars:     Size  Location     Type
  1871 ;;		None
  1872 ;; Return value:  Size  Location     Type
  1873 ;;                  2   34[BANK0 ] short 
  1874 ;; Registers used:
  1875 ;;		wreg, status,2, status,0, pclath, cstack
  1876 ;; Tracked objects:
  1877 ;;		On entry : 0/0
  1878 ;;		On exit  : 0/0
  1879 ;;		Unchanged: 0/0
  1880 ;; Data sizes:     COMMON   BANK0   BANK1
  1881 ;;      Params:         0       2       0
  1882 ;;      Locals:         0       0       0
  1883 ;;      Temps:          0       4       0
  1884 ;;      Totals:         0       6       0
  1885 ;;Total ram usage:        6 bytes
  1886 ;; Hardware stack levels used:    1
  1887 ;; Hardware stack levels required when called:    4
  1888 ;; This function calls:
  1889 ;;		___aldiv
  1890 ;;		___lmul
  1891 ;; This function is called by:
  1892 ;;		_main
  1893 ;; This function uses a non-reentrant model
  1894 ;;
  1895                           
  1896                           
  1897                           ;psect for function _get_average
  1898  03B0                     _get_average:	
  1899                           
  1900                           ;average_calculations.c: 34: static short OutPut = 0;
  1901                           ;average_calculations.c: 35: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  1902                           
  1903                           ;incstack = 0
  1904                           ; Regs used in _get_average: [wreg+status,2+status,0+pclath+cstack]
  1905  03B0  3000               	movlw	0
  1906  03B1  1283               	bcf	3,5	;RP0=0, select bank0
  1907  03B2  1303               	bcf	3,6	;RP1=0, select bank0
  1908  03B3  00B6               	movwf	___aldiv@divisor+3
  1909  03B4  3000               	movlw	0
  1910  03B5  00B5               	movwf	___aldiv@divisor+2
  1911  03B6  3000               	movlw	0
  1912  03B7  00B4               	movwf	___aldiv@divisor+1
  1913  03B8  3064               	movlw	100
  1914  03B9  00B3               	movwf	___aldiv@divisor
  1915  03BA  0858               	movf	get_average@OutPut,w
  1916  03BB  00C4               	movwf	??_get_average
  1917  03BC  0859               	movf	get_average@OutPut+1,w
  1918  03BD  00C5               	movwf	??_get_average+1
  1919  03BE  3000               	movlw	0
  1920  03BF  1BC5               	btfsc	??_get_average+1,7
  1921  03C0  30FF               	movlw	255
  1922  03C1  00C6               	movwf	??_get_average+2
  1923  03C2  00C7               	movwf	??_get_average+3
  1924  03C3  3003               	movlw	3
  1925  03C4                     u905:	
  1926  03C4  1003               	clrc
  1927  03C5  0DC4               	rlf	??_get_average,f
  1928  03C6  0DC5               	rlf	??_get_average+1,f
  1929  03C7  0DC6               	rlf	??_get_average+2,f
  1930  03C8  0DC7               	rlf	??_get_average+3,f
  1931  03C9  3EFF               	addlw	-1
  1932  03CA  1D03               	skipz
  1933  03CB  2BC4               	goto	u905
  1934  03CC  0842               	movf	get_average@Data,w
  1935  03CD  00A6               	movwf	___lmul@multiplier
  1936  03CE  0843               	movf	get_average@Data+1,w
  1937  03CF  00A7               	movwf	___lmul@multiplier+1
  1938  03D0  3000               	movlw	0
  1939  03D1  1BA7               	btfsc	___lmul@multiplier+1,7
  1940  03D2  30FF               	movlw	255
  1941  03D3  00A8               	movwf	___lmul@multiplier+2
  1942  03D4  00A9               	movwf	___lmul@multiplier+3
  1943  03D5  3000               	movlw	0
  1944  03D6  00AD               	movwf	___lmul@multiplicand+3
  1945  03D7  3000               	movlw	0
  1946  03D8  00AC               	movwf	___lmul@multiplicand+2
  1947  03D9  3000               	movlw	0
  1948  03DA  00AB               	movwf	___lmul@multiplicand+1
  1949  03DB  305C               	movlw	92
  1950  03DC  00AA               	movwf	___lmul@multiplicand
  1951  03DD  2455               	fcall	___lmul
  1952  03DE  1283               	bcf	3,5	;RP0=0, select bank0
  1953  03DF  1303               	bcf	3,6	;RP1=0, select bank0
  1954  03E0  0826               	movf	?___lmul,w
  1955  03E1  07C4               	addwf	??_get_average,f
  1956  03E2  0827               	movf	?___lmul+1,w
  1957  03E3  1803               	skipnc
  1958  03E4  0F27               	incfsz	?___lmul+1,w
  1959  03E5  2BE7               	goto	u910
  1960  03E6  2BE8               	goto	u911
  1961  03E7                     u910:	
  1962  03E7  07C5               	addwf	??_get_average+1,f
  1963  03E8                     u911:	
  1964  03E8  0828               	movf	?___lmul+2,w
  1965  03E9  1803               	skipnc
  1966  03EA  0F28               	incfsz	?___lmul+2,w
  1967  03EB  2BED               	goto	u912
  1968  03EC  2BEE               	goto	u913
  1969  03ED                     u912:	
  1970  03ED  07C6               	addwf	??_get_average+2,f
  1971  03EE                     u913:	
  1972  03EE  0829               	movf	?___lmul+3,w
  1973  03EF  1803               	skipnc
  1974  03F0  0A29               	incf	?___lmul+3,w
  1975  03F1  07C7               	addwf	??_get_average+3,f
  1976  03F2  0847               	movf	??_get_average+3,w
  1977  03F3  00BA               	movwf	___aldiv@dividend+3
  1978  03F4  0846               	movf	??_get_average+2,w
  1979  03F5  00B9               	movwf	___aldiv@dividend+2
  1980  03F6  0845               	movf	??_get_average+1,w
  1981  03F7  00B8               	movwf	___aldiv@dividend+1
  1982  03F8  0844               	movf	??_get_average,w
  1983  03F9  00B7               	movwf	___aldiv@dividend
  1984  03FA  221F               	fcall	___aldiv
  1985  03FB  1283               	bcf	3,5	;RP0=0, select bank0
  1986  03FC  1303               	bcf	3,6	;RP1=0, select bank0
  1987  03FD  0834               	movf	?___aldiv+1,w
  1988  03FE  00D9               	movwf	get_average@OutPut+1
  1989  03FF  0833               	movf	?___aldiv,w
  1990  0400  00D8               	movwf	get_average@OutPut
  1991                           
  1992                           ;average_calculations.c: 36: return OutPut;
  1993  0401  0859               	movf	get_average@OutPut+1,w
  1994  0402  00C3               	movwf	?_get_average+1
  1995  0403  0858               	movf	get_average@OutPut,w
  1996  0404  00C2               	movwf	?_get_average
  1997  0405  0008               	return
  1998  0406                     __end_of_get_average:	
  1999                           
  2000                           	psect	text6
  2001  0455                     __ptext6:	
  2002 ;; *************** function ___lmul *****************
  2003 ;; Defined at:
  2004 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  2005 ;; Parameters:    Size  Location     Type
  2006 ;;  multiplier      4    6[BANK0 ] unsigned long 
  2007 ;;  multiplicand    4   10[BANK0 ] unsigned long 
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  product         4   15[BANK0 ] unsigned long 
  2010 ;; Return value:  Size  Location     Type
  2011 ;;                  4    6[BANK0 ] unsigned long 
  2012 ;; Registers used:
  2013 ;;		wreg, status,2, status,0
  2014 ;; Tracked objects:
  2015 ;;		On entry : 0/0
  2016 ;;		On exit  : 0/0
  2017 ;;		Unchanged: 0/0
  2018 ;; Data sizes:     COMMON   BANK0   BANK1
  2019 ;;      Params:         0       8       0
  2020 ;;      Locals:         0       4       0
  2021 ;;      Temps:          0       1       0
  2022 ;;      Totals:         0      13       0
  2023 ;;Total ram usage:       13 bytes
  2024 ;; Hardware stack levels used:    1
  2025 ;; Hardware stack levels required when called:    3
  2026 ;; This function calls:
  2027 ;;		Nothing
  2028 ;; This function is called by:
  2029 ;;		_get_averageX
  2030 ;;		_get_averageY
  2031 ;;		_get_averageZ
  2032 ;;		_get_average
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036                           
  2037                           ;psect for function ___lmul
  2038  0455                     ___lmul:	
  2039                           
  2040                           ;incstack = 0
  2041                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2042  0455  3000               	movlw	0
  2043  0456  1283               	bcf	3,5	;RP0=0, select bank0
  2044  0457  1303               	bcf	3,6	;RP1=0, select bank0
  2045  0458  00B2               	movwf	___lmul@product+3
  2046  0459  3000               	movlw	0
  2047  045A  00B1               	movwf	___lmul@product+2
  2048  045B  3000               	movlw	0
  2049  045C  00B0               	movwf	___lmul@product+1
  2050  045D  3000               	movlw	0
  2051  045E  00AF               	movwf	___lmul@product
  2052  045F                     l1201:	
  2053  045F  1C26               	btfss	___lmul@multiplier,0
  2054  0460  2C75               	goto	l1205
  2055  0461  082A               	movf	___lmul@multiplicand,w
  2056  0462  07AF               	addwf	___lmul@product,f
  2057  0463  082B               	movf	___lmul@multiplicand+1,w
  2058  0464  1103               	clrz
  2059  0465  1803               	skipnc
  2060  0466  3E01               	addlw	1
  2061  0467  1D03               	btfss	3,2
  2062  0468  07B0               	addwf	___lmul@product+1,f
  2063  0469  082C               	movf	___lmul@multiplicand+2,w
  2064  046A  1103               	clrz
  2065  046B  1803               	skipnc
  2066  046C  3E01               	addlw	1
  2067  046D  1D03               	btfss	3,2
  2068  046E  07B1               	addwf	___lmul@product+2,f
  2069  046F  082D               	movf	___lmul@multiplicand+3,w
  2070  0470  1103               	clrz
  2071  0471  1803               	skipnc
  2072  0472  3E01               	addlw	1
  2073  0473  1D03               	btfss	3,2
  2074  0474  07B2               	addwf	___lmul@product+3,f
  2075  0475                     l1205:	
  2076  0475  3001               	movlw	1
  2077  0476  00AE               	movwf	??___lmul
  2078  0477                     u615:	
  2079  0477  1003               	clrc
  2080  0478  0DAA               	rlf	___lmul@multiplicand,f
  2081  0479  0DAB               	rlf	___lmul@multiplicand+1,f
  2082  047A  0DAC               	rlf	___lmul@multiplicand+2,f
  2083  047B  0DAD               	rlf	___lmul@multiplicand+3,f
  2084  047C  0BAE               	decfsz	??___lmul,f
  2085  047D  2C77               	goto	u615
  2086  047E  3001               	movlw	1
  2087  047F                     u625:	
  2088  047F  1003               	clrc
  2089  0480  0CA9               	rrf	___lmul@multiplier+3,f
  2090  0481  0CA8               	rrf	___lmul@multiplier+2,f
  2091  0482  0CA7               	rrf	___lmul@multiplier+1,f
  2092  0483  0CA6               	rrf	___lmul@multiplier,f
  2093  0484  3EFF               	addlw	-1
  2094  0485  1D03               	skipz
  2095  0486  2C7F               	goto	u625
  2096  0487  0829               	movf	___lmul@multiplier+3,w
  2097  0488  0428               	iorwf	___lmul@multiplier+2,w
  2098  0489  0427               	iorwf	___lmul@multiplier+1,w
  2099  048A  0426               	iorwf	___lmul@multiplier,w
  2100  048B  1D03               	skipz
  2101  048C  2C5F               	goto	l1201
  2102  048D  0832               	movf	___lmul@product+3,w
  2103  048E  00A9               	movwf	?___lmul+3
  2104  048F  0831               	movf	___lmul@product+2,w
  2105  0490  00A8               	movwf	?___lmul+2
  2106  0491  0830               	movf	___lmul@product+1,w
  2107  0492  00A7               	movwf	?___lmul+1
  2108  0493  082F               	movf	___lmul@product,w
  2109  0494  00A6               	movwf	?___lmul
  2110  0495  0008               	return
  2111  0496                     __end_of___lmul:	
  2112                           
  2113                           	psect	text7
  2114  021F                     __ptext7:	
  2115 ;; *************** function ___aldiv *****************
  2116 ;; Defined at:
  2117 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  2118 ;; Parameters:    Size  Location     Type
  2119 ;;  divisor         4   19[BANK0 ] long 
  2120 ;;  dividend        4   23[BANK0 ] long 
  2121 ;; Auto vars:     Size  Location     Type
  2122 ;;  quotient        4   30[BANK0 ] long 
  2123 ;;  sign            1   29[BANK0 ] unsigned char 
  2124 ;;  counter         1   28[BANK0 ] unsigned char 
  2125 ;; Return value:  Size  Location     Type
  2126 ;;                  4   19[BANK0 ] long 
  2127 ;; Registers used:
  2128 ;;		wreg, status,2, status,0
  2129 ;; Tracked objects:
  2130 ;;		On entry : 0/0
  2131 ;;		On exit  : 0/0
  2132 ;;		Unchanged: 0/0
  2133 ;; Data sizes:     COMMON   BANK0   BANK1
  2134 ;;      Params:         0       8       0
  2135 ;;      Locals:         0       6       0
  2136 ;;      Temps:          0       1       0
  2137 ;;      Totals:         0      15       0
  2138 ;;Total ram usage:       15 bytes
  2139 ;; Hardware stack levels used:    1
  2140 ;; Hardware stack levels required when called:    3
  2141 ;; This function calls:
  2142 ;;		Nothing
  2143 ;; This function is called by:
  2144 ;;		_get_averageX
  2145 ;;		_get_averageY
  2146 ;;		_get_averageZ
  2147 ;;		_get_average
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150                           
  2151                           
  2152                           ;psect for function ___aldiv
  2153  021F                     ___aldiv:	
  2154                           
  2155                           ;incstack = 0
  2156                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2157  021F  1283               	bcf	3,5	;RP0=0, select bank0
  2158  0220  1303               	bcf	3,6	;RP1=0, select bank0
  2159  0221  01BD               	clrf	___aldiv@sign
  2160  0222  1FB6               	btfss	___aldiv@divisor+3,7
  2161  0223  2A31               	goto	l414
  2162  0224  09B3               	comf	___aldiv@divisor,f
  2163  0225  09B4               	comf	___aldiv@divisor+1,f
  2164  0226  09B5               	comf	___aldiv@divisor+2,f
  2165  0227  09B6               	comf	___aldiv@divisor+3,f
  2166  0228  0AB3               	incf	___aldiv@divisor,f
  2167  0229  1903               	skipnz
  2168  022A  0AB4               	incf	___aldiv@divisor+1,f
  2169  022B  1903               	skipnz
  2170  022C  0AB5               	incf	___aldiv@divisor+2,f
  2171  022D  1903               	skipnz
  2172  022E  0AB6               	incf	___aldiv@divisor+3,f
  2173  022F  01BD               	clrf	___aldiv@sign
  2174  0230  0ABD               	incf	___aldiv@sign,f
  2175  0231                     l414:	
  2176  0231  1FBA               	btfss	___aldiv@dividend+3,7
  2177  0232  2A42               	goto	l1223
  2178  0233  09B7               	comf	___aldiv@dividend,f
  2179  0234  09B8               	comf	___aldiv@dividend+1,f
  2180  0235  09B9               	comf	___aldiv@dividend+2,f
  2181  0236  09BA               	comf	___aldiv@dividend+3,f
  2182  0237  0AB7               	incf	___aldiv@dividend,f
  2183  0238  1903               	skipnz
  2184  0239  0AB8               	incf	___aldiv@dividend+1,f
  2185  023A  1903               	skipnz
  2186  023B  0AB9               	incf	___aldiv@dividend+2,f
  2187  023C  1903               	skipnz
  2188  023D  0ABA               	incf	___aldiv@dividend+3,f
  2189  023E  3001               	movlw	1
  2190  023F  00BB               	movwf	??___aldiv
  2191  0240  083B               	movf	??___aldiv,w
  2192  0241  06BD               	xorwf	___aldiv@sign,f
  2193  0242                     l1223:	
  2194  0242  3000               	movlw	0
  2195  0243  00C1               	movwf	___aldiv@quotient+3
  2196  0244  3000               	movlw	0
  2197  0245  00C0               	movwf	___aldiv@quotient+2
  2198  0246  3000               	movlw	0
  2199  0247  00BF               	movwf	___aldiv@quotient+1
  2200  0248  3000               	movlw	0
  2201  0249  00BE               	movwf	___aldiv@quotient
  2202  024A  0836               	movf	___aldiv@divisor+3,w
  2203  024B  0435               	iorwf	___aldiv@divisor+2,w
  2204  024C  0434               	iorwf	___aldiv@divisor+1,w
  2205  024D  0433               	iorwf	___aldiv@divisor,w
  2206  024E  1903               	skipnz
  2207  024F  2A97               	goto	l1245
  2208  0250  01BC               	clrf	___aldiv@counter
  2209  0251  0ABC               	incf	___aldiv@counter,f
  2210  0252                     l1231:	
  2211  0252  1BB6               	btfsc	___aldiv@divisor+3,7
  2212  0253  2A62               	goto	l1233
  2213  0254  3001               	movlw	1
  2214  0255  00BB               	movwf	??___aldiv
  2215  0256                     u675:	
  2216  0256  1003               	clrc
  2217  0257  0DB3               	rlf	___aldiv@divisor,f
  2218  0258  0DB4               	rlf	___aldiv@divisor+1,f
  2219  0259  0DB5               	rlf	___aldiv@divisor+2,f
  2220  025A  0DB6               	rlf	___aldiv@divisor+3,f
  2221  025B  0BBB               	decfsz	??___aldiv,f
  2222  025C  2A56               	goto	u675
  2223  025D  3001               	movlw	1
  2224  025E  00BB               	movwf	??___aldiv
  2225  025F  083B               	movf	??___aldiv,w
  2226  0260  07BC               	addwf	___aldiv@counter,f
  2227  0261  2A52               	goto	l1231
  2228  0262                     l1233:	
  2229  0262  3001               	movlw	1
  2230  0263  00BB               	movwf	??___aldiv
  2231  0264                     u695:	
  2232  0264  1003               	clrc
  2233  0265  0DBE               	rlf	___aldiv@quotient,f
  2234  0266  0DBF               	rlf	___aldiv@quotient+1,f
  2235  0267  0DC0               	rlf	___aldiv@quotient+2,f
  2236  0268  0DC1               	rlf	___aldiv@quotient+3,f
  2237  0269  0BBB               	decfsz	??___aldiv,f
  2238  026A  2A64               	goto	u695
  2239  026B  0836               	movf	___aldiv@divisor+3,w
  2240  026C  023A               	subwf	___aldiv@dividend+3,w
  2241  026D  1D03               	skipz
  2242  026E  2A79               	goto	u705
  2243  026F  0835               	movf	___aldiv@divisor+2,w
  2244  0270  0239               	subwf	___aldiv@dividend+2,w
  2245  0271  1D03               	skipz
  2246  0272  2A79               	goto	u705
  2247  0273  0834               	movf	___aldiv@divisor+1,w
  2248  0274  0238               	subwf	___aldiv@dividend+1,w
  2249  0275  1D03               	skipz
  2250  0276  2A79               	goto	u705
  2251  0277  0833               	movf	___aldiv@divisor,w
  2252  0278  0237               	subwf	___aldiv@dividend,w
  2253  0279                     u705:	
  2254  0279  1C03               	skipc
  2255  027A  2A8A               	goto	l1241
  2256  027B  0833               	movf	___aldiv@divisor,w
  2257  027C  02B7               	subwf	___aldiv@dividend,f
  2258  027D  0834               	movf	___aldiv@divisor+1,w
  2259  027E  1C03               	skipc
  2260  027F  0F34               	incfsz	___aldiv@divisor+1,w
  2261  0280  02B8               	subwf	___aldiv@dividend+1,f
  2262  0281  0835               	movf	___aldiv@divisor+2,w
  2263  0282  1C03               	skipc
  2264  0283  0F35               	incfsz	___aldiv@divisor+2,w
  2265  0284  02B9               	subwf	___aldiv@dividend+2,f
  2266  0285  0836               	movf	___aldiv@divisor+3,w
  2267  0286  1C03               	skipc
  2268  0287  0F36               	incfsz	___aldiv@divisor+3,w
  2269  0288  02BA               	subwf	___aldiv@dividend+3,f
  2270  0289  143E               	bsf	___aldiv@quotient,0
  2271  028A                     l1241:	
  2272  028A  3001               	movlw	1
  2273  028B                     u715:	
  2274  028B  1003               	clrc
  2275  028C  0CB6               	rrf	___aldiv@divisor+3,f
  2276  028D  0CB5               	rrf	___aldiv@divisor+2,f
  2277  028E  0CB4               	rrf	___aldiv@divisor+1,f
  2278  028F  0CB3               	rrf	___aldiv@divisor,f
  2279  0290  3EFF               	addlw	-1
  2280  0291  1D03               	skipz
  2281  0292  2A8B               	goto	u715
  2282  0293  3001               	movlw	1
  2283  0294  02BC               	subwf	___aldiv@counter,f
  2284  0295  1D03               	btfss	3,2
  2285  0296  2A62               	goto	l1233
  2286  0297                     l1245:	
  2287  0297  083D               	movf	___aldiv@sign,w
  2288  0298  1903               	btfsc	3,2
  2289  0299  2AA5               	goto	l1249
  2290  029A  09BE               	comf	___aldiv@quotient,f
  2291  029B  09BF               	comf	___aldiv@quotient+1,f
  2292  029C  09C0               	comf	___aldiv@quotient+2,f
  2293  029D  09C1               	comf	___aldiv@quotient+3,f
  2294  029E  0ABE               	incf	___aldiv@quotient,f
  2295  029F  1903               	skipnz
  2296  02A0  0ABF               	incf	___aldiv@quotient+1,f
  2297  02A1  1903               	skipnz
  2298  02A2  0AC0               	incf	___aldiv@quotient+2,f
  2299  02A3  1903               	skipnz
  2300  02A4  0AC1               	incf	___aldiv@quotient+3,f
  2301  02A5                     l1249:	
  2302  02A5  0841               	movf	___aldiv@quotient+3,w
  2303  02A6  00B6               	movwf	?___aldiv+3
  2304  02A7  0840               	movf	___aldiv@quotient+2,w
  2305  02A8  00B5               	movwf	?___aldiv+2
  2306  02A9  083F               	movf	___aldiv@quotient+1,w
  2307  02AA  00B4               	movwf	?___aldiv+1
  2308  02AB  083E               	movf	___aldiv@quotient,w
  2309  02AC  00B3               	movwf	?___aldiv
  2310  02AD  0008               	return
  2311  02AE                     __end_of___aldiv:	
  2312                           
  2313                           	psect	text8
  2314  0496                     __ptext8:	
  2315 ;; *************** function ___lwdiv *****************
  2316 ;; Defined at:
  2317 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;  divisor         2    6[BANK0 ] unsigned int 
  2320 ;;  dividend        2    8[BANK0 ] unsigned int 
  2321 ;; Auto vars:     Size  Location     Type
  2322 ;;  quotient        2   11[BANK0 ] unsigned int 
  2323 ;;  counter         1   13[BANK0 ] unsigned char 
  2324 ;; Return value:  Size  Location     Type
  2325 ;;                  2    6[BANK0 ] unsigned int 
  2326 ;; Registers used:
  2327 ;;		wreg, status,2, status,0
  2328 ;; Tracked objects:
  2329 ;;		On entry : 0/0
  2330 ;;		On exit  : 0/0
  2331 ;;		Unchanged: 0/0
  2332 ;; Data sizes:     COMMON   BANK0   BANK1
  2333 ;;      Params:         0       4       0
  2334 ;;      Locals:         0       3       0
  2335 ;;      Temps:          0       1       0
  2336 ;;      Totals:         0       8       0
  2337 ;;Total ram usage:        8 bytes
  2338 ;; Hardware stack levels used:    1
  2339 ;; Hardware stack levels required when called:    3
  2340 ;; This function calls:
  2341 ;;		Nothing
  2342 ;; This function is called by:
  2343 ;;		_main
  2344 ;; This function uses a non-reentrant model
  2345 ;;
  2346                           
  2347                           
  2348                           ;psect for function ___lwdiv
  2349  0496                     ___lwdiv:	
  2350                           
  2351                           ;incstack = 0
  2352                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2353  0496  1283               	bcf	3,5	;RP0=0, select bank0
  2354  0497  1303               	bcf	3,6	;RP1=0, select bank0
  2355  0498  01AB               	clrf	___lwdiv@quotient
  2356  0499  01AC               	clrf	___lwdiv@quotient+1
  2357  049A  0826               	movf	___lwdiv@divisor,w
  2358  049B  0427               	iorwf	___lwdiv@divisor+1,w
  2359  049C  1903               	btfsc	3,2
  2360  049D  2CCF               	goto	l1427
  2361  049E  01AD               	clrf	___lwdiv@counter
  2362  049F  0AAD               	incf	___lwdiv@counter,f
  2363  04A0                     l1415:	
  2364  04A0  1BA7               	btfsc	___lwdiv@divisor+1,7
  2365  04A1  2CAE               	goto	l1417
  2366  04A2  3001               	movlw	1
  2367  04A3                     u985:	
  2368  04A3  1003               	clrc
  2369  04A4  0DA6               	rlf	___lwdiv@divisor,f
  2370  04A5  0DA7               	rlf	___lwdiv@divisor+1,f
  2371  04A6  3EFF               	addlw	-1
  2372  04A7  1D03               	skipz
  2373  04A8  2CA3               	goto	u985
  2374  04A9  3001               	movlw	1
  2375  04AA  00AA               	movwf	??___lwdiv
  2376  04AB  082A               	movf	??___lwdiv,w
  2377  04AC  07AD               	addwf	___lwdiv@counter,f
  2378  04AD  2CA0               	goto	l1415
  2379  04AE                     l1417:	
  2380  04AE  3001               	movlw	1
  2381  04AF                     u1005:	
  2382  04AF  1003               	clrc
  2383  04B0  0DAB               	rlf	___lwdiv@quotient,f
  2384  04B1  0DAC               	rlf	___lwdiv@quotient+1,f
  2385  04B2  3EFF               	addlw	-1
  2386  04B3  1D03               	skipz
  2387  04B4  2CAF               	goto	u1005
  2388  04B5  0827               	movf	___lwdiv@divisor+1,w
  2389  04B6  0229               	subwf	___lwdiv@dividend+1,w
  2390  04B7  1D03               	skipz
  2391  04B8  2CBB               	goto	u1015
  2392  04B9  0826               	movf	___lwdiv@divisor,w
  2393  04BA  0228               	subwf	___lwdiv@dividend,w
  2394  04BB                     u1015:	
  2395  04BB  1C03               	skipc
  2396  04BC  2CC4               	goto	l1423
  2397  04BD  0826               	movf	___lwdiv@divisor,w
  2398  04BE  02A8               	subwf	___lwdiv@dividend,f
  2399  04BF  0827               	movf	___lwdiv@divisor+1,w
  2400  04C0  1C03               	skipc
  2401  04C1  03A9               	decf	___lwdiv@dividend+1,f
  2402  04C2  02A9               	subwf	___lwdiv@dividend+1,f
  2403  04C3  142B               	bsf	___lwdiv@quotient,0
  2404  04C4                     l1423:	
  2405  04C4  3001               	movlw	1
  2406  04C5                     u1025:	
  2407  04C5  1003               	clrc
  2408  04C6  0CA7               	rrf	___lwdiv@divisor+1,f
  2409  04C7  0CA6               	rrf	___lwdiv@divisor,f
  2410  04C8  3EFF               	addlw	-1
  2411  04C9  1D03               	skipz
  2412  04CA  2CC5               	goto	u1025
  2413  04CB  3001               	movlw	1
  2414  04CC  02AD               	subwf	___lwdiv@counter,f
  2415  04CD  1D03               	btfss	3,2
  2416  04CE  2CAE               	goto	l1417
  2417  04CF                     l1427:	
  2418  04CF  082C               	movf	___lwdiv@quotient+1,w
  2419  04D0  00A7               	movwf	?___lwdiv+1
  2420  04D1  082B               	movf	___lwdiv@quotient,w
  2421  04D2  00A6               	movwf	?___lwdiv
  2422  04D3  0008               	return
  2423  04D4                     __end_of___lwdiv:	
  2424                           
  2425                           	psect	text9
  2426  05BE                     __ptext9:	
  2427 ;; *************** function _UART_vidInit *****************
  2428 ;; Defined at:
  2429 ;;		line 18 in file "UART_m.c"
  2430 ;; Parameters:    Size  Location     Type
  2431 ;;		None
  2432 ;; Auto vars:     Size  Location     Type
  2433 ;;		None
  2434 ;; Return value:  Size  Location     Type
  2435 ;;                  1    wreg      void 
  2436 ;; Registers used:
  2437 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2438 ;; Tracked objects:
  2439 ;;		On entry : 0/0
  2440 ;;		On exit  : 0/0
  2441 ;;		Unchanged: 0/0
  2442 ;; Data sizes:     COMMON   BANK0   BANK1
  2443 ;;      Params:         0       0       0
  2444 ;;      Locals:         0       0       0
  2445 ;;      Temps:          0       1       0
  2446 ;;      Totals:         0       1       0
  2447 ;;Total ram usage:        1 bytes
  2448 ;; Hardware stack levels used:    1
  2449 ;; Hardware stack levels required when called:    4
  2450 ;; This function calls:
  2451 ;;		_UART_u8GetNodeID
  2452 ;;		_UART_vidSend
  2453 ;; This function is called by:
  2454 ;;		_main
  2455 ;; This function uses a non-reentrant model
  2456 ;;
  2457                           
  2458                           
  2459                           ;psect for function _UART_vidInit
  2460  05BE                     _UART_vidInit:	
  2461                           
  2462                           ;UART_m.c: 20: BRGH = 0;
  2463                           
  2464                           ;incstack = 0
  2465                           ; Regs used in _UART_vidInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2466  05BE  1683               	bsf	3,5	;RP0=1, select bank1
  2467  05BF  1303               	bcf	3,6	;RP1=0, select bank1
  2468  05C0  1118               	bcf	24,2	;volatile
  2469                           
  2470                           ;UART_m.c: 21: SPBRG = (unsigned char)((((unsigned long)20000000 / 9600)/64) - 1);
  2471  05C1  301F               	movlw	31
  2472  05C2  0099               	movwf	25	;volatile
  2473                           
  2474                           ;UART_m.c: 22: SYNC = 0;
  2475  05C3  1218               	bcf	24,4	;volatile
  2476                           
  2477                           ;UART_m.c: 23: SPEN = 1;
  2478  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  2479  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  2480  05C6  1798               	bsf	24,7	;volatile
  2481                           
  2482                           ;UART_m.c: 24: TRISC6 = 1;
  2483  05C7  1683               	bsf	3,5	;RP0=1, select bank1
  2484  05C8  1303               	bcf	3,6	;RP1=0, select bank1
  2485  05C9  1707               	bsf	7,6	;volatile
  2486                           
  2487                           ;UART_m.c: 25: TRISC7 = 1;
  2488  05CA  1787               	bsf	7,7	;volatile
  2489                           
  2490                           ;UART_m.c: 26: TXEN = 1;
  2491  05CB  1698               	bsf	24,5	;volatile
  2492                           
  2493                           ;UART_m.c: 27: RCIE = 1;
  2494  05CC  168C               	bsf	12,5	;volatile
  2495                           
  2496                           ;UART_m.c: 28: PEIE = 1;
  2497  05CD  170B               	bsf	11,6	;volatile
  2498                           
  2499                           ;UART_m.c: 29: GIE = 1;
  2500  05CE  178B               	bsf	11,7	;volatile
  2501                           
  2502                           ;UART_m.c: 30: CREN = 1;
  2503  05CF  1283               	bcf	3,5	;RP0=0, select bank0
  2504  05D0  1303               	bcf	3,6	;RP1=0, select bank0
  2505  05D1  1618               	bsf	24,4	;volatile
  2506                           
  2507                           ;UART_m.c: 32: ECU_ID = UART_u8GetNodeID();
  2508  05D2  2620               	fcall	_UART_u8GetNodeID
  2509  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  2510  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  2511  05D5  00AC               	movwf	??_UART_vidInit
  2512  05D6  082C               	movf	??_UART_vidInit,w
  2513  05D7  00E8               	movwf	_ECU_ID
  2514                           
  2515                           ;UART_m.c: 33: UART_vidSend(&ECU_ID,1);
  2516  05D8  01A6               	clrf	UART_vidSend@Len
  2517  05D9  0AA6               	incf	UART_vidSend@Len,f
  2518  05DA  3068               	movlw	(low (_ECU_ID| 0))& (0+255)
  2519  05DB  256B               	fcall	_UART_vidSend
  2520  05DC  0008               	return
  2521  05DD                     __end_of_UART_vidInit:	
  2522                           
  2523                           	psect	text10
  2524  056B                     __ptext10:	
  2525 ;; *************** function _UART_vidSend *****************
  2526 ;; Defined at:
  2527 ;;		line 64 in file "UART_m.c"
  2528 ;; Parameters:    Size  Location     Type
  2529 ;;  data            1    wreg     const PTR const unsigned
  2530 ;;		 -> ECU_ID(1), Data_Buffer(12), 
  2531 ;;  Len             1    6[BANK0 ] const unsigned char 
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;  data            1    9[BANK0 ] const PTR const unsigned
  2534 ;;		 -> ECU_ID(1), Data_Buffer(12), 
  2535 ;;  UART_u16Inde    2   10[BANK0 ] unsigned short 
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMMON   BANK0   BANK1
  2545 ;;      Params:         0       1       0
  2546 ;;      Locals:         0       3       0
  2547 ;;      Temps:          0       2       0
  2548 ;;      Totals:         0       6       0
  2549 ;;Total ram usage:        6 bytes
  2550 ;; Hardware stack levels used:    1
  2551 ;; Hardware stack levels required when called:    3
  2552 ;; This function calls:
  2553 ;;		Nothing
  2554 ;; This function is called by:
  2555 ;;		_UART_vidInit
  2556 ;; This function uses a non-reentrant model
  2557 ;;
  2558                           
  2559                           
  2560                           ;psect for function _UART_vidSend
  2561  056B                     _UART_vidSend:	
  2562                           
  2563                           ;incstack = 0
  2564                           ; Regs used in _UART_vidSend: [wreg-fsr0h+status,2+status,0]
  2565                           ;UART_vidSend@data stored from wreg
  2566  056B  1283               	bcf	3,5	;RP0=0, select bank0
  2567  056C  1303               	bcf	3,6	;RP1=0, select bank0
  2568  056D  00A9               	movwf	UART_vidSend@data
  2569                           
  2570                           ;UART_m.c: 66: unsigned short UART_u16Index = 0;
  2571  056E  01AA               	clrf	UART_vidSend@UART_u16Index
  2572  056F  01AB               	clrf	UART_vidSend@UART_u16Index+1
  2573                           
  2574                           ;UART_m.c: 68: for(UART_u16Index = 0; UART_u16Index < Len; UART_u16Index++)
  2575  0570  01AA               	clrf	UART_vidSend@UART_u16Index
  2576  0571  01AB               	clrf	UART_vidSend@UART_u16Index+1
  2577  0572  0826               	movf	UART_vidSend@Len,w
  2578  0573  00A7               	movwf	??_UART_vidSend
  2579  0574  01A8               	clrf	??_UART_vidSend+1
  2580  0575  0828               	movf	??_UART_vidSend+1,w
  2581  0576  022B               	subwf	UART_vidSend@UART_u16Index+1,w
  2582  0577  1D03               	skipz
  2583  0578  2D7B               	goto	u545
  2584  0579  0827               	movf	??_UART_vidSend,w
  2585  057A  022A               	subwf	UART_vidSend@UART_u16Index,w
  2586  057B                     u545:	
  2587  057B  1803               	btfsc	3,0
  2588  057C  2D98               	goto	l142
  2589  057D                     l143:	
  2590                           ;UART_m.c: 69: {
  2591                           ;UART_m.c: 70: while(PIR1bits.TXIF == 0);
  2592                           
  2593  057D  1E0C               	btfss	12,4	;volatile
  2594  057E  2D7D               	goto	l143
  2595                           
  2596                           ;UART_m.c: 71: TXREG = data[UART_u16Index];
  2597  057F  082A               	movf	UART_vidSend@UART_u16Index,w
  2598  0580  0729               	addwf	UART_vidSend@data,w
  2599  0581  00A7               	movwf	??_UART_vidSend
  2600  0582  0827               	movf	??_UART_vidSend,w
  2601  0583  0084               	movwf	4
  2602  0584  1383               	bcf	3,7	;select IRP bank0
  2603  0585  0800               	movf	0,w
  2604  0586  0099               	movwf	25	;volatile
  2605  0587  3001               	movlw	1
  2606  0588  07AA               	addwf	UART_vidSend@UART_u16Index,f
  2607  0589  1803               	skipnc
  2608  058A  0AAB               	incf	UART_vidSend@UART_u16Index+1,f
  2609  058B  3000               	movlw	0
  2610  058C  07AB               	addwf	UART_vidSend@UART_u16Index+1,f
  2611  058D  0826               	movf	UART_vidSend@Len,w
  2612  058E  00A7               	movwf	??_UART_vidSend
  2613  058F  01A8               	clrf	??_UART_vidSend+1
  2614  0590  0828               	movf	??_UART_vidSend+1,w
  2615  0591  022B               	subwf	UART_vidSend@UART_u16Index+1,w
  2616  0592  1D03               	skipz
  2617  0593  2D96               	goto	u565
  2618  0594  0827               	movf	??_UART_vidSend,w
  2619  0595  022A               	subwf	UART_vidSend@UART_u16Index,w
  2620  0596                     u565:	
  2621  0596  1C03               	skipc
  2622  0597  2D7D               	goto	l143
  2623  0598                     l142:	
  2624                           
  2625                           ;UART_m.c: 72: }
  2626                           ;UART_m.c: 73: PIR1bits.TXIF = 0;
  2627  0598  120C               	bcf	12,4	;volatile
  2628  0599  0008               	return
  2629  059A                     __end_of_UART_vidSend:	
  2630                           
  2631                           	psect	text11
  2632  0620                     __ptext11:	
  2633 ;; *************** function _UART_u8GetNodeID *****************
  2634 ;; Defined at:
  2635 ;;		line 76 in file "UART_m.c"
  2636 ;; Parameters:    Size  Location     Type
  2637 ;;		None
  2638 ;; Auto vars:     Size  Location     Type
  2639 ;;		None
  2640 ;; Return value:  Size  Location     Type
  2641 ;;                  1    wreg      unsigned char 
  2642 ;; Registers used:
  2643 ;;		wreg, status,2
  2644 ;; Tracked objects:
  2645 ;;		On entry : 0/0
  2646 ;;		On exit  : 0/0
  2647 ;;		Unchanged: 0/0
  2648 ;; Data sizes:     COMMON   BANK0   BANK1
  2649 ;;      Params:         0       0       0
  2650 ;;      Locals:         0       0       0
  2651 ;;      Temps:          0       1       0
  2652 ;;      Totals:         0       1       0
  2653 ;;Total ram usage:        1 bytes
  2654 ;; Hardware stack levels used:    1
  2655 ;; Hardware stack levels required when called:    3
  2656 ;; This function calls:
  2657 ;;		Nothing
  2658 ;; This function is called by:
  2659 ;;		_UART_vidInit
  2660 ;; This function uses a non-reentrant model
  2661 ;;
  2662                           
  2663                           
  2664                           ;psect for function _UART_u8GetNodeID
  2665  0620                     _UART_u8GetNodeID:	
  2666                           
  2667                           ;UART_m.c: 78: Data_Buffer.ID = (PORTB & 0x7F);
  2668                           
  2669                           ;incstack = 0
  2670                           ; Regs used in _UART_u8GetNodeID: [wreg+status,2]
  2671  0620  1283               	bcf	3,5	;RP0=0, select bank0
  2672  0621  1303               	bcf	3,6	;RP1=0, select bank0
  2673  0622  0806               	movf	6,w	;volatile
  2674  0623  397F               	andlw	127
  2675  0624  00A6               	movwf	??_UART_u8GetNodeID
  2676  0625  0826               	movf	??_UART_u8GetNodeID,w
  2677  0626  1683               	bsf	3,5	;RP0=1, select bank1
  2678  0627  1303               	bcf	3,6	;RP1=0, select bank1
  2679  0628  00A0               	movwf	_Data_Buffer^(0+128)
  2680                           
  2681                           ;UART_m.c: 79: return Data_Buffer.ID;
  2682  0629  0820               	movf	_Data_Buffer^(0+128),w
  2683  062A  0008               	return
  2684  062B                     __end_of_UART_u8GetNodeID:	
  2685                           
  2686                           	psect	text12
  2687  0655                     __ptext12:	
  2688 ;; *************** function _I2CStop *****************
  2689 ;; Defined at:
  2690 ;;		line 64 in file "ADXL_m.c"
  2691 ;; Parameters:    Size  Location     Type
  2692 ;;		None
  2693 ;; Auto vars:     Size  Location     Type
  2694 ;;		None
  2695 ;; Return value:  Size  Location     Type
  2696 ;;                  1    wreg      void 
  2697 ;; Registers used:
  2698 ;;		None
  2699 ;; Tracked objects:
  2700 ;;		On entry : 0/0
  2701 ;;		On exit  : 0/0
  2702 ;;		Unchanged: 0/0
  2703 ;; Data sizes:     COMMON   BANK0   BANK1
  2704 ;;      Params:         0       0       0
  2705 ;;      Locals:         0       0       0
  2706 ;;      Temps:          0       0       0
  2707 ;;      Totals:         0       0       0
  2708 ;;Total ram usage:        0 bytes
  2709 ;; Hardware stack levels used:    1
  2710 ;; Hardware stack levels required when called:    3
  2711 ;; This function calls:
  2712 ;;		Nothing
  2713 ;; This function is called by:
  2714 ;;		_main
  2715 ;;		_E_Write
  2716 ;;		_E_Read
  2717 ;; This function uses a non-reentrant model
  2718 ;;
  2719                           
  2720                           
  2721                           ;psect for function _I2CStop
  2722  0655                     _I2CStop:	
  2723                           
  2724                           ;ADXL_m.c: 66: PEN = 1;
  2725                           
  2726                           ;incstack = 0
  2727                           ; Regs used in _I2CStop: []
  2728  0655  1683               	bsf	3,5	;RP0=1, select bank1
  2729  0656  1303               	bcf	3,6	;RP1=0, select bank1
  2730  0657  1511               	bsf	17,2	;volatile
  2731  0658                     l200:	
  2732                           ;ADXL_m.c: 67: while(PEN);
  2733                           
  2734  0658  1D11               	btfss	17,2	;volatile
  2735  0659  0008               	return
  2736  065A  2E58               	goto	l200
  2737  065B                     __end_of_I2CStop:	
  2738                           
  2739                           	psect	text13
  2740  065B                     __ptext13:	
  2741 ;; *************** function _I2CStart *****************
  2742 ;; Defined at:
  2743 ;;		line 51 in file "ADXL_m.c"
  2744 ;; Parameters:    Size  Location     Type
  2745 ;;		None
  2746 ;; Auto vars:     Size  Location     Type
  2747 ;;		None
  2748 ;; Return value:  Size  Location     Type
  2749 ;;                  1    wreg      void 
  2750 ;; Registers used:
  2751 ;;		None
  2752 ;; Tracked objects:
  2753 ;;		On entry : 0/0
  2754 ;;		On exit  : 0/0
  2755 ;;		Unchanged: 0/0
  2756 ;; Data sizes:     COMMON   BANK0   BANK1
  2757 ;;      Params:         0       0       0
  2758 ;;      Locals:         0       0       0
  2759 ;;      Temps:          0       0       0
  2760 ;;      Totals:         0       0       0
  2761 ;;Total ram usage:        0 bytes
  2762 ;; Hardware stack levels used:    1
  2763 ;; Hardware stack levels required when called:    3
  2764 ;; This function calls:
  2765 ;;		Nothing
  2766 ;; This function is called by:
  2767 ;;		_main
  2768 ;;		_E_Write
  2769 ;;		_E_Read
  2770 ;; This function uses a non-reentrant model
  2771 ;;
  2772                           
  2773                           
  2774                           ;psect for function _I2CStart
  2775  065B                     _I2CStart:	
  2776                           
  2777                           ;ADXL_m.c: 53: SEN = 1;
  2778                           
  2779                           ;incstack = 0
  2780                           ; Regs used in _I2CStart: []
  2781  065B  1683               	bsf	3,5	;RP0=1, select bank1
  2782  065C  1303               	bcf	3,6	;RP1=0, select bank1
  2783  065D  1411               	bsf	17,0	;volatile
  2784  065E                     l194:	
  2785                           ;ADXL_m.c: 54: while(SEN);
  2786                           
  2787  065E  1C11               	btfss	17,0	;volatile
  2788  065F  0008               	return
  2789  0660  2E5E               	goto	l194
  2790  0661                     __end_of_I2CStart:	
  2791                           
  2792                           	psect	text14
  2793  062B                     __ptext14:	
  2794 ;; *************** function _I2CSend *****************
  2795 ;; Defined at:
  2796 ;;		line 128 in file "ADXL_m.c"
  2797 ;; Parameters:    Size  Location     Type
  2798 ;;  dat             1    wreg     unsigned char 
  2799 ;; Auto vars:     Size  Location     Type
  2800 ;;  dat             1    6[BANK0 ] unsigned char 
  2801 ;; Return value:  Size  Location     Type
  2802 ;;                  1    wreg      void 
  2803 ;; Registers used:
  2804 ;;		wreg, status,2, status,0, pclath, cstack
  2805 ;; Tracked objects:
  2806 ;;		On entry : 0/0
  2807 ;;		On exit  : 0/0
  2808 ;;		Unchanged: 0/0
  2809 ;; Data sizes:     COMMON   BANK0   BANK1
  2810 ;;      Params:         0       0       0
  2811 ;;      Locals:         0       1       0
  2812 ;;      Temps:          0       0       0
  2813 ;;      Totals:         0       1       0
  2814 ;;Total ram usage:        1 bytes
  2815 ;; Hardware stack levels used:    1
  2816 ;; Hardware stack levels required when called:    4
  2817 ;; This function calls:
  2818 ;;		_I2CWait
  2819 ;; This function is called by:
  2820 ;;		_main
  2821 ;;		_E_Write
  2822 ;;		_E_Read
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           
  2827                           ;psect for function _I2CSend
  2828  062B                     _I2CSend:	
  2829                           
  2830                           ;incstack = 0
  2831                           ; Regs used in _I2CSend: [wreg+status,2+status,0+pclath+cstack]
  2832                           ;I2CSend@dat stored from wreg
  2833  062B  1283               	bcf	3,5	;RP0=0, select bank0
  2834  062C  1303               	bcf	3,6	;RP1=0, select bank0
  2835  062D  00A6               	movwf	I2CSend@dat
  2836                           
  2837                           ;ADXL_m.c: 130: SSPBUF = dat;
  2838  062E  0826               	movf	I2CSend@dat,w
  2839  062F  0093               	movwf	19	;volatile
  2840  0630                     l230:	
  2841                           ;ADXL_m.c: 131: while(BF);
  2842                           
  2843  0630  1683               	bsf	3,5	;RP0=1, select bank1
  2844  0631  1303               	bcf	3,6	;RP1=0, select bank1
  2845  0632  1814               	btfsc	20,0	;volatile
  2846  0633  2E30               	goto	l230
  2847                           
  2848                           ;ADXL_m.c: 132: I2CWait();
  2849  0634  2636               	fcall	_I2CWait
  2850  0635  0008               	return
  2851  0636                     __end_of_I2CSend:	
  2852                           
  2853                           	psect	text15
  2854  0661                     __ptext15:	
  2855 ;; *************** function _I2CRestart *****************
  2856 ;; Defined at:
  2857 ;;		line 77 in file "ADXL_m.c"
  2858 ;; Parameters:    Size  Location     Type
  2859 ;;		None
  2860 ;; Auto vars:     Size  Location     Type
  2861 ;;		None
  2862 ;; Return value:  Size  Location     Type
  2863 ;;                  1    wreg      void 
  2864 ;; Registers used:
  2865 ;;		None
  2866 ;; Tracked objects:
  2867 ;;		On entry : 0/0
  2868 ;;		On exit  : 0/0
  2869 ;;		Unchanged: 0/0
  2870 ;; Data sizes:     COMMON   BANK0   BANK1
  2871 ;;      Params:         0       0       0
  2872 ;;      Locals:         0       0       0
  2873 ;;      Temps:          0       0       0
  2874 ;;      Totals:         0       0       0
  2875 ;;Total ram usage:        0 bytes
  2876 ;; Hardware stack levels used:    1
  2877 ;; Hardware stack levels required when called:    3
  2878 ;; This function calls:
  2879 ;;		Nothing
  2880 ;; This function is called by:
  2881 ;;		_main
  2882 ;;		_E_Read
  2883 ;; This function uses a non-reentrant model
  2884 ;;
  2885                           
  2886                           
  2887                           ;psect for function _I2CRestart
  2888  0661                     _I2CRestart:	
  2889                           
  2890                           ;ADXL_m.c: 79: RSEN = 1;
  2891                           
  2892                           ;incstack = 0
  2893                           ; Regs used in _I2CRestart: []
  2894  0661  1683               	bsf	3,5	;RP0=1, select bank1
  2895  0662  1303               	bcf	3,6	;RP1=0, select bank1
  2896  0663  1491               	bsf	17,1	;volatile
  2897  0664                     l206:	
  2898                           ;ADXL_m.c: 80: while(RSEN);
  2899                           
  2900  0664  1C91               	btfss	17,1	;volatile
  2901  0665  0008               	return
  2902  0666  2E64               	goto	l206
  2903  0667                     __end_of_I2CRestart:	
  2904                           
  2905                           	psect	text16
  2906  0603                     __ptext16:	
  2907 ;; *************** function _I2CRead *****************
  2908 ;; Defined at:
  2909 ;;		line 141 in file "ADXL_m.c"
  2910 ;; Parameters:    Size  Location     Type
  2911 ;;		None
  2912 ;; Auto vars:     Size  Location     Type
  2913 ;;  temp            1    7[BANK0 ] unsigned char 
  2914 ;; Return value:  Size  Location     Type
  2915 ;;                  1    wreg      unsigned char 
  2916 ;; Registers used:
  2917 ;;		wreg, status,2, status,0, pclath, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMMON   BANK0   BANK1
  2923 ;;      Params:         0       0       0
  2924 ;;      Locals:         0       1       0
  2925 ;;      Temps:          0       1       0
  2926 ;;      Totals:         0       2       0
  2927 ;;Total ram usage:        2 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    4
  2930 ;; This function calls:
  2931 ;;		_I2CWait
  2932 ;; This function is called by:
  2933 ;;		_main
  2934 ;;		_E_Read
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           
  2939                           ;psect for function _I2CRead
  2940  0603                     _I2CRead:	
  2941                           
  2942                           ;ADXL_m.c: 143: unsigned char temp;
  2943                           ;ADXL_m.c: 145: RCEN = 1;
  2944                           
  2945                           ;incstack = 0
  2946                           ; Regs used in _I2CRead: [wreg+status,2+status,0+pclath+cstack]
  2947  0603  1683               	bsf	3,5	;RP0=1, select bank1
  2948  0604  1303               	bcf	3,6	;RP1=0, select bank1
  2949  0605  1591               	bsf	17,3	;volatile
  2950  0606                     l236:	
  2951                           ;ADXL_m.c: 146: while(!BF);
  2952                           
  2953  0606  1C14               	btfss	20,0	;volatile
  2954  0607  2E06               	goto	l236
  2955                           
  2956                           ;ADXL_m.c: 147: temp = SSPBUF;
  2957  0608  1283               	bcf	3,5	;RP0=0, select bank0
  2958  0609  1303               	bcf	3,6	;RP1=0, select bank0
  2959  060A  0813               	movf	19,w	;volatile
  2960  060B  00A6               	movwf	??_I2CRead
  2961  060C  0826               	movf	??_I2CRead,w
  2962  060D  00A7               	movwf	I2CRead@temp
  2963                           
  2964                           ;ADXL_m.c: 148: I2CWait();
  2965  060E  2636               	fcall	_I2CWait
  2966                           
  2967                           ;ADXL_m.c: 149: return temp;
  2968  060F  1283               	bcf	3,5	;RP0=0, select bank0
  2969  0610  1303               	bcf	3,6	;RP1=0, select bank0
  2970  0611  0827               	movf	I2CRead@temp,w
  2971  0612  0008               	return
  2972  0613                     __end_of_I2CRead:	
  2973                           
  2974                           	psect	text17
  2975  0636                     __ptext17:	
  2976 ;; *************** function _I2CWait *****************
  2977 ;; Defined at:
  2978 ;;		line 115 in file "ADXL_m.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;		None
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;		None
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, status,2
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMMON   BANK0   BANK1
  2992 ;;      Params:         0       0       0
  2993 ;;      Locals:         0       0       0
  2994 ;;      Temps:          0       0       0
  2995 ;;      Totals:         0       0       0
  2996 ;;Total ram usage:        0 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    3
  2999 ;; This function calls:
  3000 ;;		Nothing
  3001 ;; This function is called by:
  3002 ;;		_I2CSend
  3003 ;;		_I2CRead
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           
  3008                           ;psect for function _I2CWait
  3009  0636                     _I2CWait:	
  3010  0636                     l1195:	
  3011                           ;ADXL_m.c: 117: while ((SSPCON2 & 0x1F ) || ( SSPSTAT & 0x04 ) );
  3012                           
  3013                           ;incstack = 0
  3014                           ; Regs used in _I2CWait: [wreg+status,2]
  3015                           
  3016  0636  1683               	bsf	3,5	;RP0=1, select bank1
  3017  0637  1303               	bcf	3,6	;RP1=0, select bank1
  3018  0638  0811               	movf	17,w	;volatile
  3019  0639  391F               	andlw	31
  3020  063A  1D03               	btfss	3,2
  3021  063B  2E36               	goto	l1195
  3022  063C  1D14               	btfss	20,2	;volatile
  3023  063D  0008               	return
  3024  063E  2E36               	goto	l1195
  3025  063F                     __end_of_I2CWait:	
  3026                           
  3027                           	psect	text18
  3028  0647                     __ptext18:	
  3029 ;; *************** function _I2CNak *****************
  3030 ;; Defined at:
  3031 ;;		line 102 in file "ADXL_m.c"
  3032 ;; Parameters:    Size  Location     Type
  3033 ;;		None
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;		None
  3036 ;; Return value:  Size  Location     Type
  3037 ;;                  1    wreg      void 
  3038 ;; Registers used:
  3039 ;;		None
  3040 ;; Tracked objects:
  3041 ;;		On entry : 0/0
  3042 ;;		On exit  : 0/0
  3043 ;;		Unchanged: 0/0
  3044 ;; Data sizes:     COMMON   BANK0   BANK1
  3045 ;;      Params:         0       0       0
  3046 ;;      Locals:         0       0       0
  3047 ;;      Temps:          0       0       0
  3048 ;;      Totals:         0       0       0
  3049 ;;Total ram usage:        0 bytes
  3050 ;; Hardware stack levels used:    1
  3051 ;; Hardware stack levels required when called:    3
  3052 ;; This function calls:
  3053 ;;		Nothing
  3054 ;; This function is called by:
  3055 ;;		_main
  3056 ;;		_E_Read
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           
  3061                           ;psect for function _I2CNak
  3062  0647                     _I2CNak:	
  3063                           
  3064                           ;ADXL_m.c: 104: ACKDT = 1;
  3065                           
  3066                           ;incstack = 0
  3067                           ; Regs used in _I2CNak: []
  3068  0647  1683               	bsf	3,5	;RP0=1, select bank1
  3069  0648  1303               	bcf	3,6	;RP1=0, select bank1
  3070  0649  1691               	bsf	17,5	;volatile
  3071                           
  3072                           ;ADXL_m.c: 105: ACKEN = 1;
  3073  064A  1611               	bsf	17,4	;volatile
  3074  064B                     l218:	
  3075                           ;ADXL_m.c: 106: while(ACKEN);
  3076                           
  3077  064B  1E11               	btfss	17,4	;volatile
  3078  064C  0008               	return
  3079  064D  2E4B               	goto	l218
  3080  064E                     __end_of_I2CNak:	
  3081                           
  3082                           	psect	text19
  3083  05F0                     __ptext19:	
  3084 ;; *************** function _I2CInit *****************
  3085 ;; Defined at:
  3086 ;;		line 23 in file "ADXL_m.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;		None
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;		None
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg, status,2
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMMON   BANK0   BANK1
  3100 ;;      Params:         0       0       0
  3101 ;;      Locals:         0       0       0
  3102 ;;      Temps:          0       0       0
  3103 ;;      Totals:         0       0       0
  3104 ;;Total ram usage:        0 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    3
  3107 ;; This function calls:
  3108 ;;		Nothing
  3109 ;; This function is called by:
  3110 ;;		_main
  3111 ;; This function uses a non-reentrant model
  3112 ;;
  3113                           
  3114                           
  3115                           ;psect for function _I2CInit
  3116  05F0                     _I2CInit:	
  3117                           
  3118                           ;ADXL_m.c: 25: TRISCbits.TRISC3 = 1;
  3119                           
  3120                           ;incstack = 0
  3121                           ; Regs used in _I2CInit: [wreg+status,2]
  3122  05F0  1683               	bsf	3,5	;RP0=1, select bank1
  3123  05F1  1303               	bcf	3,6	;RP1=0, select bank1
  3124  05F2  1587               	bsf	7,3	;volatile
  3125                           
  3126                           ;ADXL_m.c: 26: TRISCbits.TRISC4 = 1;
  3127  05F3  1607               	bsf	7,4	;volatile
  3128                           
  3129                           ;ADXL_m.c: 27: SSPSTAT |= 0x80;
  3130  05F4  1794               	bsf	20,7	;volatile
  3131                           
  3132                           ;ADXL_m.c: 28: SSPCON = 0x28;
  3133  05F5  3028               	movlw	40
  3134  05F6  1283               	bcf	3,5	;RP0=0, select bank0
  3135  05F7  1303               	bcf	3,6	;RP1=0, select bank0
  3136  05F8  0094               	movwf	20	;volatile
  3137                           
  3138                           ;ADXL_m.c: 30: SSPCON2 = 0x00;
  3139  05F9  1683               	bsf	3,5	;RP0=1, select bank1
  3140  05FA  1303               	bcf	3,6	;RP1=0, select bank1
  3141  05FB  0191               	clrf	17	;volatile
  3142                           
  3143                           ;ADXL_m.c: 31: SSPADD = 49;
  3144  05FC  3031               	movlw	49
  3145  05FD  0093               	movwf	19	;volatile
  3146                           
  3147                           ;ADXL_m.c: 32: PIR1bits.SSPIF = 0;
  3148  05FE  1283               	bcf	3,5	;RP0=0, select bank0
  3149  05FF  1303               	bcf	3,6	;RP1=0, select bank0
  3150  0600  118C               	bcf	12,3	;volatile
  3151                           
  3152                           ;ADXL_m.c: 33: PIR2bits.BCLIF = 0;
  3153  0601  118D               	bcf	13,3	;volatile
  3154  0602  0008               	return
  3155  0603                     __end_of_I2CInit:	
  3156                           
  3157                           	psect	text20
  3158  064E                     __ptext20:	
  3159 ;; *************** function _I2CAck *****************
  3160 ;; Defined at:
  3161 ;;		line 89 in file "ADXL_m.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;		None
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;		None
  3166 ;; Return value:  Size  Location     Type
  3167 ;;                  1    wreg      void 
  3168 ;; Registers used:
  3169 ;;		None
  3170 ;; Tracked objects:
  3171 ;;		On entry : 0/0
  3172 ;;		On exit  : 0/0
  3173 ;;		Unchanged: 0/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1
  3175 ;;      Params:         0       0       0
  3176 ;;      Locals:         0       0       0
  3177 ;;      Temps:          0       0       0
  3178 ;;      Totals:         0       0       0
  3179 ;;Total ram usage:        0 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    3
  3182 ;; This function calls:
  3183 ;;		Nothing
  3184 ;; This function is called by:
  3185 ;;		_main
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           
  3190                           ;psect for function _I2CAck
  3191  064E                     _I2CAck:	
  3192                           
  3193                           ;ADXL_m.c: 91: ACKDT = 0;
  3194                           
  3195                           ;incstack = 0
  3196                           ; Regs used in _I2CAck: []
  3197  064E  1683               	bsf	3,5	;RP0=1, select bank1
  3198  064F  1303               	bcf	3,6	;RP1=0, select bank1
  3199  0650  1291               	bcf	17,5	;volatile
  3200                           
  3201                           ;ADXL_m.c: 92: ACKEN = 1;
  3202  0651  1611               	bsf	17,4	;volatile
  3203  0652                     l212:	
  3204                           ;ADXL_m.c: 93: while(ACKEN);
  3205                           
  3206  0652  1E11               	btfss	17,4	;volatile
  3207  0653  0008               	return
  3208  0654  2E52               	goto	l212
  3209  0655                     __end_of_I2CAck:	
  3210                           
  3211                           	psect	text21
  3212  059A                     __ptext21:	
  3213 ;; *************** function _UART_vidNewDataReceived *****************
  3214 ;; Defined at:
  3215 ;;		line 36 in file "UART_m.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;		None
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;		None
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  1    wreg      void 
  3222 ;; Registers used:
  3223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMMON   BANK0   BANK1
  3229 ;;      Params:         0       0       0
  3230 ;;      Locals:         0       0       0
  3231 ;;      Temps:          0       6       0
  3232 ;;      Totals:         0       6       0
  3233 ;;Total ram usage:        6 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    2
  3236 ;; This function calls:
  3237 ;;		_FinishBuffer
  3238 ;;		_Get_CRC8
  3239 ;;		_RS845_ManageState
  3240 ;; This function is called by:
  3241 ;;		Interrupt level 1
  3242 ;; This function uses a non-reentrant model
  3243 ;;
  3244                           
  3245                           
  3246                           ;psect for function _UART_vidNewDataReceived
  3247  059A                     _UART_vidNewDataReceived:	
  3248                           
  3249                           ;UART_m.c: 38: if(RCIF == 1)
  3250  059A  1E8C               	btfss	12,5	;volatile
  3251  059B  2DB3               	goto	i1l133
  3252                           
  3253                           ;UART_m.c: 39: {
  3254                           ;UART_m.c: 40: GIE = 0;
  3255  059C  138B               	bcf	11,7	;volatile
  3256                           
  3257                           ;UART_m.c: 41: ptrFinishBuffer();
  3258  059D  087D               	movf	_ptrFinishBuffer,w
  3259  059E  2101               	fcall	i1fptable
  3260                           
  3261                           ;UART_m.c: 42: Data_Buffer.CRC = Get_CRC8(&Data_Buffer.DATA_BUFFER[0],((unsigned char)12
      +                          ) - 1);
  3262  059F  300B               	movlw	11
  3263  05A0  1283               	bcf	3,5	;RP0=0, select bank0
  3264  05A1  1303               	bcf	3,6	;RP1=0, select bank0
  3265  05A2  00A0               	movwf	??_UART_vidNewDataReceived
  3266  05A3  0820               	movf	??_UART_vidNewDataReceived,w
  3267  05A4  00F0               	movwf	Get_CRC8@DataSize
  3268  05A5  30A0               	movlw	(low (_Data_Buffer| 0))& (0+255)
  3269  05A6  253A               	fcall	_Get_CRC8
  3270  05A7  1283               	bcf	3,5	;RP0=0, select bank0
  3271  05A8  1303               	bcf	3,6	;RP1=0, select bank0
  3272  05A9  00A1               	movwf	??_UART_vidNewDataReceived+1
  3273  05AA  0821               	movf	??_UART_vidNewDataReceived+1,w
  3274  05AB  1683               	bsf	3,5	;RP0=1, select bank1
  3275  05AC  1303               	bcf	3,6	;RP1=0, select bank1
  3276  05AD  00AB               	movwf	(_Data_Buffer^(0+128)+11)
  3277                           
  3278                           ;UART_m.c: 43: RS845_ManageState();
  3279  05AE  2613               	fcall	_RS845_ManageState
  3280                           
  3281                           ;UART_m.c: 44: GIE = 1;
  3282  05AF  178B               	bsf	11,7	;volatile
  3283                           
  3284                           ;UART_m.c: 45: RCIF = 0;
  3285  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  3286  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  3287  05B2  128C               	bcf	12,5	;volatile
  3288  05B3                     i1l133:	
  3289                           ;UART_m.c: 47: else
  3290                           ;UART_m.c: 48: {
  3291                           
  3292                           ;UART_m.c: 46: }
  3293                           
  3294  05B3  0825               	movf	??_UART_vidNewDataReceived+5,w
  3295  05B4  00FF               	movwf	127
  3296  05B5  0824               	movf	??_UART_vidNewDataReceived+4,w
  3297  05B6  008A               	movwf	10
  3298  05B7  0823               	movf	??_UART_vidNewDataReceived+3,w
  3299  05B8  0084               	movwf	4
  3300  05B9  0E22               	swapf	(??_UART_vidNewDataReceived+2)^0,w
  3301  05BA  0083               	movwf	3
  3302  05BB  0EFE               	swapf	126,f
  3303  05BC  0E7E               	swapf	126,w
  3304  05BD  0009               	retfie
  3305  05BE                     __end_of_UART_vidNewDataReceived:	
  3306                           
  3307                           	psect	intentry
  3308  0004                     __pintentry:	
  3309                           ;incstack = 0
  3310                           ; Regs used in _UART_vidNewDataReceived: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3311                           
  3312  0004                     interrupt_function:	
  3313  007E                     saved_w	set	btemp
  3314  0004  00FE               	movwf	btemp
  3315  0005  0E03               	swapf	3,w
  3316  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3317  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3318  0008  00A2               	movwf	??_UART_vidNewDataReceived+2
  3319  0009  0804               	movf	4,w
  3320  000A  00A3               	movwf	??_UART_vidNewDataReceived+3
  3321  000B  080A               	movf	10,w
  3322  000C  00A4               	movwf	??_UART_vidNewDataReceived+4
  3323  000D  087F               	movf	btemp+1,w
  3324  000E  00A5               	movwf	??_UART_vidNewDataReceived+5
  3325  000F  2D9A               	ljmp	_UART_vidNewDataReceived
  3326                           
  3327                           	psect	text22
  3328  0613                     __ptext22:	
  3329 ;; *************** function _RS845_ManageState *****************
  3330 ;; Defined at:
  3331 ;;		line 53 in file "UART_m.c"
  3332 ;; Parameters:    Size  Location     Type
  3333 ;;		None
  3334 ;; Auto vars:     Size  Location     Type
  3335 ;;		None
  3336 ;; Return value:  Size  Location     Type
  3337 ;;                  1    wreg      void 
  3338 ;; Registers used:
  3339 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3340 ;; Tracked objects:
  3341 ;;		On entry : 0/0
  3342 ;;		On exit  : 0/0
  3343 ;;		Unchanged: 0/0
  3344 ;; Data sizes:     COMMON   BANK0   BANK1
  3345 ;;      Params:         0       0       0
  3346 ;;      Locals:         0       0       0
  3347 ;;      Temps:          1       0       0
  3348 ;;      Totals:         1       0       0
  3349 ;;Total ram usage:        1 bytes
  3350 ;; Hardware stack levels used:    1
  3351 ;; Hardware stack levels required when called:    1
  3352 ;; This function calls:
  3353 ;;		i1_UART_vidSend
  3354 ;; This function is called by:
  3355 ;;		_UART_vidNewDataReceived
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           
  3360                           ;psect for function _RS845_ManageState
  3361  0613                     _RS845_ManageState:	
  3362                           
  3363                           ;UART_m.c: 55: if(RCREG == (unsigned char)ECU_ID)
  3364                           
  3365                           ;incstack = 0
  3366                           ; Regs used in _RS845_ManageState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3367  0613  1283               	bcf	3,5	;RP0=0, select bank0
  3368  0614  1303               	bcf	3,6	;RP1=0, select bank0
  3369  0615  081A               	movf	26,w	;volatile
  3370  0616  0668               	xorwf	_ECU_ID,w
  3371  0617  1D03               	skipz
  3372  0618  0008               	return
  3373                           
  3374                           ;UART_m.c: 56: {
  3375                           ;UART_m.c: 57: UART_vidSend(&Data_Buffer.DATA_BUFFER[0],((unsigned char)12));
  3376  0619  300C               	movlw	12
  3377  061A  00F6               	movwf	??_RS845_ManageState
  3378  061B  0876               	movf	??_RS845_ManageState,w
  3379  061C  00F0               	movwf	i1UART_vidSend@Len
  3380  061D  30A0               	movlw	(low (_Data_Buffer| 0))& (0+255)
  3381  061E  2509               	fcall	i1_UART_vidSend
  3382                           
  3383                           ;UART_m.c: 58: }
  3384  061F  0008               	return
  3385  0620                     __end_of_RS845_ManageState:	
  3386                           ;UART_m.c: 59: else
  3387                           ;UART_m.c: 60: {
  3388                           
  3389                           
  3390                           	psect	text23
  3391  0509                     __ptext23:	
  3392 ;; *************** function i1_UART_vidSend *****************
  3393 ;; Defined at:
  3394 ;;		line 64 in file "UART_m.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  data            1    wreg     const PTR const unsigned
  3397 ;;		 -> ECU_ID(1), Data_Buffer(12), 
  3398 ;;  Len             1    0[COMMON] const unsigned char 
  3399 ;; Auto vars:     Size  Location     Type
  3400 ;;  data            1    3[COMMON] const PTR const unsigned
  3401 ;;		 -> ECU_ID(1), Data_Buffer(12), 
  3402 ;;  UART_vidSend    2    4[COMMON] unsigned short 
  3403 ;; Return value:  Size  Location     Type
  3404 ;;                  1    wreg      void 
  3405 ;; Registers used:
  3406 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3407 ;; Tracked objects:
  3408 ;;		On entry : 0/0
  3409 ;;		On exit  : 0/0
  3410 ;;		Unchanged: 0/0
  3411 ;; Data sizes:     COMMON   BANK0   BANK1
  3412 ;;      Params:         1       0       0
  3413 ;;      Locals:         3       0       0
  3414 ;;      Temps:          2       0       0
  3415 ;;      Totals:         6       0       0
  3416 ;;Total ram usage:        6 bytes
  3417 ;; Hardware stack levels used:    1
  3418 ;; This function calls:
  3419 ;;		Nothing
  3420 ;; This function is called by:
  3421 ;;		_RS845_ManageState
  3422 ;; This function uses a non-reentrant model
  3423 ;;
  3424                           
  3425                           
  3426                           ;psect for function i1_UART_vidSend
  3427  0509                     i1_UART_vidSend:	
  3428                           
  3429                           ;incstack = 0
  3430                           ; Regs used in i1_UART_vidSend: [wreg-fsr0h+status,2+status,0]
  3431                           ;i1UART_vidSend@data stored from wreg
  3432  0509  00F3               	movwf	i1UART_vidSend@data
  3433                           
  3434                           ;UART_m.c: 66: unsigned short UART_u16Index = 0;
  3435  050A  01F4               	clrf	i1UART_vidSend@UART_u16Index
  3436  050B  01F5               	clrf	i1UART_vidSend@UART_u16Index+1
  3437                           
  3438                           ;UART_m.c: 68: for(UART_u16Index = 0; UART_u16Index < Len; UART_u16Index++)
  3439  050C  01F4               	clrf	i1UART_vidSend@UART_u16Index
  3440  050D  01F5               	clrf	i1UART_vidSend@UART_u16Index+1
  3441  050E  0870               	movf	i1UART_vidSend@Len,w
  3442  050F  00F1               	movwf	??i1_UART_vidSend
  3443  0510  01F2               	clrf	??i1_UART_vidSend+1
  3444  0511  0872               	movf	??i1_UART_vidSend+1,w
  3445  0512  0275               	subwf	i1UART_vidSend@UART_u16Index+1,w
  3446  0513  1D03               	skipz
  3447  0514  2D17               	goto	u74_25
  3448  0515  0871               	movf	??i1_UART_vidSend,w
  3449  0516  0274               	subwf	i1UART_vidSend@UART_u16Index,w
  3450  0517                     u74_25:	
  3451  0517  1803               	btfsc	3,0
  3452  0518  2D36               	goto	i1l142
  3453  0519                     i1l143:	
  3454                           ;UART_m.c: 69: {
  3455                           ;UART_m.c: 70: while(PIR1bits.TXIF == 0);
  3456                           
  3457  0519  1283               	bcf	3,5	;RP0=0, select bank0
  3458  051A  1303               	bcf	3,6	;RP1=0, select bank0
  3459  051B  1E0C               	btfss	12,4	;volatile
  3460  051C  2D19               	goto	i1l143
  3461                           
  3462                           ;UART_m.c: 71: TXREG = data[UART_u16Index];
  3463  051D  0874               	movf	i1UART_vidSend@UART_u16Index,w
  3464  051E  0773               	addwf	i1UART_vidSend@data,w
  3465  051F  00F1               	movwf	??i1_UART_vidSend
  3466  0520  0871               	movf	??i1_UART_vidSend,w
  3467  0521  0084               	movwf	4
  3468  0522  1383               	bcf	3,7	;select IRP bank0
  3469  0523  0800               	movf	0,w
  3470  0524  0099               	movwf	25	;volatile
  3471  0525  3001               	movlw	1
  3472  0526  07F4               	addwf	i1UART_vidSend@UART_u16Index,f
  3473  0527  1803               	skipnc
  3474  0528  0AF5               	incf	i1UART_vidSend@UART_u16Index+1,f
  3475  0529  3000               	movlw	0
  3476  052A  07F5               	addwf	i1UART_vidSend@UART_u16Index+1,f
  3477  052B  0870               	movf	i1UART_vidSend@Len,w
  3478  052C  00F1               	movwf	??i1_UART_vidSend
  3479  052D  01F2               	clrf	??i1_UART_vidSend+1
  3480  052E  0872               	movf	??i1_UART_vidSend+1,w
  3481  052F  0275               	subwf	i1UART_vidSend@UART_u16Index+1,w
  3482  0530  1D03               	skipz
  3483  0531  2D34               	goto	u76_25
  3484  0532  0871               	movf	??i1_UART_vidSend,w
  3485  0533  0274               	subwf	i1UART_vidSend@UART_u16Index,w
  3486  0534                     u76_25:	
  3487  0534  1C03               	skipc
  3488  0535  2D19               	goto	i1l143
  3489  0536                     i1l142:	
  3490                           
  3491                           ;UART_m.c: 72: }
  3492                           ;UART_m.c: 73: PIR1bits.TXIF = 0;
  3493  0536  1283               	bcf	3,5	;RP0=0, select bank0
  3494  0537  1303               	bcf	3,6	;RP1=0, select bank0
  3495  0538  120C               	bcf	12,4	;volatile
  3496  0539  0008               	return
  3497  053A                     __end_ofi1_UART_vidSend:	
  3498                           
  3499                           	psect	text24
  3500  053A                     __ptext24:	
  3501 ;; *************** function _Get_CRC8 *****************
  3502 ;; Defined at:
  3503 ;;		line 10 in file "CRC8.c"
  3504 ;; Parameters:    Size  Location     Type
  3505 ;;  Data            1    wreg     PTR unsigned char 
  3506 ;;		 -> Data_Buffer(12), 
  3507 ;;  DataSize        1    0[COMMON] unsigned char 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  Data            1    3[COMMON] PTR unsigned char 
  3510 ;;		 -> Data_Buffer(12), 
  3511 ;;  CRC             1    6[COMMON] unsigned char 
  3512 ;;  bitIndex        1    5[COMMON] unsigned char 
  3513 ;;  DataIndex       1    4[COMMON] unsigned char 
  3514 ;; Return value:  Size  Location     Type
  3515 ;;                  1    wreg      unsigned char 
  3516 ;; Registers used:
  3517 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3518 ;; Tracked objects:
  3519 ;;		On entry : 0/0
  3520 ;;		On exit  : 0/0
  3521 ;;		Unchanged: 0/0
  3522 ;; Data sizes:     COMMON   BANK0   BANK1
  3523 ;;      Params:         1       0       0
  3524 ;;      Locals:         4       0       0
  3525 ;;      Temps:          2       0       0
  3526 ;;      Totals:         7       0       0
  3527 ;;Total ram usage:        7 bytes
  3528 ;; Hardware stack levels used:    1
  3529 ;; This function calls:
  3530 ;;		Nothing
  3531 ;; This function is called by:
  3532 ;;		_UART_vidNewDataReceived
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           
  3537                           ;psect for function _Get_CRC8
  3538  053A                     _Get_CRC8:	
  3539                           
  3540                           ;incstack = 0
  3541                           ; Regs used in _Get_CRC8: [wreg-fsr0h+status,2+status,0]
  3542                           ;Get_CRC8@Data stored from wreg
  3543  053A  00F3               	movwf	Get_CRC8@Data
  3544                           
  3545                           ;CRC8.c: 12: unsigned char CRC = 0;
  3546  053B  01F6               	clrf	Get_CRC8@CRC
  3547                           
  3548                           ;CRC8.c: 13: char DataIndex,bitIndex;
  3549                           ;CRC8.c: 15: for(DataIndex = 0; DataIndex < DataSize; DataIndex++)
  3550  053C  01F4               	clrf	Get_CRC8@DataIndex
  3551  053D                     i1l1395:	
  3552  053D  0870               	movf	Get_CRC8@DataSize,w
  3553  053E  0274               	subwf	Get_CRC8@DataIndex,w
  3554  053F  1803               	btfsc	3,0
  3555  0540  2D69               	goto	i1l1397
  3556                           
  3557                           ;CRC8.c: 16: {
  3558                           ;CRC8.c: 18: CRC ^= Data[DataIndex];
  3559  0541  0874               	movf	Get_CRC8@DataIndex,w
  3560  0542  0773               	addwf	Get_CRC8@Data,w
  3561  0543  00F1               	movwf	??_Get_CRC8
  3562  0544  0871               	movf	??_Get_CRC8,w
  3563  0545  0084               	movwf	4
  3564  0546  1383               	bcf	3,7	;select IRP bank0
  3565  0547  0800               	movf	0,w
  3566  0548  00F2               	movwf	??_Get_CRC8+1
  3567  0549  0872               	movf	??_Get_CRC8+1,w
  3568  054A  06F6               	xorwf	Get_CRC8@CRC,f
  3569                           
  3570                           ;CRC8.c: 19: for(bitIndex = 0; bitIndex < 8; bitIndex++)
  3571  054B  01F5               	clrf	Get_CRC8@bitIndex
  3572  054C  3008               	movlw	8
  3573  054D  0275               	subwf	Get_CRC8@bitIndex,w
  3574  054E  1803               	btfsc	3,0
  3575  054F  2D64               	goto	i1l1393
  3576  0550                     i1l270:	
  3577                           
  3578                           ;CRC8.c: 20: {
  3579                           ;CRC8.c: 21: if((CRC & 0x80) != 0)
  3580  0550  1FF6               	btfss	Get_CRC8@CRC,7
  3581  0551  2D5A               	goto	i1l1387
  3582                           
  3583                           ;CRC8.c: 22: {
  3584                           ;CRC8.c: 23: CRC = (CRC << 1) ^ 0x1DU;
  3585  0552  0876               	movf	Get_CRC8@CRC,w
  3586  0553  00F1               	movwf	??_Get_CRC8
  3587  0554  0771               	addwf	??_Get_CRC8,w
  3588  0555  3A1D               	xorlw	29
  3589  0556  00F2               	movwf	??_Get_CRC8+1
  3590  0557  0872               	movf	??_Get_CRC8+1,w
  3591  0558  00F6               	movwf	Get_CRC8@CRC
  3592                           
  3593                           ;CRC8.c: 24: }
  3594  0559  2D5C               	goto	i1l1389
  3595  055A                     i1l1387:	
  3596                           
  3597                           ;CRC8.c: 25: else
  3598                           ;CRC8.c: 26: {
  3599                           ;CRC8.c: 27: CRC <<= 1;
  3600  055A  1003               	clrc
  3601  055B  0DF6               	rlf	Get_CRC8@CRC,f
  3602  055C                     i1l1389:	
  3603  055C  3001               	movlw	1
  3604  055D  00F1               	movwf	??_Get_CRC8
  3605  055E  0871               	movf	??_Get_CRC8,w
  3606  055F  07F5               	addwf	Get_CRC8@bitIndex,f
  3607  0560  3008               	movlw	8
  3608  0561  0275               	subwf	Get_CRC8@bitIndex,w
  3609  0562  1C03               	skipc
  3610  0563  2D50               	goto	i1l270
  3611  0564                     i1l1393:	
  3612  0564  3001               	movlw	1
  3613  0565  00F1               	movwf	??_Get_CRC8
  3614  0566  0871               	movf	??_Get_CRC8,w
  3615  0567  07F4               	addwf	Get_CRC8@DataIndex,f
  3616  0568  2D3D               	goto	i1l1395
  3617  0569                     i1l1397:	
  3618                           
  3619                           ;CRC8.c: 28: }
  3620                           ;CRC8.c: 29: }
  3621                           ;CRC8.c: 30: }
  3622                           ;CRC8.c: 32: return CRC;
  3623  0569  0876               	movf	Get_CRC8@CRC,w
  3624  056A  0008               	return
  3625  056B                     __end_of_Get_CRC8:	
  3626                           
  3627                           	psect	text25
  3628  0406                     __ptext25:	
  3629 ;; *************** function _FinishBuffer *****************
  3630 ;; Defined at:
  3631 ;;		line 116 in file "main.c"
  3632 ;; Parameters:    Size  Location     Type
  3633 ;;		None
  3634 ;; Auto vars:     Size  Location     Type
  3635 ;;		None
  3636 ;; Return value:  Size  Location     Type
  3637 ;;                  1    wreg      void 
  3638 ;; Registers used:
  3639 ;;		wreg, status,2, status,0, pclath, cstack
  3640 ;; Tracked objects:
  3641 ;;		On entry : 0/0
  3642 ;;		On exit  : 0/0
  3643 ;;		Unchanged: 0/0
  3644 ;; Data sizes:     COMMON   BANK0   BANK1
  3645 ;;      Params:         0       0       0
  3646 ;;      Locals:         0       0       0
  3647 ;;      Temps:          1       0       0
  3648 ;;      Totals:         1       0       0
  3649 ;;Total ram usage:        1 bytes
  3650 ;; Hardware stack levels used:    1
  3651 ;; Hardware stack levels required when called:    1
  3652 ;; This function calls:
  3653 ;;		_Get_Tempreture
  3654 ;; This function is called by:
  3655 ;;		_UART_vidNewDataReceived
  3656 ;; This function uses a non-reentrant model
  3657 ;;
  3658                           
  3659                           
  3660                           ;psect for function _FinishBuffer
  3661  0406                     _FinishBuffer:	
  3662                           
  3663                           ;main.c: 119: Data_Buffer.HX = XAVG>>8; Data_Buffer.LX=XAVG;
  3664                           
  3665                           ;incstack = 0
  3666                           ; Regs used in _FinishBuffer: [wreg+status,2+status,0+pclath+cstack]
  3667  0406  1283               	bcf	3,5	;RP0=0, select bank0
  3668  0407  1303               	bcf	3,6	;RP1=0, select bank0
  3669  0408  0867               	movf	_XAVG+1,w
  3670  0409  00FB               	movwf	??_FinishBuffer
  3671  040A  087B               	movf	??_FinishBuffer,w
  3672  040B  1683               	bsf	3,5	;RP0=1, select bank1
  3673  040C  1303               	bcf	3,6	;RP1=0, select bank1
  3674  040D  00A3               	movwf	(_Data_Buffer^(0+128)+3)
  3675  040E  1283               	bcf	3,5	;RP0=0, select bank0
  3676  040F  1303               	bcf	3,6	;RP1=0, select bank0
  3677  0410  0866               	movf	_XAVG,w
  3678  0411  00FB               	movwf	??_FinishBuffer
  3679  0412  087B               	movf	??_FinishBuffer,w
  3680  0413  1683               	bsf	3,5	;RP0=1, select bank1
  3681  0414  1303               	bcf	3,6	;RP1=0, select bank1
  3682  0415  00A4               	movwf	(_Data_Buffer^(0+128)+4)
  3683                           
  3684                           ;main.c: 120: Data_Buffer.HY = YAVG>>8; Data_Buffer.LY=YAVG;
  3685  0416  1283               	bcf	3,5	;RP0=0, select bank0
  3686  0417  1303               	bcf	3,6	;RP1=0, select bank0
  3687  0418  0865               	movf	_YAVG+1,w
  3688  0419  00FB               	movwf	??_FinishBuffer
  3689  041A  087B               	movf	??_FinishBuffer,w
  3690  041B  1683               	bsf	3,5	;RP0=1, select bank1
  3691  041C  1303               	bcf	3,6	;RP1=0, select bank1
  3692  041D  00A5               	movwf	(_Data_Buffer^(0+128)+5)
  3693  041E  1283               	bcf	3,5	;RP0=0, select bank0
  3694  041F  1303               	bcf	3,6	;RP1=0, select bank0
  3695  0420  0864               	movf	_YAVG,w
  3696  0421  00FB               	movwf	??_FinishBuffer
  3697  0422  087B               	movf	??_FinishBuffer,w
  3698  0423  1683               	bsf	3,5	;RP0=1, select bank1
  3699  0424  1303               	bcf	3,6	;RP1=0, select bank1
  3700  0425  00A6               	movwf	(_Data_Buffer^(0+128)+6)
  3701                           
  3702                           ;main.c: 121: Data_Buffer.HZ = ZAVG>>8; Data_Buffer.LZ=ZAVG;
  3703  0426  1283               	bcf	3,5	;RP0=0, select bank0
  3704  0427  1303               	bcf	3,6	;RP1=0, select bank0
  3705  0428  0863               	movf	_ZAVG+1,w
  3706  0429  00FB               	movwf	??_FinishBuffer
  3707  042A  087B               	movf	??_FinishBuffer,w
  3708  042B  1683               	bsf	3,5	;RP0=1, select bank1
  3709  042C  1303               	bcf	3,6	;RP1=0, select bank1
  3710  042D  00A7               	movwf	(_Data_Buffer^(0+128)+7)
  3711  042E  1283               	bcf	3,5	;RP0=0, select bank0
  3712  042F  1303               	bcf	3,6	;RP1=0, select bank0
  3713  0430  0862               	movf	_ZAVG,w
  3714  0431  00FB               	movwf	??_FinishBuffer
  3715  0432  087B               	movf	??_FinishBuffer,w
  3716  0433  1683               	bsf	3,5	;RP0=1, select bank1
  3717  0434  1303               	bcf	3,6	;RP1=0, select bank1
  3718  0435  00A8               	movwf	(_Data_Buffer^(0+128)+8)
  3719                           
  3720                           ;main.c: 122: Data_Buffer.HT = Get_Tempreture()>>8; Data_Buffer.LT = Get_Tempreture();
  3721  0436  24D4               	fcall	_Get_Tempreture
  3722  0437  0871               	movf	?_Get_Tempreture+1,w
  3723  0438  00FB               	movwf	??_FinishBuffer
  3724  0439  087B               	movf	??_FinishBuffer,w
  3725  043A  1683               	bsf	3,5	;RP0=1, select bank1
  3726  043B  1303               	bcf	3,6	;RP1=0, select bank1
  3727  043C  00A1               	movwf	(_Data_Buffer^(0+128)+1)
  3728  043D  24D4               	fcall	_Get_Tempreture
  3729  043E  0870               	movf	?_Get_Tempreture,w
  3730  043F  00FB               	movwf	??_FinishBuffer
  3731  0440  087B               	movf	??_FinishBuffer,w
  3732  0441  1683               	bsf	3,5	;RP0=1, select bank1
  3733  0442  1303               	bcf	3,6	;RP1=0, select bank1
  3734  0443  00A2               	movwf	(_Data_Buffer^(0+128)+2)
  3735                           
  3736                           ;main.c: 123: Data_Buffer.AVG_VibrationH = AVG>>8; Data_Buffer.AVG_VibrationL = AVG;
  3737  0444  1283               	bcf	3,5	;RP0=0, select bank0
  3738  0445  1303               	bcf	3,6	;RP1=0, select bank0
  3739  0446  0861               	movf	_AVG+1,w
  3740  0447  00FB               	movwf	??_FinishBuffer
  3741  0448  087B               	movf	??_FinishBuffer,w
  3742  0449  1683               	bsf	3,5	;RP0=1, select bank1
  3743  044A  1303               	bcf	3,6	;RP1=0, select bank1
  3744  044B  00A9               	movwf	(_Data_Buffer^(0+128)+9)
  3745  044C  1283               	bcf	3,5	;RP0=0, select bank0
  3746  044D  1303               	bcf	3,6	;RP1=0, select bank0
  3747  044E  0860               	movf	_AVG,w
  3748  044F  00FB               	movwf	??_FinishBuffer
  3749  0450  087B               	movf	??_FinishBuffer,w
  3750  0451  1683               	bsf	3,5	;RP0=1, select bank1
  3751  0452  1303               	bcf	3,6	;RP1=0, select bank1
  3752  0453  00AA               	movwf	(_Data_Buffer^(0+128)+10)
  3753  0454  0008               	return
  3754  0455                     __end_of_FinishBuffer:	
  3755                           
  3756                           	psect	text26
  3757  04D4                     __ptext26:	
  3758 ;; *************** function _Get_Tempreture *****************
  3759 ;; Defined at:
  3760 ;;		line 126 in file "main.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;		None
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;  Result          2    9[COMMON] unsigned short 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  2    0[COMMON] unsigned short 
  3767 ;; Registers used:
  3768 ;;		wreg, status,2, status,0
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMMON   BANK0   BANK1
  3774 ;;      Params:         2       0       0
  3775 ;;      Locals:         2       0       0
  3776 ;;      Temps:          7       0       0
  3777 ;;      Totals:        11       0       0
  3778 ;;Total ram usage:       11 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; This function calls:
  3781 ;;		Nothing
  3782 ;; This function is called by:
  3783 ;;		_FinishBuffer
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           
  3788                           ;psect for function _Get_Tempreture
  3789  04D4                     _Get_Tempreture:	
  3790                           
  3791                           ;main.c: 128: unsigned short Result = 0x0000;
  3792                           
  3793                           ;incstack = 0
  3794                           ; Regs used in _Get_Tempreture: [wreg+status,2+status,0]
  3795  04D4  01F9               	clrf	Get_Tempreture@Result
  3796  04D5  01FA               	clrf	Get_Tempreture@Result+1
  3797                           
  3798                           ;main.c: 130: ADCON0 |= 0x02;
  3799  04D6  1283               	bcf	3,5	;RP0=0, select bank0
  3800  04D7  1303               	bcf	3,6	;RP1=0, select bank0
  3801  04D8  149F               	bsf	31,1	;volatile
  3802                           
  3803                           ;main.c: 131: _delay((unsigned long)((10)*(20000000/4000.0)));
  3804  04D9  3041               	movlw	65
  3805  04DA  00F3               	movwf	??_Get_Tempreture+1
  3806  04DB  30EE               	movlw	238
  3807  04DC  00F2               	movwf	??_Get_Tempreture
  3808  04DD                     u109_27:	
  3809  04DD  0BF2               	decfsz	??_Get_Tempreture,f
  3810  04DE  2CDD               	goto	u109_27
  3811  04DF  0BF3               	decfsz	??_Get_Tempreture+1,f
  3812  04E0  2CDD               	goto	u109_27
  3813  04E1  0000               	nop
  3814                           
  3815                           ;main.c: 132: Result = ((unsigned short)ADRESH << 2)|((unsigned short)ADRESL >> 6);
  3816  04E2  1683               	bsf	3,5	;RP0=1, select bank1
  3817  04E3  1303               	bcf	3,6	;RP1=0, select bank1
  3818  04E4  081E               	movf	30,w	;volatile
  3819  04E5  00F2               	movwf	??_Get_Tempreture
  3820  04E6  3006               	movlw	6
  3821  04E7                     u53_25:	
  3822  04E7  1003               	clrc
  3823  04E8  0CF2               	rrf	??_Get_Tempreture,f
  3824  04E9  3EFF               	addlw	-1
  3825  04EA  1D03               	skipz
  3826  04EB  2CE7               	goto	u53_25
  3827  04EC  0872               	movf	??_Get_Tempreture,w
  3828  04ED  00F3               	movwf	??_Get_Tempreture+1
  3829  04EE  01F4               	clrf	??_Get_Tempreture+2
  3830  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  3831  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  3832  04F1  081E               	movf	30,w	;volatile
  3833  04F2  00F5               	movwf	??_Get_Tempreture+3
  3834  04F3  01F6               	clrf	??_Get_Tempreture+4
  3835  04F4  1003               	clrc
  3836  04F5  0DF5               	rlf	??_Get_Tempreture+3,f
  3837  04F6  0DF6               	rlf	??_Get_Tempreture+4,f
  3838  04F7  1003               	clrc
  3839  04F8  0DF5               	rlf	??_Get_Tempreture+3,f
  3840  04F9  0DF6               	rlf	??_Get_Tempreture+4,f
  3841  04FA  0873               	movf	??_Get_Tempreture+1,w
  3842  04FB  0475               	iorwf	??_Get_Tempreture+3,w
  3843  04FC  00F7               	movwf	??_Get_Tempreture+5
  3844  04FD  0874               	movf	??_Get_Tempreture+2,w
  3845  04FE  0476               	iorwf	??_Get_Tempreture+4,w
  3846  04FF  00F8               	movwf	??_Get_Tempreture+6
  3847  0500  0877               	movf	??_Get_Tempreture+5,w
  3848  0501  00F9               	movwf	Get_Tempreture@Result
  3849  0502  0878               	movf	??_Get_Tempreture+6,w
  3850  0503  00FA               	movwf	Get_Tempreture@Result+1
  3851                           
  3852                           ;main.c: 133: return Result;
  3853  0504  087A               	movf	Get_Tempreture@Result+1,w
  3854  0505  00F1               	movwf	?_Get_Tempreture+1
  3855  0506  0879               	movf	Get_Tempreture@Result,w
  3856  0507  00F0               	movwf	?_Get_Tempreture
  3857  0508  0008               	return
  3858  0509                     __end_of_Get_Tempreture:	
  3859  0002                     
  3860                           	psect	functab
  3861  0100                     __pfunctab:	
  3862  0100                     fptable:	
  3863  0100  2900               	goto	fptable	;no entries
  3864  0101                     __i1fptable:	
  3865  0101                     i1fptable:	
  3866  0101  00FF               	movwf	(btemp+1)& (0+127)
  3867  0102  3001               	movlw	high i1fptable
  3868  0103  008A               	movwf	10
  3869  0104  087F               	movf	(btemp+1)& (0+127),w
  3870  0105  0782               	addwf	2,f
  3871  0106                     i1fpbase:	
  3872  0106  2906               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
  3873  0107                     fp__FinishBuffer:	
  3874  0107  2C06               	ljmp	_FinishBuffer
  3875  0108                     __end_of__i1fptable:	
  3876  007E                     btemp	set	126	;btemp
  3877  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         29
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     56      73
    BANK1            32      0      12

Pointer List with Targets:

    Get_CRC8@Data	PTR unsigned char  size(1) Largest target is 12
		 -> Data_Buffer(BANK1[12]), 

    UART_vidSend@data	const PTR const unsigned char  size(1) Largest target is 12
		 -> ECU_ID(BANK0[1]), Data_Buffer(BANK1[12]), 

    ptrFinishBuffer	PTR FTN()void  size(1) Largest target is 1
		 -> FinishBuffer(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _UART_vidNewDataReceived in COMMON

    _UART_vidNewDataReceived->_FinishBuffer
    _RS845_ManageState->i1_UART_vidSend
    _FinishBuffer->_Get_Tempreture

Critical Paths under _main in BANK0

    _main->_get_average
    _main->_get_averageX
    _main->_get_averageY
    _main->_get_averageZ
    _get_averageZ->___aldiv
    _get_averageY->___aldiv
    _get_averageX->___aldiv
    _get_average->___aldiv
    ___aldiv->___lmul
    _UART_vidInit->_UART_vidSend

Critical Paths under _UART_vidNewDataReceived in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART_vidNewDataReceived in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0    7106
                                             40 BANK0     16    16      0
                             _I2CAck
                            _I2CInit
                             _I2CNak
                            _I2CRead
                         _I2CRestart
                            _I2CSend
                           _I2CStart
                            _I2CStop
                       _UART_vidInit
                            ___lwdiv
                        _get_average
                       _get_averageX
                       _get_averageY
                       _get_averageZ
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _get_averageZ                                         6     4      2    1502
                                             34 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _get_averageY                                         6     4      2    1502
                                             34 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _get_averageX                                         6     4      2    1502
                                             34 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _get_average                                          6     4      2    1502
                                             34 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     604
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     812
                                             19 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     546
                                              6 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_vidInit                                         1     1      0     297
                                             12 BANK0      1     1      0
                   _UART_u8GetNodeID
                       _UART_vidSend
 ---------------------------------------------------------------------------------
 (2) _UART_vidSend                                         6     5      1     297
                                              6 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _UART_u8GetNodeID                                     1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2CStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CSend                                              1     1      0      22
                                              6 BANK0      1     1      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (1) _I2CRestart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CRead                                              2     2      0      23
                                              6 BANK0      2     2      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (2) _I2CWait                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CNak                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CAck                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _UART_vidNewDataReceived                              6     6      0     485
                                              0 BANK0      6     6      0
                       _FinishBuffer *
                           _Get_CRC8
                  _RS845_ManageState
 ---------------------------------------------------------------------------------
 (4) _RS845_ManageState                                    1     1      0     161
                                              6 COMMON     1     1      0
                     i1_UART_vidSend
 ---------------------------------------------------------------------------------
 (5) i1_UART_vidSend                                       6     5      1     161
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (4) _Get_CRC8                                             7     6      1     300
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (4) _FinishBuffer                                         1     1      0      24
                                             11 COMMON     1     1      0
                     _Get_Tempreture
 ---------------------------------------------------------------------------------
 (5) _Get_Tempreture                                      11     9      2      24
                                              0 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2CAck
   _I2CInit
   _I2CNak
   _I2CRead
     _I2CWait
   _I2CRestart
   _I2CSend
     _I2CWait
   _I2CStart
   _I2CStop
   _UART_vidInit
     _UART_u8GetNodeID
     _UART_vidSend
   ___lwdiv
   _get_average
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _get_averageX
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _get_averageY
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _get_averageZ
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _system_init

 _UART_vidNewDataReceived (ROOT)
   _FinishBuffer *
     _Get_Tempreture
   _Get_CRC8 *
   _RS845_ManageState *
     i1_UART_vidSend

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       C       6       37.5%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     38      49       4       91.3%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      63       8        0.0%
ABS                  0      0      63       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Fri Feb 12 07:21:20 2021

       ??_UART_vidNewDataReceived 0020                                 pc 0002                       __CFG_CP$OFF 0000  
                              _BF 04A0                                fsr 0004               __size_of_I2CRestart 0006  
             __end_of_system_init 05F0                               l200 0658                               l212 0652  
                             l206 0664                               l230 0630                               l142 0598  
                             l143 057D                               l218 064B                               l236 0606  
                             l414 0231                               l194 065E                               _GIE 005F  
                             _AVG 0060                               _PEN 048A                      __CFG_CPD$OFF 0000  
                             u615 0477                               u545 057B                               u705 0279  
                             u625 047F                               u715 028B                               _SEN 0488  
                             u565 0596                               u910 03E7                               u911 03E8  
                             u912 03ED                               u913 03EE                               u905 03C4  
                             u850 0391                               u675 0256                               u851 0392  
                             u852 0397                               u853 0398                               u845 036E  
                             u870 033B                               u695 0264                               u871 033C  
                             u872 0341                               u873 0342                               u865 0318  
                             u890 02E5                               u891 02E6                               u892 02EB  
                             u893 02EC                               u885 02C2                               u985 04A3  
          __end_ofi1_UART_vidSend 053A                   __end_of_I2CInit 0603                   __end_of_I2CRead 0613  
                 __end_of_I2CSend 0636                               fsr0 0004                   __end_of_I2CWait 063F  
                             indf 0000                   __end_of_I2CStop 065B                      __CFG_FOSC$HS 0000  
                    __CFG_LVP$OFF 0000                              l1201 045F                              l1205 0475  
                            l1231 0252                              l1223 0242                              l1241 028A  
                            l1233 0262                              l1245 0297                              l1423 04C4  
                            l1415 04A0                              l1417 04AE                              l1249 02A5  
                            l1195 0636                              l1427 04CF                              l1485 0153  
                            _ANS3 0C43                              _BRGH 04C2                              _CREN 00C4  
                            u1005 04AF                              u1015 04BB                              u1025 04C5  
                            u1057 0119                              u1067 012B                              u1077 013D  
                            u1087 014F                              _PEIE 005E                              _RCIE 0465  
                            _RCEN 048B                              _RCIF 0065                              _SPEN 00C7  
                            _RSEN 0489                              _XAVG 0066                              _YAVG 0064  
                            _ZAVG 0062                              _TXEN 04C5                    ??_get_averageX 0044  
                            _SYNC 04C4                    ??_get_averageY 0044                    ??_get_averageZ 0044  
                            _WPUB 0095                      __CFG_WRT$OFF 0000                              _main 0108  
                            btemp 007E                  __end_of_I2CStart 0661                              start 0010  
                   __CFG_IESO$OFF 0000                     __CFG_MCLRE$ON 0000                       _Data_Buffer 00A0  
                 __end_of___aldiv 02AE                             ?_main 0070                             _ACKEN 048C  
                           _ACKDT 048D                     __CFG_WDTE$OFF 0000                   __end_of___lwdiv 04D4  
                           i1l133 05B3                             i1l142 0536                             i1l143 0519  
                           i1l270 0550                             _RCREG 001A                   ?i1_UART_vidSend 0070  
                           _SPBRG 0099                             _PORTB 0006                             u53_25 04E7  
                           _TRISB 0086                             u74_25 0517                             u76_25 0534  
                           _TXREG 0019               ___lmul@multiplicand 002A                    __CFG_FCMEN$OFF 0000  
                           main@X 004C                             main@Y 004E                             main@Z 0050  
                           fpbase 0000                    __CFG_BOREN$OFF 0000                             pclath 000A  
                           status 0003                             wtemp0 007E                  __end_of_Get_CRC8 056B  
         __size_of_Get_Tempreture 0035                   __initialization 0011                       _system_init 05DD  
                    __end_of_main 021F                         ??_I2CInit 0026                         ??_I2CRead 0026  
                       ??_I2CSend 0026                         ??_I2CWait 0026                         ??_I2CStop 0026  
                          ??_main 0048              __end_of_FinishBuffer 0455                            _ADCON0 001F  
                          _I2CAck 064E                            _I2CNak 0647                            _ADRESH 001E  
                          _ADRESL 009E                            _ANSELH 0189                            _ECU_ID 0068  
                    ??_I2CRestart 0026                            i1l1393 0564                            i1l1387 055A  
                          i1l1395 053D                            i1l1397 0569                            i1l1389 055C  
                          u109_27 04DD                        __i1fptable 0101                            _SSPADD 0093  
                          _TRISC0 0438                            _TRISC6 043E                            _TRISC7 043F  
                          _SSPCON 0014                            _SSPBUF 0013                   _ptrFinishBuffer 007D  
                  __CFG_PWRTE$OFF 0000              __size_of_get_average 0056                            ___lmul 0455  
                       ??___aldiv 003B                         ??___lwdiv 002A              __end_of_get_averageX 03B0  
            __end_of_get_averageY 035A              __end_of_get_averageZ 0304                            main@XH 0053  
                          main@YH 0054                            main@ZH 0056                            main@XL 0052  
                          main@YL 0055                            main@ZL 0057                __end_of_I2CRestart 0667  
                          fptable 0100                      __pdataCOMMON 007D                            fptotal 0000  
                       ?_I2CStart 0070                            saved_w 007E           __end_of__initialization 001D  
               ?_UART_u8GetNodeID 0070                    __pcstackCOMMON 0070                 get_average@OutPut 0058  
              ??_UART_u8GetNodeID 0026                    _OPTION_REGbits 0081                        ??_I2CStart 0026  
                       ?_Get_CRC8 0070                           ?_I2CAck 0070                           ?_I2CNak 0070  
                      __pbssBANK0 0058                        __pbssBANK1 00A0                   get_average@Data 0042  
                  _Get_Tempreture 04D4                        I2CSend@dat 0026                        __pmaintext 0108  
                         ?___lmul 0026                        __pintentry 0004                  ??i1_UART_vidSend 0071  
                         _I2CInit 05F0                           _I2CRead 0603                           _I2CSend 062B  
                         _I2CWait 0636                    ___lmul@product 002F                           _I2CStop 0655  
           __size_of_FinishBuffer 004F                   UART_vidSend@Len 0026                        ??_Get_CRC8 0071  
                         _SSPCON2 0091                   __size_of_I2CAck 0007                   __size_of_I2CNak 0007  
                         _SSPSTAT 0094            __end_of_Get_Tempreture 0509                           i1fpbase 0106  
        ?_UART_vidNewDataReceived 0070                      _FinishBuffer 0406                      ?_system_init 0070  
           __size_of_get_averageX 0056             __size_of_get_averageY 0056             __size_of_get_averageZ 0056  
                         ___aldiv 021F                   __size_of___lmul 0041                           ___lwdiv 0496  
                         __ptext1 05DD                           __ptext2 02AE                           __ptext3 0304  
                         __ptext4 035A                           __ptext5 03B0                           __ptext6 0455  
                         __ptext7 021F                           __ptext8 0496                           __ptext9 05BE  
             __size_of__i1fptable 0007                     ?_UART_vidInit 0070                     ?_UART_vidSend 0026  
                ___aldiv@dividend 0037                           clrloop0 0640              end_of_initialization 001D  
                 ?_Get_Tempreture 0070                      _get_averageX 035A                      _get_averageY 0304  
                    _get_averageZ 02AE                  Get_CRC8@DataSize 0070                   _RECEIVED_ECU_ID 007C  
                ___aldiv@quotient 003E                    ??_UART_vidInit 002C                    ??_UART_vidSend 0027  
                       _TRISCbits 0087                 __size_of_I2CStart 0006   __end_of_UART_vidNewDataReceived 05BE  
                  __end_of_I2CAck 0655                    __end_of_I2CNak 064E                     ??_get_average 0044  
                Get_CRC8@bitIndex 0075                    __end_of___lmul 0496                     __pidataCOMMON 0667  
              get_averageX@OutPut 005E               start_initialization 0011         __size_of_UART_u8GetNodeID 000B  
              get_averageY@OutPut 005C                get_averageZ@OutPut 005A                          ??_I2CAck 0026  
                        ??_I2CNak 0026                 __size_of_Get_CRC8 0031                      Get_CRC8@Data 0073  
                        ??___lmul 002E               __end_of_get_average 0406              __size_of_system_init 0013  
                        ?_I2CInit 0070                          ?_I2CRead 0070                          ?_I2CSend 0070  
                        ?_I2CWait 0070                          ?_I2CStop 0070         UART_vidSend@UART_u16Index 002A  
              __end_of__i1fptable 0108                       __pbssCOMMON 007C                         ___latbits 0000  
                   __pcstackBANK0 0020                  get_averageX@Data 0042                  get_averageY@Data 0042  
                get_averageZ@Data 0042                       I2CRead@temp 0027              __end_of_UART_vidInit 05DD  
            __end_of_UART_vidSend 059A                 _RS845_ManageState 0613                         __pnvBANK0 0068  
                ___lwdiv@dividend 0028                ?_RS845_ManageState 0070                         __pfunctab 0100  
                        ?___aldiv 0033                          ?___lwdiv 0026               ??_RS845_ManageState 0076  
__size_of_UART_vidNewDataReceived 0024                          _I2CStart 065B                  ??_Get_Tempreture 0072  
                ___lwdiv@quotient 002B                  UART_vidSend@data 0029         __end_of_RS845_ManageState 0620  
                 ___aldiv@divisor 0033                 interrupt_function 0004                   ___aldiv@counter 003C  
     i1UART_vidSend@UART_u16Index 0074                         clear_ram0 063F                       _get_average 03B0  
                        _PIR1bits 000C                          _PIR2bits 000D                  __size_of_I2CInit 0013  
                __size_of_I2CRead 0010                  __size_of_I2CSend 000B                  __size_of_I2CWait 0009  
                __size_of_I2CStop 0006                  _UART_u8GetNodeID 0620                          _Get_CRC8 053A  
         __size_ofi1_UART_vidSend 0031                          i1fptable 0101                 ___lmul@multiplier 0026  
                        i1fptotal 0002                        _I2CRestart 0661                       Get_CRC8@CRC 0076  
                __size_of___aldiv 008F                  __size_of___lwdiv 003E                   ___lwdiv@divisor 0026  
                 ___lwdiv@counter 002D                          __ptext10 056B                          __ptext11 0620  
                        __ptext20 064E                          __ptext12 0655                          __ptext21 059A  
                        __ptext13 065B                          __ptext22 0613                          __ptext14 062B  
                        __ptext23 0509                          __ptext15 0661                          __ptext24 053A  
                        __ptext16 0603                          __ptext25 0406                          __ptext17 0636  
                        __ptext26 04D4                          __ptext18 0647                          __ptext19 05F0  
               __CFG_BOR4V$BOR40V 0000             __size_of_UART_vidInit 001F             __size_of_UART_vidSend 002F  
      __size_of_RS845_ManageState 000D                   fp__FinishBuffer 0107                     __size_of_main 0117  
         _UART_vidNewDataReceived 059A                      _UART_vidInit 05BE                i1UART_vidSend@data 0073  
                    _UART_vidSend 056B                       ?_I2CRestart 0070                          intlevel1 0100  
               Get_CRC8@DataIndex 0074                     ?_FinishBuffer 0070                     ??_system_init 0026  
            Get_Tempreture@Result 0079                 i1UART_vidSend@Len 0070                      ___aldiv@sign 003D  
                  i1_UART_vidSend 0509                     ?_get_averageX 0042                     ?_get_averageY 0042  
                   ?_get_averageZ 0042                      ?_get_average 0042                    ??_FinishBuffer 007B  
        __end_of_UART_u8GetNodeID 062B  
