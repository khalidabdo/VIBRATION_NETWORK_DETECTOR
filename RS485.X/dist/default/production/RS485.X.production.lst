

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Wed Feb 03 01:18:28 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F882
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	functab,global,reloc=256,class=CODE,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 1.41
    49                           ; Generated 25/01/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F882 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000D                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0014                     	;# 
   103  0015                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  001D                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0087                     	;# 
   120  0089                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  008F                     	;# 
   125  0090                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0093                     	;# 
   130  0093                     	;# 
   131  0094                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  0105                     	;# 
   144  0107                     	;# 
   145  0108                     	;# 
   146  0109                     	;# 
   147  010C                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0185                     	;# 
   153  0187                     	;# 
   154  0188                     	;# 
   155  0189                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0009                     	;# 
   167  000A                     	;# 
   168  000B                     	;# 
   169  000C                     	;# 
   170  000D                     	;# 
   171  000E                     	;# 
   172  000E                     	;# 
   173  000F                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0013                     	;# 
   178  0014                     	;# 
   179  0015                     	;# 
   180  0015                     	;# 
   181  0016                     	;# 
   182  0017                     	;# 
   183  0018                     	;# 
   184  0019                     	;# 
   185  001A                     	;# 
   186  001B                     	;# 
   187  001B                     	;# 
   188  001C                     	;# 
   189  001D                     	;# 
   190  001E                     	;# 
   191  001F                     	;# 
   192  0081                     	;# 
   193  0085                     	;# 
   194  0086                     	;# 
   195  0087                     	;# 
   196  0089                     	;# 
   197  008C                     	;# 
   198  008D                     	;# 
   199  008E                     	;# 
   200  008F                     	;# 
   201  0090                     	;# 
   202  0091                     	;# 
   203  0092                     	;# 
   204  0093                     	;# 
   205  0093                     	;# 
   206  0093                     	;# 
   207  0094                     	;# 
   208  0095                     	;# 
   209  0096                     	;# 
   210  0097                     	;# 
   211  0098                     	;# 
   212  0099                     	;# 
   213  009A                     	;# 
   214  009B                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009E                     	;# 
   218  009F                     	;# 
   219  0105                     	;# 
   220  0107                     	;# 
   221  0108                     	;# 
   222  0109                     	;# 
   223  010C                     	;# 
   224  010C                     	;# 
   225  010D                     	;# 
   226  010E                     	;# 
   227  010F                     	;# 
   228  0185                     	;# 
   229  0187                     	;# 
   230  0188                     	;# 
   231  0189                     	;# 
   232  018C                     	;# 
   233  018D                     	;# 
   234  0000                     	;# 
   235  0001                     	;# 
   236  0002                     	;# 
   237  0003                     	;# 
   238  0004                     	;# 
   239  0005                     	;# 
   240  0006                     	;# 
   241  0007                     	;# 
   242  0009                     	;# 
   243  000A                     	;# 
   244  000B                     	;# 
   245  000C                     	;# 
   246  000D                     	;# 
   247  000E                     	;# 
   248  000E                     	;# 
   249  000F                     	;# 
   250  0010                     	;# 
   251  0011                     	;# 
   252  0012                     	;# 
   253  0013                     	;# 
   254  0014                     	;# 
   255  0015                     	;# 
   256  0015                     	;# 
   257  0016                     	;# 
   258  0017                     	;# 
   259  0018                     	;# 
   260  0019                     	;# 
   261  001A                     	;# 
   262  001B                     	;# 
   263  001B                     	;# 
   264  001C                     	;# 
   265  001D                     	;# 
   266  001E                     	;# 
   267  001F                     	;# 
   268  0081                     	;# 
   269  0085                     	;# 
   270  0086                     	;# 
   271  0087                     	;# 
   272  0089                     	;# 
   273  008C                     	;# 
   274  008D                     	;# 
   275  008E                     	;# 
   276  008F                     	;# 
   277  0090                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0093                     	;# 
   281  0093                     	;# 
   282  0093                     	;# 
   283  0094                     	;# 
   284  0095                     	;# 
   285  0096                     	;# 
   286  0097                     	;# 
   287  0098                     	;# 
   288  0099                     	;# 
   289  009A                     	;# 
   290  009B                     	;# 
   291  009C                     	;# 
   292  009D                     	;# 
   293  009E                     	;# 
   294  009F                     	;# 
   295  0105                     	;# 
   296  0107                     	;# 
   297  0108                     	;# 
   298  0109                     	;# 
   299  010C                     	;# 
   300  010C                     	;# 
   301  010D                     	;# 
   302  010E                     	;# 
   303  010F                     	;# 
   304  0185                     	;# 
   305  0187                     	;# 
   306  0188                     	;# 
   307  0189                     	;# 
   308  018C                     	;# 
   309  018D                     	;# 
   310  0000                     	;# 
   311  0001                     	;# 
   312  0002                     	;# 
   313  0003                     	;# 
   314  0004                     	;# 
   315  0005                     	;# 
   316  0006                     	;# 
   317  0007                     	;# 
   318  0009                     	;# 
   319  000A                     	;# 
   320  000B                     	;# 
   321  000C                     	;# 
   322  000D                     	;# 
   323  000E                     	;# 
   324  000E                     	;# 
   325  000F                     	;# 
   326  0010                     	;# 
   327  0011                     	;# 
   328  0012                     	;# 
   329  0013                     	;# 
   330  0014                     	;# 
   331  0015                     	;# 
   332  0015                     	;# 
   333  0016                     	;# 
   334  0017                     	;# 
   335  0018                     	;# 
   336  0019                     	;# 
   337  001A                     	;# 
   338  001B                     	;# 
   339  001B                     	;# 
   340  001C                     	;# 
   341  001D                     	;# 
   342  001E                     	;# 
   343  001F                     	;# 
   344  0081                     	;# 
   345  0085                     	;# 
   346  0086                     	;# 
   347  0087                     	;# 
   348  0089                     	;# 
   349  008C                     	;# 
   350  008D                     	;# 
   351  008E                     	;# 
   352  008F                     	;# 
   353  0090                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0093                     	;# 
   358  0093                     	;# 
   359  0094                     	;# 
   360  0095                     	;# 
   361  0096                     	;# 
   362  0097                     	;# 
   363  0098                     	;# 
   364  0099                     	;# 
   365  009A                     	;# 
   366  009B                     	;# 
   367  009C                     	;# 
   368  009D                     	;# 
   369  009E                     	;# 
   370  009F                     	;# 
   371  0105                     	;# 
   372  0107                     	;# 
   373  0108                     	;# 
   374  0109                     	;# 
   375  010C                     	;# 
   376  010C                     	;# 
   377  010D                     	;# 
   378  010E                     	;# 
   379  010F                     	;# 
   380  0185                     	;# 
   381  0187                     	;# 
   382  0188                     	;# 
   383  0189                     	;# 
   384  018C                     	;# 
   385  018D                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  000E                     	;# 
   401  000F                     	;# 
   402  0010                     	;# 
   403  0011                     	;# 
   404  0012                     	;# 
   405  0013                     	;# 
   406  0014                     	;# 
   407  0015                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  001D                     	;# 
   418  001E                     	;# 
   419  001F                     	;# 
   420  0081                     	;# 
   421  0085                     	;# 
   422  0086                     	;# 
   423  0087                     	;# 
   424  0089                     	;# 
   425  008C                     	;# 
   426  008D                     	;# 
   427  008E                     	;# 
   428  008F                     	;# 
   429  0090                     	;# 
   430  0091                     	;# 
   431  0092                     	;# 
   432  0093                     	;# 
   433  0093                     	;# 
   434  0093                     	;# 
   435  0094                     	;# 
   436  0095                     	;# 
   437  0096                     	;# 
   438  0097                     	;# 
   439  0098                     	;# 
   440  0099                     	;# 
   441  009A                     	;# 
   442  009B                     	;# 
   443  009C                     	;# 
   444  009D                     	;# 
   445  009E                     	;# 
   446  009F                     	;# 
   447  0105                     	;# 
   448  0107                     	;# 
   449  0108                     	;# 
   450  0109                     	;# 
   451  010C                     	;# 
   452  010C                     	;# 
   453  010D                     	;# 
   454  010E                     	;# 
   455  010F                     	;# 
   456  0185                     	;# 
   457  0187                     	;# 
   458  0188                     	;# 
   459  0189                     	;# 
   460  018C                     	;# 
   461  018D                     	;# 
   462                           
   463                           	psect	idataCOMMON
   464  06F3                     __pidataCOMMON:	
   465                           
   466                           ;initializer for _ptrFinishBuffer
   467  06F3  3401               	retlw	low (fp__FinishBuffer-i1fpbase)
   468                           
   469                           	psect	nvBANK0
   470  005C                     __pnvBANK0:	
   471  005C                     _ECU_ID:	
   472  005C                     	ds	1
   473  0013                     _SSPBUF	set	19
   474  000D                     _PIR2bits	set	13
   475  0014                     _SSPCON	set	20
   476  0006                     _PORTB	set	6
   477  0019                     _TXREG	set	25
   478  000C                     _PIR1bits	set	12
   479  001A                     _RCREG	set	26
   480  001E                     _ADRESH	set	30
   481  001F                     _ADCON0	set	31
   482  0065                     _RCIF	set	101
   483  00C4                     _CREN	set	196
   484  005F                     _GIE	set	95
   485  005E                     _PEIE	set	94
   486  00C7                     _SPEN	set	199
   487  0093                     _SSPADD	set	147
   488  0091                     _SSPCON2	set	145
   489  0094                     _SSPSTAT	set	148
   490  0087                     _TRISCbits	set	135
   491  0099                     _SPBRG	set	153
   492  009E                     _ADRESL	set	158
   493  0095                     _WPUB	set	149
   494  0086                     _TRISB	set	134
   495  0081                     _OPTION_REGbits	set	129
   496  048B                     _RCEN	set	1163
   497  04A0                     _BF	set	1184
   498  048C                     _ACKEN	set	1164
   499  048D                     _ACKDT	set	1165
   500  0489                     _RSEN	set	1161
   501  048A                     _PEN	set	1162
   502  0488                     _SEN	set	1160
   503  0465                     _RCIE	set	1125
   504  04C5                     _TXEN	set	1221
   505  043F                     _TRISC7	set	1087
   506  043E                     _TRISC6	set	1086
   507  04C4                     _SYNC	set	1220
   508  04C2                     _BRGH	set	1218
   509  0438                     _TRISC0	set	1080
   510  0189                     _ANSELH	set	393
   511  0C43                     _ANS3	set	3139
   512                           
   513                           ; #config settings
   514  0000                     
   515                           	psect	cinit
   516  0011                     start_initialization:	
   517  0011                     __initialization:	
   518                           
   519                           ; Initialize objects allocated to COMMON
   520  0011  26F3               	fcall	__pidataCOMMON	;fetch initializer
   521  0012  00FD               	movwf	__pdataCOMMON& (0+127)
   522                           
   523                           ; Clear objects allocated to BANK1
   524  0013  1383               	bcf	3,7	;select IRP bank0
   525  0014  30B2               	movlw	low __pbssBANK1
   526  0015  0084               	movwf	4
   527  0016  30BE               	movlw	low (__pbssBANK1+12)
   528  0017  26CB               	fcall	clear_ram0
   529                           
   530                           ; Clear objects allocated to BANK0
   531  0018  304C               	movlw	low __pbssBANK0
   532  0019  0084               	movwf	4
   533  001A  305C               	movlw	low (__pbssBANK0+16)
   534  001B  26CB               	fcall	clear_ram0
   535                           
   536                           ; Clear objects allocated to COMMON
   537  001C  01FC               	clrf	__pbssCOMMON& (0+127)
   538  001D                     end_of_initialization:	
   539                           ;End of C runtime variable initialization code
   540                           
   541  001D                     __end_of__initialization:	
   542  001D  0183               	clrf	3
   543  001E  2908               	ljmp	_main	;jump to C main() function
   544                           
   545                           	psect	bssCOMMON
   546  007C                     __pbssCOMMON:	
   547  007C                     _RECEIVED_ECU_ID:	
   548  007C                     	ds	1
   549                           
   550                           	psect	dataCOMMON
   551  007D                     __pdataCOMMON:	
   552  007D                     _ptrFinishBuffer:	
   553  007D                     	ds	1
   554                           
   555                           	psect	bssBANK0
   556  004C                     __pbssBANK0:	
   557  004C                     get_average@OutPut:	
   558  004C                     	ds	2
   559  004E                     get_averageZ@OutPut:	
   560  004E                     	ds	2
   561  0050                     get_averageY@OutPut:	
   562  0050                     	ds	2
   563  0052                     get_averageX@OutPut:	
   564  0052                     	ds	2
   565  0054                     _AVG:	
   566  0054                     	ds	2
   567  0056                     _ZAVG:	
   568  0056                     	ds	2
   569  0058                     _YAVG:	
   570  0058                     	ds	2
   571  005A                     _XAVG:	
   572  005A                     	ds	2
   573                           
   574                           	psect	bssBANK1
   575  00B2                     __pbssBANK1:	
   576  00B2                     _Data_Buffer:	
   577  00B2                     	ds	12
   578                           
   579                           	psect	clrtext
   580  06CB                     clear_ram0:	
   581                           ;	Called with FSR containing the base address, and
   582                           ;	W with the last address+1
   583                           
   584  06CB  0064               	clrwdt	;clear the watchdog before getting into this loop
   585  06CC                     clrloop0:	
   586  06CC  0180               	clrf	0	;clear RAM location pointed to by FSR
   587  06CD  0A84               	incf	4,f	;increment pointer
   588  06CE  0604               	xorwf	4,w	;XOR with final address
   589  06CF  1903               	btfsc	3,2	;have we reached the end yet?
   590  06D0  3400               	retlw	0	;all done for this memory range, return
   591  06D1  0604               	xorwf	4,w	;XOR again to restore value
   592  06D2  2ECC               	goto	clrloop0	;do the next byte
   593                           
   594                           	psect	cstackBANK1
   595  00A0                     __pcstackBANK1:	
   596  00A0                     main@id:	
   597                           
   598                           ; 2 bytes @ 0x0
   599  00A0                     	ds	2
   600  00A2                     main@pow:	
   601                           
   602                           ; 2 bytes @ 0x2
   603  00A2                     	ds	2
   604  00A4                     main@bw_rate:	
   605                           
   606                           ; 2 bytes @ 0x4
   607  00A4                     	ds	2
   608  00A6                     main@XL:	
   609                           
   610                           ; 1 bytes @ 0x6
   611  00A6                     	ds	1
   612  00A7                     main@XH:	
   613                           
   614                           ; 1 bytes @ 0x7
   615  00A7                     	ds	1
   616  00A8                     main@YH:	
   617                           
   618                           ; 1 bytes @ 0x8
   619  00A8                     	ds	1
   620  00A9                     main@YL:	
   621                           
   622                           ; 1 bytes @ 0x9
   623  00A9                     	ds	1
   624  00AA                     main@ZH:	
   625                           
   626                           ; 1 bytes @ 0xA
   627  00AA                     	ds	1
   628  00AB                     main@ZL:	
   629                           
   630                           ; 1 bytes @ 0xB
   631  00AB                     	ds	1
   632  00AC                     main@X:	
   633                           
   634                           ; 2 bytes @ 0xC
   635  00AC                     	ds	2
   636  00AE                     main@Y:	
   637                           
   638                           ; 2 bytes @ 0xE
   639  00AE                     	ds	2
   640  00B0                     main@Z:	
   641                           
   642                           ; 2 bytes @ 0x10
   643  00B0                     	ds	2
   644                           
   645                           	psect	cstackCOMMON
   646  0070                     __pcstackCOMMON:	
   647  0070                     ?_FinishBuffer:	
   648  0070                     ?_UART_vidInit:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0070                     ?_I2CInit:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0070                     ?_ini_adxl345:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0070                     ?_I2CStart:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0070                     ?_I2CSend:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0070                     ?_I2CRestart:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0070                     ?_I2CRead:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0070                     ?_I2CAck:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0070                     ?_I2CNak:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0070                     ?_I2CStop:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     ?_UART_u8GetNodeID:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0070                     ?_Get_CRC8:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0070                     ?_RS845_ManageState:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0070                     ?_UART_vidSend:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0070                     ?_system_init:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0070                     ?_main:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0070                     ?_UART_vidNewDataReceived:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0070                     ?_I2CWait:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0070                     ?_Get_Tempreture:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0070                     UART_vidSend@Len:	
   706                           ; 2 bytes @ 0x0
   707                           
   708  0070                     Get_CRC8@DataSize:	
   709                           ; 1 bytes @ 0x0
   710                           
   711                           
   712                           ; 1 bytes @ 0x0
   713  0070                     	ds	1
   714  0071                     ??_Get_CRC8:	
   715  0071                     ??_UART_vidSend:	
   716                           ; 1 bytes @ 0x1
   717                           
   718                           
   719                           ; 1 bytes @ 0x1
   720  0071                     	ds	1
   721  0072                     ??_Get_Tempreture:	
   722                           
   723                           ; 1 bytes @ 0x2
   724  0072                     	ds	1
   725  0073                     UART_vidSend@data:	
   726  0073                     Get_CRC8@Data:	
   727                           ; 1 bytes @ 0x3
   728                           
   729                           
   730                           ; 1 bytes @ 0x3
   731  0073                     	ds	1
   732  0074                     Get_CRC8@DataIndex:	
   733  0074                     UART_vidSend@UART_u16Index:	
   734                           ; 1 bytes @ 0x4
   735                           
   736                           
   737                           ; 2 bytes @ 0x4
   738  0074                     	ds	1
   739  0075                     Get_CRC8@bitIndex:	
   740                           
   741                           ; 1 bytes @ 0x5
   742  0075                     	ds	1
   743  0076                     ??_RS845_ManageState:	
   744  0076                     Get_CRC8@CRC:	
   745                           ; 1 bytes @ 0x6
   746                           
   747                           
   748                           ; 1 bytes @ 0x6
   749  0076                     	ds	3
   750  0079                     Get_Tempreture@Result:	
   751                           
   752                           ; 2 bytes @ 0x9
   753  0079                     	ds	2
   754  007B                     ??_FinishBuffer:	
   755                           
   756                           ; 1 bytes @ 0xB
   757  007B                     	ds	1
   758                           
   759                           	psect	cstackBANK0
   760  0020                     __pcstackBANK0:	
   761  0020                     ??_UART_vidNewDataReceived:	
   762                           
   763                           ; 1 bytes @ 0x0
   764  0020                     	ds	6
   765  0026                     ??_I2CInit:	
   766  0026                     ??_I2CStart:	
   767                           ; 1 bytes @ 0x6
   768                           
   769  0026                     ??_I2CSend:	
   770                           ; 1 bytes @ 0x6
   771                           
   772  0026                     ??_I2CRestart:	
   773                           ; 1 bytes @ 0x6
   774                           
   775  0026                     ??_I2CRead:	
   776                           ; 1 bytes @ 0x6
   777                           
   778  0026                     ??_I2CAck:	
   779                           ; 1 bytes @ 0x6
   780                           
   781  0026                     ??_I2CNak:	
   782                           ; 1 bytes @ 0x6
   783                           
   784  0026                     ??_I2CStop:	
   785                           ; 1 bytes @ 0x6
   786                           
   787  0026                     ??_UART_u8GetNodeID:	
   788                           ; 1 bytes @ 0x6
   789                           
   790  0026                     ??_system_init:	
   791                           ; 1 bytes @ 0x6
   792                           
   793  0026                     ??_I2CWait:	
   794                           ; 1 bytes @ 0x6
   795                           
   796  0026                     ?___lwdiv:	
   797                           ; 1 bytes @ 0x6
   798                           
   799  0026                     ?___lmul:	
   800                           ; 2 bytes @ 0x6
   801                           
   802  0026                     I2CSend@dat:	
   803                           ; 4 bytes @ 0x6
   804                           
   805  0026                     ___lwdiv@divisor:	
   806                           ; 1 bytes @ 0x6
   807                           
   808  0026                     ___lmul@multiplier:	
   809                           ; 2 bytes @ 0x6
   810                           
   811                           
   812                           ; 4 bytes @ 0x6
   813  0026                     	ds	1
   814  0027                     ??_UART_vidInit:	
   815  0027                     ?_E_Write:	
   816                           ; 1 bytes @ 0x7
   817                           
   818  0027                     I2CRead@temp:	
   819                           ; 1 bytes @ 0x7
   820                           
   821  0027                     E_Write@addr:	
   822                           ; 1 bytes @ 0x7
   823                           
   824                           
   825                           ; 2 bytes @ 0x7
   826  0027                     	ds	1
   827  0028                     ?_E_Read:	
   828  0028                     E_Read@addr:	
   829                           ; 1 bytes @ 0x8
   830                           
   831  0028                     ___lwdiv@dividend:	
   832                           ; 2 bytes @ 0x8
   833                           
   834                           
   835                           ; 2 bytes @ 0x8
   836  0028                     	ds	1
   837  0029                     E_Write@ch:	
   838                           
   839                           ; 1 bytes @ 0x9
   840  0029                     	ds	1
   841  002A                     ??_ini_adxl345:	
   842  002A                     ??_E_Read:	
   843                           ; 1 bytes @ 0xA
   844                           
   845  002A                     ??_E_Write:	
   846                           ; 1 bytes @ 0xA
   847                           
   848  002A                     ??___lwdiv:	
   849                           ; 1 bytes @ 0xA
   850                           
   851  002A                     ___lmul@multiplicand:	
   852                           ; 1 bytes @ 0xA
   853                           
   854                           
   855                           ; 4 bytes @ 0xA
   856  002A                     	ds	1
   857  002B                     E_Read@ch:	
   858  002B                     ___lwdiv@counter:	
   859                           ; 1 bytes @ 0xB
   860                           
   861                           
   862                           ; 1 bytes @ 0xB
   863  002B                     	ds	1
   864  002C                     ___lwdiv@quotient:	
   865                           
   866                           ; 2 bytes @ 0xC
   867  002C                     	ds	2
   868  002E                     ??___lmul:	
   869                           
   870                           ; 1 bytes @ 0xE
   871  002E                     	ds	1
   872  002F                     ___lmul@product:	
   873                           
   874                           ; 4 bytes @ 0xF
   875  002F                     	ds	4
   876  0033                     ?___aldiv:	
   877  0033                     ___aldiv@divisor:	
   878                           ; 4 bytes @ 0x13
   879                           
   880                           
   881                           ; 4 bytes @ 0x13
   882  0033                     	ds	4
   883  0037                     ___aldiv@dividend:	
   884                           
   885                           ; 4 bytes @ 0x17
   886  0037                     	ds	4
   887  003B                     ??___aldiv:	
   888                           
   889                           ; 1 bytes @ 0x1B
   890  003B                     	ds	1
   891  003C                     ___aldiv@counter:	
   892                           
   893                           ; 1 bytes @ 0x1C
   894  003C                     	ds	1
   895  003D                     ___aldiv@sign:	
   896                           
   897                           ; 1 bytes @ 0x1D
   898  003D                     	ds	1
   899  003E                     ___aldiv@quotient:	
   900                           
   901                           ; 4 bytes @ 0x1E
   902  003E                     	ds	4
   903  0042                     ?_get_averageX:	
   904  0042                     ?_get_averageY:	
   905                           ; 2 bytes @ 0x22
   906                           
   907  0042                     ?_get_averageZ:	
   908                           ; 2 bytes @ 0x22
   909                           
   910  0042                     ?_get_average:	
   911                           ; 2 bytes @ 0x22
   912                           
   913  0042                     get_averageX@Data:	
   914                           ; 2 bytes @ 0x22
   915                           
   916  0042                     get_averageY@Data:	
   917                           ; 2 bytes @ 0x22
   918                           
   919  0042                     get_averageZ@Data:	
   920                           ; 2 bytes @ 0x22
   921                           
   922  0042                     get_average@Data:	
   923                           ; 2 bytes @ 0x22
   924                           
   925                           
   926                           ; 2 bytes @ 0x22
   927  0042                     	ds	2
   928  0044                     ??_get_averageX:	
   929  0044                     ??_get_averageY:	
   930                           ; 1 bytes @ 0x24
   931                           
   932  0044                     ??_get_averageZ:	
   933                           ; 1 bytes @ 0x24
   934                           
   935  0044                     ??_get_average:	
   936                           ; 1 bytes @ 0x24
   937                           
   938                           
   939                           ; 1 bytes @ 0x24
   940  0044                     	ds	4
   941  0048                     ??_main:	
   942                           
   943                           ; 1 bytes @ 0x28
   944  0048                     	ds	4
   945                           
   946                           	psect	maintext
   947  0108                     __pmaintext:	
   948 ;;
   949 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   950 ;;
   951 ;; *************** function _main *****************
   952 ;; Defined at:
   953 ;;		line 29 in file "main.c"
   954 ;; Parameters:    Size  Location     Type
   955 ;;		None
   956 ;; Auto vars:     Size  Location     Type
   957 ;;  Z               2   16[BANK1 ] short 
   958 ;;  Y               2   14[BANK1 ] short 
   959 ;;  X               2   12[BANK1 ] short 
   960 ;;  bw_rate         2    4[BANK1 ] int 
   961 ;;  pow             2    2[BANK1 ] int 
   962 ;;  id              2    0[BANK1 ] int 
   963 ;;  ZL              1   11[BANK1 ] unsigned char 
   964 ;;  ZH              1   10[BANK1 ] unsigned char 
   965 ;;  YL              1    9[BANK1 ] unsigned char 
   966 ;;  YH              1    8[BANK1 ] unsigned char 
   967 ;;  XH              1    7[BANK1 ] unsigned char 
   968 ;;  XL              1    6[BANK1 ] unsigned char 
   969 ;; Return value:  Size  Location     Type
   970 ;;                  1    wreg      void 
   971 ;; Registers used:
   972 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   973 ;; Tracked objects:
   974 ;;		On entry : B00/0
   975 ;;		On exit  : 0/0
   976 ;;		Unchanged: 0/0
   977 ;; Data sizes:     COMMON   BANK0   BANK1
   978 ;;      Params:         0       0       0
   979 ;;      Locals:         0       0      18
   980 ;;      Temps:          0       4       0
   981 ;;      Totals:         0       4      18
   982 ;;Total ram usage:       22 bytes
   983 ;; Hardware stack levels required when called:    7
   984 ;; This function calls:
   985 ;;		_E_Read
   986 ;;		_I2CAck
   987 ;;		_I2CInit
   988 ;;		_I2CNak
   989 ;;		_I2CRead
   990 ;;		_I2CRestart
   991 ;;		_I2CSend
   992 ;;		_I2CStart
   993 ;;		_I2CStop
   994 ;;		_UART_vidInit
   995 ;;		___lwdiv
   996 ;;		_get_average
   997 ;;		_get_averageX
   998 ;;		_get_averageY
   999 ;;		_get_averageZ
  1000 ;;		_ini_adxl345
  1001 ;;		_system_init
  1002 ;; This function is called by:
  1003 ;;		Startup code after reset
  1004 ;; This function uses a non-reentrant model
  1005 ;;
  1006                           
  1007                           
  1008                           ;psect for function _main
  1009  0108                     _main:	
  1010                           
  1011                           ;main.c: 31: int id, pow, bw_rate;
  1012                           ;main.c: 32: char XL,XH,YH,YL,ZH,ZL;
  1013                           ;main.c: 33: short X, Y, Z;
  1014                           ;main.c: 35: system_init();
  1015                           
  1016                           ;incstack = 0
  1017                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1018  0108  265C               	fcall	_system_init
  1019                           
  1020                           ;main.c: 36: UART_vidInit();
  1021  0109  262B               	fcall	_UART_vidInit
  1022                           
  1023                           ;main.c: 39: I2CInit();
  1024  010A  266F               	fcall	_I2CInit
  1025                           
  1026                           ;main.c: 41: ini_adxl345();
  1027  010B  24A6               	fcall	_ini_adxl345
  1028                           
  1029                           ;main.c: 43: id = E_Read(0);
  1030  010C  3000               	movlw	0
  1031  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1032  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1033  010F  00A8               	movwf	E_Read@addr
  1034  0110  00A9               	movwf	E_Read@addr+1
  1035  0111  2646               	fcall	_E_Read
  1036  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1037  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1038  0114  00C8               	movwf	??_main
  1039  0115  01C9               	clrf	??_main+1
  1040  0116  0848               	movf	??_main,w
  1041  0117  1683               	bsf	3,5	;RP0=1, select bank1
  1042  0118  1303               	bcf	3,6	;RP1=0, select bank1
  1043  0119  00A0               	movwf	main@id^(0+128)
  1044  011A  1283               	bcf	3,5	;RP0=0, select bank0
  1045  011B  1303               	bcf	3,6	;RP1=0, select bank0
  1046  011C  0849               	movf	??_main+1,w
  1047  011D  1683               	bsf	3,5	;RP0=1, select bank1
  1048  011E  1303               	bcf	3,6	;RP1=0, select bank1
  1049  011F  00A1               	movwf	(main@id+1)^(0+128)
  1050                           
  1051                           ;main.c: 44: _delay((unsigned long)((10)*(20000000/4000.0)));
  1052  0120  3041               	movlw	65
  1053  0121  1283               	bcf	3,5	;RP0=0, select bank0
  1054  0122  1303               	bcf	3,6	;RP1=0, select bank0
  1055  0123  00C9               	movwf	??_main+1
  1056  0124  30EE               	movlw	238
  1057  0125  00C8               	movwf	??_main
  1058  0126                     u1387:	
  1059  0126  0BC8               	decfsz	??_main,f
  1060  0127  2926               	goto	u1387
  1061  0128  0BC9               	decfsz	??_main+1,f
  1062  0129  2926               	goto	u1387
  1063                           
  1064                           ;main.c: 45: pow = E_Read(0x2D);
  1065  012A  302D               	movlw	45
  1066  012B  1283               	bcf	3,5	;RP0=0, select bank0
  1067  012C  1303               	bcf	3,6	;RP1=0, select bank0
  1068  012D  00A8               	movwf	E_Read@addr
  1069  012E  3000               	movlw	0
  1070  012F  00A9               	movwf	E_Read@addr+1
  1071  0130  2646               	fcall	_E_Read
  1072  0131  1283               	bcf	3,5	;RP0=0, select bank0
  1073  0132  1303               	bcf	3,6	;RP1=0, select bank0
  1074  0133  00C8               	movwf	??_main
  1075  0134  01C9               	clrf	??_main+1
  1076  0135  0848               	movf	??_main,w
  1077  0136  1683               	bsf	3,5	;RP0=1, select bank1
  1078  0137  1303               	bcf	3,6	;RP1=0, select bank1
  1079  0138  00A2               	movwf	main@pow^(0+128)
  1080  0139  1283               	bcf	3,5	;RP0=0, select bank0
  1081  013A  1303               	bcf	3,6	;RP1=0, select bank0
  1082  013B  0849               	movf	??_main+1,w
  1083  013C  1683               	bsf	3,5	;RP0=1, select bank1
  1084  013D  1303               	bcf	3,6	;RP1=0, select bank1
  1085  013E  00A3               	movwf	(main@pow+1)^(0+128)
  1086                           
  1087                           ;main.c: 46: _delay((unsigned long)((10)*(20000000/4000.0)));
  1088  013F  3041               	movlw	65
  1089  0140  1283               	bcf	3,5	;RP0=0, select bank0
  1090  0141  1303               	bcf	3,6	;RP1=0, select bank0
  1091  0142  00C9               	movwf	??_main+1
  1092  0143  30EE               	movlw	238
  1093  0144  00C8               	movwf	??_main
  1094  0145                     u1397:	
  1095  0145  0BC8               	decfsz	??_main,f
  1096  0146  2945               	goto	u1397
  1097  0147  0BC9               	decfsz	??_main+1,f
  1098  0148  2945               	goto	u1397
  1099                           
  1100                           ;main.c: 47: bw_rate = E_Read(0x2C);
  1101  0149  302C               	movlw	44
  1102  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1103  014B  1303               	bcf	3,6	;RP1=0, select bank0
  1104  014C  00A8               	movwf	E_Read@addr
  1105  014D  3000               	movlw	0
  1106  014E  00A9               	movwf	E_Read@addr+1
  1107  014F  2646               	fcall	_E_Read
  1108  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1109  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1110  0152  00C8               	movwf	??_main
  1111  0153  01C9               	clrf	??_main+1
  1112  0154  0848               	movf	??_main,w
  1113  0155  1683               	bsf	3,5	;RP0=1, select bank1
  1114  0156  1303               	bcf	3,6	;RP1=0, select bank1
  1115  0157  00A4               	movwf	main@bw_rate^(0+128)
  1116  0158  1283               	bcf	3,5	;RP0=0, select bank0
  1117  0159  1303               	bcf	3,6	;RP1=0, select bank0
  1118  015A  0849               	movf	??_main+1,w
  1119  015B  1683               	bsf	3,5	;RP0=1, select bank1
  1120  015C  1303               	bcf	3,6	;RP1=0, select bank1
  1121  015D  00A5               	movwf	(main@bw_rate+1)^(0+128)
  1122  015E                     l1703:	
  1123                           ;main.c: 49: while(1)
  1124                           
  1125                           
  1126                           ;main.c: 50: {
  1127                           ;main.c: 51: X = Y = Z = 0;
  1128  015E  1683               	bsf	3,5	;RP0=1, select bank1
  1129  015F  1303               	bcf	3,6	;RP1=0, select bank1
  1130  0160  01B0               	clrf	main@Z^(0+128)
  1131  0161  01B1               	clrf	(main@Z+1)^(0+128)
  1132  0162  01AE               	clrf	main@Y^(0+128)
  1133  0163  01AF               	clrf	(main@Y+1)^(0+128)
  1134  0164  01AC               	clrf	main@X^(0+128)
  1135  0165  01AD               	clrf	(main@X+1)^(0+128)
  1136                           
  1137                           ;main.c: 53: I2CStart();
  1138  0166  26E7               	fcall	_I2CStart
  1139                           
  1140                           ;main.c: 54: I2CSend(0xA6);
  1141  0167  30A6               	movlw	166
  1142  0168  26B7               	fcall	_I2CSend
  1143                           
  1144                           ;main.c: 55: I2CSend(50);
  1145  0169  3032               	movlw	50
  1146  016A  26B7               	fcall	_I2CSend
  1147                           
  1148                           ;main.c: 56: I2CRestart();
  1149  016B  26ED               	fcall	_I2CRestart
  1150                           
  1151                           ;main.c: 57: I2CSend(0xA7);
  1152  016C  30A7               	movlw	167
  1153  016D  26B7               	fcall	_I2CSend
  1154                           
  1155                           ;main.c: 58: XL = I2CRead();
  1156  016E  2682               	fcall	_I2CRead
  1157  016F  1283               	bcf	3,5	;RP0=0, select bank0
  1158  0170  1303               	bcf	3,6	;RP1=0, select bank0
  1159  0171  00C8               	movwf	??_main
  1160  0172  0848               	movf	??_main,w
  1161  0173  1683               	bsf	3,5	;RP0=1, select bank1
  1162  0174  1303               	bcf	3,6	;RP1=0, select bank1
  1163  0175  00A6               	movwf	main@XL^(0+128)
  1164                           
  1165                           ;main.c: 59: I2CAck();
  1166  0176  26D3               	fcall	_I2CAck
  1167                           
  1168                           ;main.c: 60: XH = I2CRead();
  1169  0177  2682               	fcall	_I2CRead
  1170  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1171  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1172  017A  00C8               	movwf	??_main
  1173  017B  0848               	movf	??_main,w
  1174  017C  1683               	bsf	3,5	;RP0=1, select bank1
  1175  017D  1303               	bcf	3,6	;RP1=0, select bank1
  1176  017E  00A7               	movwf	main@XH^(0+128)
  1177                           
  1178                           ;main.c: 61: I2CAck();
  1179  017F  26D3               	fcall	_I2CAck
  1180                           
  1181                           ;main.c: 62: YL = I2CRead();
  1182  0180  2682               	fcall	_I2CRead
  1183  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1184  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1185  0183  00C8               	movwf	??_main
  1186  0184  0848               	movf	??_main,w
  1187  0185  1683               	bsf	3,5	;RP0=1, select bank1
  1188  0186  1303               	bcf	3,6	;RP1=0, select bank1
  1189  0187  00A9               	movwf	main@YL^(0+128)
  1190                           
  1191                           ;main.c: 63: I2CAck();
  1192  0188  26D3               	fcall	_I2CAck
  1193                           
  1194                           ;main.c: 64: YH = I2CRead();
  1195  0189  2682               	fcall	_I2CRead
  1196  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1197  018B  1303               	bcf	3,6	;RP1=0, select bank0
  1198  018C  00C8               	movwf	??_main
  1199  018D  0848               	movf	??_main,w
  1200  018E  1683               	bsf	3,5	;RP0=1, select bank1
  1201  018F  1303               	bcf	3,6	;RP1=0, select bank1
  1202  0190  00A8               	movwf	main@YH^(0+128)
  1203                           
  1204                           ;main.c: 65: I2CAck();
  1205  0191  26D3               	fcall	_I2CAck
  1206                           
  1207                           ;main.c: 66: ZL = I2CRead();
  1208  0192  2682               	fcall	_I2CRead
  1209  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1210  0194  1303               	bcf	3,6	;RP1=0, select bank0
  1211  0195  00C8               	movwf	??_main
  1212  0196  0848               	movf	??_main,w
  1213  0197  1683               	bsf	3,5	;RP0=1, select bank1
  1214  0198  1303               	bcf	3,6	;RP1=0, select bank1
  1215  0199  00AB               	movwf	main@ZL^(0+128)
  1216                           
  1217                           ;main.c: 67: I2CAck();
  1218  019A  26D3               	fcall	_I2CAck
  1219                           
  1220                           ;main.c: 68: ZH = I2CRead();
  1221  019B  2682               	fcall	_I2CRead
  1222  019C  1283               	bcf	3,5	;RP0=0, select bank0
  1223  019D  1303               	bcf	3,6	;RP1=0, select bank0
  1224  019E  00C8               	movwf	??_main
  1225  019F  0848               	movf	??_main,w
  1226  01A0  1683               	bsf	3,5	;RP0=1, select bank1
  1227  01A1  1303               	bcf	3,6	;RP1=0, select bank1
  1228  01A2  00AA               	movwf	main@ZH^(0+128)
  1229                           
  1230                           ;main.c: 69: I2CNak();
  1231  01A3  26DA               	fcall	_I2CNak
  1232                           
  1233                           ;main.c: 70: I2CStop();
  1234  01A4  26E1               	fcall	_I2CStop
  1235                           
  1236                           ;main.c: 72: X = ((XH<<8) | XL);
  1237  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  1238  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  1239  01A7  0826               	movf	main@XL^(0+128),w
  1240  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  1241  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  1242  01AA  00C8               	movwf	??_main
  1243  01AB  01C9               	clrf	??_main+1
  1244  01AC  1683               	bsf	3,5	;RP0=1, select bank1
  1245  01AD  1303               	bcf	3,6	;RP1=0, select bank1
  1246  01AE  0827               	movf	main@XH^(0+128),w
  1247  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1248  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1249  01B1  00CA               	movwf	??_main+2
  1250  01B2  01CB               	clrf	??_main+3
  1251  01B3  084A               	movf	??_main+2,w
  1252  01B4  00CB               	movwf	??_main+3
  1253  01B5  01CA               	clrf	??_main+2
  1254  01B6  0848               	movf	??_main,w
  1255  01B7  044A               	iorwf	??_main+2,w
  1256  01B8  1683               	bsf	3,5	;RP0=1, select bank1
  1257  01B9  1303               	bcf	3,6	;RP1=0, select bank1
  1258  01BA  00AC               	movwf	main@X^(0+128)
  1259  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1260  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  1261  01BD  0849               	movf	??_main+1,w
  1262  01BE  044B               	iorwf	??_main+3,w
  1263  01BF  1683               	bsf	3,5	;RP0=1, select bank1
  1264  01C0  1303               	bcf	3,6	;RP1=0, select bank1
  1265  01C1  00AD               	movwf	(main@X+1)^(0+128)
  1266                           
  1267                           ;main.c: 73: Y = ((YH<<8) | YL);
  1268  01C2  0829               	movf	main@YL^(0+128),w
  1269  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1270  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  1271  01C5  00C8               	movwf	??_main
  1272  01C6  01C9               	clrf	??_main+1
  1273  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  1274  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  1275  01C9  0828               	movf	main@YH^(0+128),w
  1276  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  1277  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  1278  01CC  00CA               	movwf	??_main+2
  1279  01CD  01CB               	clrf	??_main+3
  1280  01CE  084A               	movf	??_main+2,w
  1281  01CF  00CB               	movwf	??_main+3
  1282  01D0  01CA               	clrf	??_main+2
  1283  01D1  0848               	movf	??_main,w
  1284  01D2  044A               	iorwf	??_main+2,w
  1285  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  1286  01D4  1303               	bcf	3,6	;RP1=0, select bank1
  1287  01D5  00AE               	movwf	main@Y^(0+128)
  1288  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1289  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1290  01D8  0849               	movf	??_main+1,w
  1291  01D9  044B               	iorwf	??_main+3,w
  1292  01DA  1683               	bsf	3,5	;RP0=1, select bank1
  1293  01DB  1303               	bcf	3,6	;RP1=0, select bank1
  1294  01DC  00AF               	movwf	(main@Y+1)^(0+128)
  1295                           
  1296                           ;main.c: 74: Z = ((ZH<<8) | ZL);
  1297  01DD  082B               	movf	main@ZL^(0+128),w
  1298  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  1299  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  1300  01E0  00C8               	movwf	??_main
  1301  01E1  01C9               	clrf	??_main+1
  1302  01E2  1683               	bsf	3,5	;RP0=1, select bank1
  1303  01E3  1303               	bcf	3,6	;RP1=0, select bank1
  1304  01E4  082A               	movf	main@ZH^(0+128),w
  1305  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1306  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1307  01E7  00CA               	movwf	??_main+2
  1308  01E8  01CB               	clrf	??_main+3
  1309  01E9  084A               	movf	??_main+2,w
  1310  01EA  00CB               	movwf	??_main+3
  1311  01EB  01CA               	clrf	??_main+2
  1312  01EC  0848               	movf	??_main,w
  1313  01ED  044A               	iorwf	??_main+2,w
  1314  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  1315  01EF  1303               	bcf	3,6	;RP1=0, select bank1
  1316  01F0  00B0               	movwf	main@Z^(0+128)
  1317  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1318  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1319  01F3  0849               	movf	??_main+1,w
  1320  01F4  044B               	iorwf	??_main+3,w
  1321  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1322  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1323  01F7  00B1               	movwf	(main@Z+1)^(0+128)
  1324                           
  1325                           ;main.c: 77: XAVG = get_averageX(X);
  1326  01F8  082D               	movf	(main@X+1)^(0+128),w
  1327  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  1328  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  1329  01FB  00C3               	movwf	get_averageX@Data+1
  1330  01FC  1683               	bsf	3,5	;RP0=1, select bank1
  1331  01FD  1303               	bcf	3,6	;RP1=0, select bank1
  1332  01FE  082C               	movf	main@X^(0+128),w
  1333  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1334  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1335  0201  00C2               	movwf	get_averageX@Data
  1336  0202  23AB               	fcall	_get_averageX
  1337  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1338  0204  1303               	bcf	3,6	;RP1=0, select bank0
  1339  0205  0843               	movf	?_get_averageX+1,w
  1340  0206  00DB               	movwf	_XAVG+1
  1341  0207  0842               	movf	?_get_averageX,w
  1342  0208  00DA               	movwf	_XAVG
  1343                           
  1344                           ;main.c: 78: YAVG = get_averageY(Y);
  1345  0209  1683               	bsf	3,5	;RP0=1, select bank1
  1346  020A  1303               	bcf	3,6	;RP1=0, select bank1
  1347  020B  082F               	movf	(main@Y+1)^(0+128),w
  1348  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1349  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1350  020E  00C3               	movwf	get_averageY@Data+1
  1351  020F  1683               	bsf	3,5	;RP0=1, select bank1
  1352  0210  1303               	bcf	3,6	;RP1=0, select bank1
  1353  0211  082E               	movf	main@Y^(0+128),w
  1354  0212  1283               	bcf	3,5	;RP0=0, select bank0
  1355  0213  1303               	bcf	3,6	;RP1=0, select bank0
  1356  0214  00C2               	movwf	get_averageY@Data
  1357  0215  2355               	fcall	_get_averageY
  1358  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1359  0217  1303               	bcf	3,6	;RP1=0, select bank0
  1360  0218  0843               	movf	?_get_averageY+1,w
  1361  0219  00D9               	movwf	_YAVG+1
  1362  021A  0842               	movf	?_get_averageY,w
  1363  021B  00D8               	movwf	_YAVG
  1364                           
  1365                           ;main.c: 79: ZAVG = get_averageZ(Z);
  1366  021C  1683               	bsf	3,5	;RP0=1, select bank1
  1367  021D  1303               	bcf	3,6	;RP1=0, select bank1
  1368  021E  0831               	movf	(main@Z+1)^(0+128),w
  1369  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1370  0220  1303               	bcf	3,6	;RP1=0, select bank0
  1371  0221  00C3               	movwf	get_averageZ@Data+1
  1372  0222  1683               	bsf	3,5	;RP0=1, select bank1
  1373  0223  1303               	bcf	3,6	;RP1=0, select bank1
  1374  0224  0830               	movf	main@Z^(0+128),w
  1375  0225  1283               	bcf	3,5	;RP0=0, select bank0
  1376  0226  1303               	bcf	3,6	;RP1=0, select bank0
  1377  0227  00C2               	movwf	get_averageZ@Data
  1378  0228  22FF               	fcall	_get_averageZ
  1379  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1380  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1381  022B  0843               	movf	?_get_averageZ+1,w
  1382  022C  00D7               	movwf	_ZAVG+1
  1383  022D  0842               	movf	?_get_averageZ,w
  1384  022E  00D6               	movwf	_ZAVG
  1385                           
  1386                           ;main.c: 81: AVG = (XAVG/3) + (YAVG/3)+ (ZAVG/3);
  1387  022F  3003               	movlw	3
  1388  0230  00A6               	movwf	___lwdiv@divisor
  1389  0231  3000               	movlw	0
  1390  0232  00A7               	movwf	___lwdiv@divisor+1
  1391  0233  085B               	movf	_XAVG+1,w
  1392  0234  00A9               	movwf	___lwdiv@dividend+1
  1393  0235  085A               	movf	_XAVG,w
  1394  0236  00A8               	movwf	___lwdiv@dividend
  1395  0237  2532               	fcall	___lwdiv
  1396  0238  1283               	bcf	3,5	;RP0=0, select bank0
  1397  0239  1303               	bcf	3,6	;RP1=0, select bank0
  1398  023A  0826               	movf	?___lwdiv,w
  1399  023B  00C8               	movwf	??_main
  1400  023C  0827               	movf	?___lwdiv+1,w
  1401  023D  00C9               	movwf	??_main+1
  1402  023E  3003               	movlw	3
  1403  023F  00A6               	movwf	___lwdiv@divisor
  1404  0240  3000               	movlw	0
  1405  0241  00A7               	movwf	___lwdiv@divisor+1
  1406  0242  0859               	movf	_YAVG+1,w
  1407  0243  00A9               	movwf	___lwdiv@dividend+1
  1408  0244  0858               	movf	_YAVG,w
  1409  0245  00A8               	movwf	___lwdiv@dividend
  1410  0246  2532               	fcall	___lwdiv
  1411  0247  1283               	bcf	3,5	;RP0=0, select bank0
  1412  0248  1303               	bcf	3,6	;RP1=0, select bank0
  1413  0249  0826               	movf	?___lwdiv,w
  1414  024A  0748               	addwf	??_main,w
  1415  024B  00CA               	movwf	??_main+2
  1416  024C  0827               	movf	?___lwdiv+1,w
  1417  024D  1803               	skipnc
  1418  024E  0A27               	incf	?___lwdiv+1,w
  1419  024F  0749               	addwf	??_main+1,w
  1420  0250  00CB               	movwf	??_main+3
  1421  0251  3003               	movlw	3
  1422  0252  00A6               	movwf	___lwdiv@divisor
  1423  0253  3000               	movlw	0
  1424  0254  00A7               	movwf	___lwdiv@divisor+1
  1425  0255  0857               	movf	_ZAVG+1,w
  1426  0256  00A9               	movwf	___lwdiv@dividend+1
  1427  0257  0856               	movf	_ZAVG,w
  1428  0258  00A8               	movwf	___lwdiv@dividend
  1429  0259  2532               	fcall	___lwdiv
  1430  025A  1283               	bcf	3,5	;RP0=0, select bank0
  1431  025B  1303               	bcf	3,6	;RP1=0, select bank0
  1432  025C  0826               	movf	?___lwdiv,w
  1433  025D  074A               	addwf	??_main+2,w
  1434  025E  00D4               	movwf	_AVG
  1435  025F  0827               	movf	?___lwdiv+1,w
  1436  0260  1803               	skipnc
  1437  0261  0A27               	incf	?___lwdiv+1,w
  1438  0262  074B               	addwf	??_main+3,w
  1439  0263  00D5               	movwf	_AVG+1
  1440                           
  1441                           ;main.c: 83: AVG = get_average(AVG);
  1442  0264  0855               	movf	_AVG+1,w
  1443  0265  00C3               	movwf	get_average@Data+1
  1444  0266  0854               	movf	_AVG,w
  1445  0267  00C2               	movwf	get_average@Data
  1446  0268  2401               	fcall	_get_average
  1447  0269  1283               	bcf	3,5	;RP0=0, select bank0
  1448  026A  1303               	bcf	3,6	;RP1=0, select bank0
  1449  026B  0843               	movf	?_get_average+1,w
  1450  026C  00D5               	movwf	_AVG+1
  1451  026D  0842               	movf	?_get_average,w
  1452  026E  00D4               	movwf	_AVG
  1453  026F  295E               	goto	l1703
  1454  0270                     __end_of_main:	
  1455                           
  1456                           	psect	text1
  1457  065C                     __ptext1:	
  1458 ;; *************** function _system_init *****************
  1459 ;; Defined at:
  1460 ;;		line 17 in file "main.c"
  1461 ;; Parameters:    Size  Location     Type
  1462 ;;		None
  1463 ;; Auto vars:     Size  Location     Type
  1464 ;;		None
  1465 ;; Return value:  Size  Location     Type
  1466 ;;                  1    wreg      void 
  1467 ;; Registers used:
  1468 ;;		wreg, status,2
  1469 ;; Tracked objects:
  1470 ;;		On entry : 0/0
  1471 ;;		On exit  : 0/0
  1472 ;;		Unchanged: 0/0
  1473 ;; Data sizes:     COMMON   BANK0   BANK1
  1474 ;;      Params:         0       0       0
  1475 ;;      Locals:         0       0       0
  1476 ;;      Temps:          0       0       0
  1477 ;;      Totals:         0       0       0
  1478 ;;Total ram usage:        0 bytes
  1479 ;; Hardware stack levels used:    1
  1480 ;; Hardware stack levels required when called:    3
  1481 ;; This function calls:
  1482 ;;		Nothing
  1483 ;; This function is called by:
  1484 ;;		_main
  1485 ;; This function uses a non-reentrant model
  1486 ;;
  1487                           
  1488                           
  1489                           ;psect for function _system_init
  1490  065C                     _system_init:	
  1491                           
  1492                           ;main.c: 19: TRISC0 = 0;
  1493                           
  1494                           ;incstack = 0
  1495                           ; Regs used in _system_init: [wreg+status,2]
  1496  065C  1683               	bsf	3,5	;RP0=1, select bank1
  1497  065D  1303               	bcf	3,6	;RP1=0, select bank1
  1498  065E  1007               	bcf	7,0	;volatile
  1499                           
  1500                           ;main.c: 20: OPTION_REGbits.nRBPU = 0;
  1501  065F  1381               	bcf	1,7	;volatile
  1502                           
  1503                           ;main.c: 21: TRISB = 0x7F;
  1504  0660  307F               	movlw	127
  1505  0661  0086               	movwf	6	;volatile
  1506                           
  1507                           ;main.c: 22: WPUB = 0x7F;
  1508  0662  307F               	movlw	127
  1509  0663  0095               	movwf	21	;volatile
  1510                           
  1511                           ;main.c: 23: ANS3 = 1;
  1512  0664  1683               	bsf	3,5	;RP0=1, select bank3
  1513  0665  1703               	bsf	3,6	;RP1=1, select bank3
  1514  0666  1588               	bsf	8,3	;volatile
  1515                           
  1516                           ;main.c: 24: ADCON0 = 0x0D;
  1517  0667  300D               	movlw	13
  1518  0668  1283               	bcf	3,5	;RP0=0, select bank0
  1519  0669  1303               	bcf	3,6	;RP1=0, select bank0
  1520  066A  009F               	movwf	31	;volatile
  1521                           
  1522                           ;main.c: 25: ANSELH = 0x00;
  1523  066B  1683               	bsf	3,5	;RP0=1, select bank3
  1524  066C  1703               	bsf	3,6	;RP1=1, select bank3
  1525  066D  0189               	clrf	9	;volatile
  1526  066E  0008               	return
  1527  066F                     __end_of_system_init:	
  1528                           
  1529                           	psect	text2
  1530  04A6                     __ptext2:	
  1531 ;; *************** function _ini_adxl345 *****************
  1532 ;; Defined at:
  1533 ;;		line 6 in file "ADXL_m.c"
  1534 ;; Parameters:    Size  Location     Type
  1535 ;;		None
  1536 ;; Auto vars:     Size  Location     Type
  1537 ;;		None
  1538 ;; Return value:  Size  Location     Type
  1539 ;;                  1    wreg      void 
  1540 ;; Registers used:
  1541 ;;		wreg, status,2, status,0, pclath, cstack
  1542 ;; Tracked objects:
  1543 ;;		On entry : 0/0
  1544 ;;		On exit  : 0/0
  1545 ;;		Unchanged: 0/0
  1546 ;; Data sizes:     COMMON   BANK0   BANK1
  1547 ;;      Params:         0       0       0
  1548 ;;      Locals:         0       0       0
  1549 ;;      Temps:          0       2       0
  1550 ;;      Totals:         0       2       0
  1551 ;;Total ram usage:        2 bytes
  1552 ;; Hardware stack levels used:    1
  1553 ;; Hardware stack levels required when called:    6
  1554 ;; This function calls:
  1555 ;;		_E_Write
  1556 ;; This function is called by:
  1557 ;;		_main
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           
  1562                           ;psect for function _ini_adxl345
  1563  04A6                     _ini_adxl345:	
  1564                           
  1565                           ;ADXL_m.c: 8: E_Write(56,0x9f);
  1566                           
  1567                           ;incstack = 0
  1568                           ; Regs used in _ini_adxl345: [wreg+status,2+status,0+pclath+cstack]
  1569  04A6  3038               	movlw	56
  1570  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  1571  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  1572  04A9  00A7               	movwf	E_Write@addr
  1573  04AA  3000               	movlw	0
  1574  04AB  00A8               	movwf	E_Write@addr+1
  1575  04AC  309F               	movlw	159
  1576  04AD  00AA               	movwf	??_ini_adxl345
  1577  04AE  082A               	movf	??_ini_adxl345,w
  1578  04AF  00A9               	movwf	E_Write@ch
  1579  04B0  2692               	fcall	_E_Write
  1580                           
  1581                           ;ADXL_m.c: 9: _delay((unsigned long)((10)*(20000000/4000.0)));
  1582  04B1  3041               	movlw	65
  1583  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  1584  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  1585  04B4  00AB               	movwf	??_ini_adxl345+1
  1586  04B5  30EE               	movlw	238
  1587  04B6  00AA               	movwf	??_ini_adxl345
  1588  04B7                     u1407:	
  1589  04B7  0BAA               	decfsz	??_ini_adxl345,f
  1590  04B8  2CB7               	goto	u1407
  1591  04B9  0BAB               	decfsz	??_ini_adxl345+1,f
  1592  04BA  2CB7               	goto	u1407
  1593                           
  1594                           ;ADXL_m.c: 10: E_Write(49,0x09);
  1595  04BB  3031               	movlw	49
  1596  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  1597  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  1598  04BE  00A7               	movwf	E_Write@addr
  1599  04BF  3000               	movlw	0
  1600  04C0  00A8               	movwf	E_Write@addr+1
  1601  04C1  3009               	movlw	9
  1602  04C2  00AA               	movwf	??_ini_adxl345
  1603  04C3  082A               	movf	??_ini_adxl345,w
  1604  04C4  00A9               	movwf	E_Write@ch
  1605  04C5  2692               	fcall	_E_Write
  1606                           
  1607                           ;ADXL_m.c: 11: _delay((unsigned long)((10)*(20000000/4000.0)));
  1608  04C6  3041               	movlw	65
  1609  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  1610  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  1611  04C9  00AB               	movwf	??_ini_adxl345+1
  1612  04CA  30EE               	movlw	238
  1613  04CB  00AA               	movwf	??_ini_adxl345
  1614  04CC                     u1417:	
  1615  04CC  0BAA               	decfsz	??_ini_adxl345,f
  1616  04CD  2CCC               	goto	u1417
  1617  04CE  0BAB               	decfsz	??_ini_adxl345+1,f
  1618  04CF  2CCC               	goto	u1417
  1619                           
  1620                           ;ADXL_m.c: 12: E_Write(44,0x0d);
  1621  04D0  302C               	movlw	44
  1622  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  1623  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  1624  04D3  00A7               	movwf	E_Write@addr
  1625  04D4  3000               	movlw	0
  1626  04D5  00A8               	movwf	E_Write@addr+1
  1627  04D6  300D               	movlw	13
  1628  04D7  00AA               	movwf	??_ini_adxl345
  1629  04D8  082A               	movf	??_ini_adxl345,w
  1630  04D9  00A9               	movwf	E_Write@ch
  1631  04DA  2692               	fcall	_E_Write
  1632                           
  1633                           ;ADXL_m.c: 13: _delay((unsigned long)((10)*(20000000/4000.0)));
  1634  04DB  3041               	movlw	65
  1635  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  1636  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  1637  04DE  00AB               	movwf	??_ini_adxl345+1
  1638  04DF  30EE               	movlw	238
  1639  04E0  00AA               	movwf	??_ini_adxl345
  1640  04E1                     u1427:	
  1641  04E1  0BAA               	decfsz	??_ini_adxl345,f
  1642  04E2  2CE1               	goto	u1427
  1643  04E3  0BAB               	decfsz	??_ini_adxl345+1,f
  1644  04E4  2CE1               	goto	u1427
  1645                           
  1646                           ;ADXL_m.c: 14: E_Write(45,0x08);
  1647  04E5  302D               	movlw	45
  1648  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  1649  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  1650  04E8  00A7               	movwf	E_Write@addr
  1651  04E9  3000               	movlw	0
  1652  04EA  00A8               	movwf	E_Write@addr+1
  1653  04EB  3008               	movlw	8
  1654  04EC  00AA               	movwf	??_ini_adxl345
  1655  04ED  082A               	movf	??_ini_adxl345,w
  1656  04EE  00A9               	movwf	E_Write@ch
  1657  04EF  2692               	fcall	_E_Write
  1658  04F0  0008               	return
  1659  04F1                     __end_of_ini_adxl345:	
  1660                           
  1661                           	psect	text3
  1662  0692                     __ptext3:	
  1663 ;; *************** function _E_Write *****************
  1664 ;; Defined at:
  1665 ;;		line 154 in file "ADXL_m.c"
  1666 ;; Parameters:    Size  Location     Type
  1667 ;;  addr            2    7[BANK0 ] int 
  1668 ;;  ch              1    9[BANK0 ] unsigned char 
  1669 ;; Auto vars:     Size  Location     Type
  1670 ;;		None
  1671 ;; Return value:  Size  Location     Type
  1672 ;;                  1    wreg      unsigned char 
  1673 ;; Registers used:
  1674 ;;		wreg, status,2, status,0, pclath, cstack
  1675 ;; Tracked objects:
  1676 ;;		On entry : 0/0
  1677 ;;		On exit  : 0/0
  1678 ;;		Unchanged: 0/0
  1679 ;; Data sizes:     COMMON   BANK0   BANK1
  1680 ;;      Params:         0       3       0
  1681 ;;      Locals:         0       0       0
  1682 ;;      Temps:          0       0       0
  1683 ;;      Totals:         0       3       0
  1684 ;;Total ram usage:        3 bytes
  1685 ;; Hardware stack levels used:    1
  1686 ;; Hardware stack levels required when called:    5
  1687 ;; This function calls:
  1688 ;;		_I2CSend
  1689 ;;		_I2CStart
  1690 ;;		_I2CStop
  1691 ;; This function is called by:
  1692 ;;		_ini_adxl345
  1693 ;; This function uses a non-reentrant model
  1694 ;;
  1695                           
  1696                           
  1697                           ;psect for function _E_Write
  1698  0692                     _E_Write:	
  1699                           
  1700                           ;ADXL_m.c: 157: I2CStart();
  1701                           
  1702                           ;incstack = 0
  1703                           ; Regs used in _E_Write: [wreg+status,2+status,0+pclath+cstack]
  1704  0692  26E7               	fcall	_I2CStart
  1705                           
  1706                           ;ADXL_m.c: 159: I2CSend(0xA6);
  1707  0693  30A6               	movlw	166
  1708  0694  26B7               	fcall	_I2CSend
  1709                           
  1710                           ;ADXL_m.c: 161: I2CSend(addr);
  1711  0695  1283               	bcf	3,5	;RP0=0, select bank0
  1712  0696  1303               	bcf	3,6	;RP1=0, select bank0
  1713  0697  0827               	movf	E_Write@addr,w
  1714  0698  26B7               	fcall	_I2CSend
  1715                           
  1716                           ;ADXL_m.c: 163: I2CSend(ch);
  1717  0699  1283               	bcf	3,5	;RP0=0, select bank0
  1718  069A  1303               	bcf	3,6	;RP1=0, select bank0
  1719  069B  0829               	movf	E_Write@ch,w
  1720  069C  26B7               	fcall	_I2CSend
  1721                           
  1722                           ;ADXL_m.c: 165: I2CStop();
  1723  069D  26E1               	fcall	_I2CStop
  1724  069E  0008               	return
  1725  069F                     __end_of_E_Write:	
  1726                           ;ADXL_m.c: 166: return 1;
  1727                           ;	Return value of _E_Write is never used
  1728                           
  1729                           
  1730                           	psect	text4
  1731  02FF                     __ptext4:	
  1732 ;; *************** function _get_averageZ *****************
  1733 ;; Defined at:
  1734 ;;		line 25 in file "average_calculations.c"
  1735 ;; Parameters:    Size  Location     Type
  1736 ;;  Data            2   34[BANK0 ] short 
  1737 ;; Auto vars:     Size  Location     Type
  1738 ;;		None
  1739 ;; Return value:  Size  Location     Type
  1740 ;;                  2   34[BANK0 ] short 
  1741 ;; Registers used:
  1742 ;;		wreg, status,2, status,0, pclath, cstack
  1743 ;; Tracked objects:
  1744 ;;		On entry : 0/0
  1745 ;;		On exit  : 0/0
  1746 ;;		Unchanged: 0/0
  1747 ;; Data sizes:     COMMON   BANK0   BANK1
  1748 ;;      Params:         0       2       0
  1749 ;;      Locals:         0       0       0
  1750 ;;      Temps:          0       4       0
  1751 ;;      Totals:         0       6       0
  1752 ;;Total ram usage:        6 bytes
  1753 ;; Hardware stack levels used:    1
  1754 ;; Hardware stack levels required when called:    4
  1755 ;; This function calls:
  1756 ;;		___aldiv
  1757 ;;		___lmul
  1758 ;; This function is called by:
  1759 ;;		_main
  1760 ;; This function uses a non-reentrant model
  1761 ;;
  1762                           
  1763                           
  1764                           ;psect for function _get_averageZ
  1765  02FF                     _get_averageZ:	
  1766                           
  1767                           ;average_calculations.c: 27: static short OutPut = 0;
  1768                           ;average_calculations.c: 28: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  1769                           
  1770                           ;incstack = 0
  1771                           ; Regs used in _get_averageZ: [wreg+status,2+status,0+pclath+cstack]
  1772  02FF  3000               	movlw	0
  1773  0300  1283               	bcf	3,5	;RP0=0, select bank0
  1774  0301  1303               	bcf	3,6	;RP1=0, select bank0
  1775  0302  00B6               	movwf	___aldiv@divisor+3
  1776  0303  3000               	movlw	0
  1777  0304  00B5               	movwf	___aldiv@divisor+2
  1778  0305  3000               	movlw	0
  1779  0306  00B4               	movwf	___aldiv@divisor+1
  1780  0307  3064               	movlw	100
  1781  0308  00B3               	movwf	___aldiv@divisor
  1782  0309  084E               	movf	get_averageZ@OutPut,w
  1783  030A  00C4               	movwf	??_get_averageZ
  1784  030B  084F               	movf	get_averageZ@OutPut+1,w
  1785  030C  00C5               	movwf	??_get_averageZ+1
  1786  030D  3000               	movlw	0
  1787  030E  1BC5               	btfsc	??_get_averageZ+1,7
  1788  030F  30FF               	movlw	255
  1789  0310  00C6               	movwf	??_get_averageZ+2
  1790  0311  00C7               	movwf	??_get_averageZ+3
  1791  0312  3003               	movlw	3
  1792  0313                     u1275:	
  1793  0313  1003               	clrc
  1794  0314  0DC4               	rlf	??_get_averageZ,f
  1795  0315  0DC5               	rlf	??_get_averageZ+1,f
  1796  0316  0DC6               	rlf	??_get_averageZ+2,f
  1797  0317  0DC7               	rlf	??_get_averageZ+3,f
  1798  0318  3EFF               	addlw	-1
  1799  0319  1D03               	skipz
  1800  031A  2B13               	goto	u1275
  1801  031B  0842               	movf	get_averageZ@Data,w
  1802  031C  00A6               	movwf	___lmul@multiplier
  1803  031D  0843               	movf	get_averageZ@Data+1,w
  1804  031E  00A7               	movwf	___lmul@multiplier+1
  1805  031F  3000               	movlw	0
  1806  0320  1BA7               	btfsc	___lmul@multiplier+1,7
  1807  0321  30FF               	movlw	255
  1808  0322  00A8               	movwf	___lmul@multiplier+2
  1809  0323  00A9               	movwf	___lmul@multiplier+3
  1810  0324  3000               	movlw	0
  1811  0325  00AD               	movwf	___lmul@multiplicand+3
  1812  0326  3000               	movlw	0
  1813  0327  00AC               	movwf	___lmul@multiplicand+2
  1814  0328  3000               	movlw	0
  1815  0329  00AB               	movwf	___lmul@multiplicand+1
  1816  032A  305C               	movlw	92
  1817  032B  00AA               	movwf	___lmul@multiplicand
  1818  032C  24F1               	fcall	___lmul
  1819  032D  1283               	bcf	3,5	;RP0=0, select bank0
  1820  032E  1303               	bcf	3,6	;RP1=0, select bank0
  1821  032F  0826               	movf	?___lmul,w
  1822  0330  07C4               	addwf	??_get_averageZ,f
  1823  0331  0827               	movf	?___lmul+1,w
  1824  0332  1803               	skipnc
  1825  0333  0F27               	incfsz	?___lmul+1,w
  1826  0334  2B36               	goto	u1280
  1827  0335  2B37               	goto	u1281
  1828  0336                     u1280:	
  1829  0336  07C5               	addwf	??_get_averageZ+1,f
  1830  0337                     u1281:	
  1831  0337  0828               	movf	?___lmul+2,w
  1832  0338  1803               	skipnc
  1833  0339  0F28               	incfsz	?___lmul+2,w
  1834  033A  2B3C               	goto	u1282
  1835  033B  2B3D               	goto	u1283
  1836  033C                     u1282:	
  1837  033C  07C6               	addwf	??_get_averageZ+2,f
  1838  033D                     u1283:	
  1839  033D  0829               	movf	?___lmul+3,w
  1840  033E  1803               	skipnc
  1841  033F  0A29               	incf	?___lmul+3,w
  1842  0340  07C7               	addwf	??_get_averageZ+3,f
  1843  0341  0847               	movf	??_get_averageZ+3,w
  1844  0342  00BA               	movwf	___aldiv@dividend+3
  1845  0343  0846               	movf	??_get_averageZ+2,w
  1846  0344  00B9               	movwf	___aldiv@dividend+2
  1847  0345  0845               	movf	??_get_averageZ+1,w
  1848  0346  00B8               	movwf	___aldiv@dividend+1
  1849  0347  0844               	movf	??_get_averageZ,w
  1850  0348  00B7               	movwf	___aldiv@dividend
  1851  0349  2270               	fcall	___aldiv
  1852  034A  1283               	bcf	3,5	;RP0=0, select bank0
  1853  034B  1303               	bcf	3,6	;RP1=0, select bank0
  1854  034C  0834               	movf	?___aldiv+1,w
  1855  034D  00CF               	movwf	get_averageZ@OutPut+1
  1856  034E  0833               	movf	?___aldiv,w
  1857  034F  00CE               	movwf	get_averageZ@OutPut
  1858                           
  1859                           ;average_calculations.c: 29: return OutPut;
  1860  0350  084F               	movf	get_averageZ@OutPut+1,w
  1861  0351  00C3               	movwf	?_get_averageZ+1
  1862  0352  084E               	movf	get_averageZ@OutPut,w
  1863  0353  00C2               	movwf	?_get_averageZ
  1864  0354  0008               	return
  1865  0355                     __end_of_get_averageZ:	
  1866                           
  1867                           	psect	text5
  1868  0355                     __ptext5:	
  1869 ;; *************** function _get_averageY *****************
  1870 ;; Defined at:
  1871 ;;		line 19 in file "average_calculations.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  Data            2   34[BANK0 ] short 
  1874 ;; Auto vars:     Size  Location     Type
  1875 ;;		None
  1876 ;; Return value:  Size  Location     Type
  1877 ;;                  2   34[BANK0 ] short 
  1878 ;; Registers used:
  1879 ;;		wreg, status,2, status,0, pclath, cstack
  1880 ;; Tracked objects:
  1881 ;;		On entry : 0/0
  1882 ;;		On exit  : 0/0
  1883 ;;		Unchanged: 0/0
  1884 ;; Data sizes:     COMMON   BANK0   BANK1
  1885 ;;      Params:         0       2       0
  1886 ;;      Locals:         0       0       0
  1887 ;;      Temps:          0       4       0
  1888 ;;      Totals:         0       6       0
  1889 ;;Total ram usage:        6 bytes
  1890 ;; Hardware stack levels used:    1
  1891 ;; Hardware stack levels required when called:    4
  1892 ;; This function calls:
  1893 ;;		___aldiv
  1894 ;;		___lmul
  1895 ;; This function is called by:
  1896 ;;		_main
  1897 ;; This function uses a non-reentrant model
  1898 ;;
  1899                           
  1900                           
  1901                           ;psect for function _get_averageY
  1902  0355                     _get_averageY:	
  1903                           
  1904                           ;average_calculations.c: 21: static short OutPut = 0;
  1905                           ;average_calculations.c: 22: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  1906                           
  1907                           ;incstack = 0
  1908                           ; Regs used in _get_averageY: [wreg+status,2+status,0+pclath+cstack]
  1909  0355  3000               	movlw	0
  1910  0356  1283               	bcf	3,5	;RP0=0, select bank0
  1911  0357  1303               	bcf	3,6	;RP1=0, select bank0
  1912  0358  00B6               	movwf	___aldiv@divisor+3
  1913  0359  3000               	movlw	0
  1914  035A  00B5               	movwf	___aldiv@divisor+2
  1915  035B  3000               	movlw	0
  1916  035C  00B4               	movwf	___aldiv@divisor+1
  1917  035D  3064               	movlw	100
  1918  035E  00B3               	movwf	___aldiv@divisor
  1919  035F  0850               	movf	get_averageY@OutPut,w
  1920  0360  00C4               	movwf	??_get_averageY
  1921  0361  0851               	movf	get_averageY@OutPut+1,w
  1922  0362  00C5               	movwf	??_get_averageY+1
  1923  0363  3000               	movlw	0
  1924  0364  1BC5               	btfsc	??_get_averageY+1,7
  1925  0365  30FF               	movlw	255
  1926  0366  00C6               	movwf	??_get_averageY+2
  1927  0367  00C7               	movwf	??_get_averageY+3
  1928  0368  3003               	movlw	3
  1929  0369                     u1255:	
  1930  0369  1003               	clrc
  1931  036A  0DC4               	rlf	??_get_averageY,f
  1932  036B  0DC5               	rlf	??_get_averageY+1,f
  1933  036C  0DC6               	rlf	??_get_averageY+2,f
  1934  036D  0DC7               	rlf	??_get_averageY+3,f
  1935  036E  3EFF               	addlw	-1
  1936  036F  1D03               	skipz
  1937  0370  2B69               	goto	u1255
  1938  0371  0842               	movf	get_averageY@Data,w
  1939  0372  00A6               	movwf	___lmul@multiplier
  1940  0373  0843               	movf	get_averageY@Data+1,w
  1941  0374  00A7               	movwf	___lmul@multiplier+1
  1942  0375  3000               	movlw	0
  1943  0376  1BA7               	btfsc	___lmul@multiplier+1,7
  1944  0377  30FF               	movlw	255
  1945  0378  00A8               	movwf	___lmul@multiplier+2
  1946  0379  00A9               	movwf	___lmul@multiplier+3
  1947  037A  3000               	movlw	0
  1948  037B  00AD               	movwf	___lmul@multiplicand+3
  1949  037C  3000               	movlw	0
  1950  037D  00AC               	movwf	___lmul@multiplicand+2
  1951  037E  3000               	movlw	0
  1952  037F  00AB               	movwf	___lmul@multiplicand+1
  1953  0380  305C               	movlw	92
  1954  0381  00AA               	movwf	___lmul@multiplicand
  1955  0382  24F1               	fcall	___lmul
  1956  0383  1283               	bcf	3,5	;RP0=0, select bank0
  1957  0384  1303               	bcf	3,6	;RP1=0, select bank0
  1958  0385  0826               	movf	?___lmul,w
  1959  0386  07C4               	addwf	??_get_averageY,f
  1960  0387  0827               	movf	?___lmul+1,w
  1961  0388  1803               	skipnc
  1962  0389  0F27               	incfsz	?___lmul+1,w
  1963  038A  2B8C               	goto	u1260
  1964  038B  2B8D               	goto	u1261
  1965  038C                     u1260:	
  1966  038C  07C5               	addwf	??_get_averageY+1,f
  1967  038D                     u1261:	
  1968  038D  0828               	movf	?___lmul+2,w
  1969  038E  1803               	skipnc
  1970  038F  0F28               	incfsz	?___lmul+2,w
  1971  0390  2B92               	goto	u1262
  1972  0391  2B93               	goto	u1263
  1973  0392                     u1262:	
  1974  0392  07C6               	addwf	??_get_averageY+2,f
  1975  0393                     u1263:	
  1976  0393  0829               	movf	?___lmul+3,w
  1977  0394  1803               	skipnc
  1978  0395  0A29               	incf	?___lmul+3,w
  1979  0396  07C7               	addwf	??_get_averageY+3,f
  1980  0397  0847               	movf	??_get_averageY+3,w
  1981  0398  00BA               	movwf	___aldiv@dividend+3
  1982  0399  0846               	movf	??_get_averageY+2,w
  1983  039A  00B9               	movwf	___aldiv@dividend+2
  1984  039B  0845               	movf	??_get_averageY+1,w
  1985  039C  00B8               	movwf	___aldiv@dividend+1
  1986  039D  0844               	movf	??_get_averageY,w
  1987  039E  00B7               	movwf	___aldiv@dividend
  1988  039F  2270               	fcall	___aldiv
  1989  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  1990  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  1991  03A2  0834               	movf	?___aldiv+1,w
  1992  03A3  00D1               	movwf	get_averageY@OutPut+1
  1993  03A4  0833               	movf	?___aldiv,w
  1994  03A5  00D0               	movwf	get_averageY@OutPut
  1995                           
  1996                           ;average_calculations.c: 23: return OutPut;
  1997  03A6  0851               	movf	get_averageY@OutPut+1,w
  1998  03A7  00C3               	movwf	?_get_averageY+1
  1999  03A8  0850               	movf	get_averageY@OutPut,w
  2000  03A9  00C2               	movwf	?_get_averageY
  2001  03AA  0008               	return
  2002  03AB                     __end_of_get_averageY:	
  2003                           
  2004                           	psect	text6
  2005  03AB                     __ptext6:	
  2006 ;; *************** function _get_averageX *****************
  2007 ;; Defined at:
  2008 ;;		line 13 in file "average_calculations.c"
  2009 ;; Parameters:    Size  Location     Type
  2010 ;;  Data            2   34[BANK0 ] short 
  2011 ;; Auto vars:     Size  Location     Type
  2012 ;;		None
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  2   34[BANK0 ] short 
  2015 ;; Registers used:
  2016 ;;		wreg, status,2, status,0, pclath, cstack
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMMON   BANK0   BANK1
  2022 ;;      Params:         0       2       0
  2023 ;;      Locals:         0       0       0
  2024 ;;      Temps:          0       4       0
  2025 ;;      Totals:         0       6       0
  2026 ;;Total ram usage:        6 bytes
  2027 ;; Hardware stack levels used:    1
  2028 ;; Hardware stack levels required when called:    4
  2029 ;; This function calls:
  2030 ;;		___aldiv
  2031 ;;		___lmul
  2032 ;; This function is called by:
  2033 ;;		_main
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036                           
  2037                           
  2038                           ;psect for function _get_averageX
  2039  03AB                     _get_averageX:	
  2040                           
  2041                           ;average_calculations.c: 15: static short OutPut = 0;
  2042                           ;average_calculations.c: 16: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  2043                           
  2044                           ;incstack = 0
  2045                           ; Regs used in _get_averageX: [wreg+status,2+status,0+pclath+cstack]
  2046  03AB  3000               	movlw	0
  2047  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  2048  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  2049  03AE  00B6               	movwf	___aldiv@divisor+3
  2050  03AF  3000               	movlw	0
  2051  03B0  00B5               	movwf	___aldiv@divisor+2
  2052  03B1  3000               	movlw	0
  2053  03B2  00B4               	movwf	___aldiv@divisor+1
  2054  03B3  3064               	movlw	100
  2055  03B4  00B3               	movwf	___aldiv@divisor
  2056  03B5  0852               	movf	get_averageX@OutPut,w
  2057  03B6  00C4               	movwf	??_get_averageX
  2058  03B7  0853               	movf	get_averageX@OutPut+1,w
  2059  03B8  00C5               	movwf	??_get_averageX+1
  2060  03B9  3000               	movlw	0
  2061  03BA  1BC5               	btfsc	??_get_averageX+1,7
  2062  03BB  30FF               	movlw	255
  2063  03BC  00C6               	movwf	??_get_averageX+2
  2064  03BD  00C7               	movwf	??_get_averageX+3
  2065  03BE  3003               	movlw	3
  2066  03BF                     u1235:	
  2067  03BF  1003               	clrc
  2068  03C0  0DC4               	rlf	??_get_averageX,f
  2069  03C1  0DC5               	rlf	??_get_averageX+1,f
  2070  03C2  0DC6               	rlf	??_get_averageX+2,f
  2071  03C3  0DC7               	rlf	??_get_averageX+3,f
  2072  03C4  3EFF               	addlw	-1
  2073  03C5  1D03               	skipz
  2074  03C6  2BBF               	goto	u1235
  2075  03C7  0842               	movf	get_averageX@Data,w
  2076  03C8  00A6               	movwf	___lmul@multiplier
  2077  03C9  0843               	movf	get_averageX@Data+1,w
  2078  03CA  00A7               	movwf	___lmul@multiplier+1
  2079  03CB  3000               	movlw	0
  2080  03CC  1BA7               	btfsc	___lmul@multiplier+1,7
  2081  03CD  30FF               	movlw	255
  2082  03CE  00A8               	movwf	___lmul@multiplier+2
  2083  03CF  00A9               	movwf	___lmul@multiplier+3
  2084  03D0  3000               	movlw	0
  2085  03D1  00AD               	movwf	___lmul@multiplicand+3
  2086  03D2  3000               	movlw	0
  2087  03D3  00AC               	movwf	___lmul@multiplicand+2
  2088  03D4  3000               	movlw	0
  2089  03D5  00AB               	movwf	___lmul@multiplicand+1
  2090  03D6  305C               	movlw	92
  2091  03D7  00AA               	movwf	___lmul@multiplicand
  2092  03D8  24F1               	fcall	___lmul
  2093  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  2094  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  2095  03DB  0826               	movf	?___lmul,w
  2096  03DC  07C4               	addwf	??_get_averageX,f
  2097  03DD  0827               	movf	?___lmul+1,w
  2098  03DE  1803               	skipnc
  2099  03DF  0F27               	incfsz	?___lmul+1,w
  2100  03E0  2BE2               	goto	u1240
  2101  03E1  2BE3               	goto	u1241
  2102  03E2                     u1240:	
  2103  03E2  07C5               	addwf	??_get_averageX+1,f
  2104  03E3                     u1241:	
  2105  03E3  0828               	movf	?___lmul+2,w
  2106  03E4  1803               	skipnc
  2107  03E5  0F28               	incfsz	?___lmul+2,w
  2108  03E6  2BE8               	goto	u1242
  2109  03E7  2BE9               	goto	u1243
  2110  03E8                     u1242:	
  2111  03E8  07C6               	addwf	??_get_averageX+2,f
  2112  03E9                     u1243:	
  2113  03E9  0829               	movf	?___lmul+3,w
  2114  03EA  1803               	skipnc
  2115  03EB  0A29               	incf	?___lmul+3,w
  2116  03EC  07C7               	addwf	??_get_averageX+3,f
  2117  03ED  0847               	movf	??_get_averageX+3,w
  2118  03EE  00BA               	movwf	___aldiv@dividend+3
  2119  03EF  0846               	movf	??_get_averageX+2,w
  2120  03F0  00B9               	movwf	___aldiv@dividend+2
  2121  03F1  0845               	movf	??_get_averageX+1,w
  2122  03F2  00B8               	movwf	___aldiv@dividend+1
  2123  03F3  0844               	movf	??_get_averageX,w
  2124  03F4  00B7               	movwf	___aldiv@dividend
  2125  03F5  2270               	fcall	___aldiv
  2126  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  2127  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  2128  03F8  0834               	movf	?___aldiv+1,w
  2129  03F9  00D3               	movwf	get_averageX@OutPut+1
  2130  03FA  0833               	movf	?___aldiv,w
  2131  03FB  00D2               	movwf	get_averageX@OutPut
  2132                           
  2133                           ;average_calculations.c: 17: return OutPut;
  2134  03FC  0853               	movf	get_averageX@OutPut+1,w
  2135  03FD  00C3               	movwf	?_get_averageX+1
  2136  03FE  0852               	movf	get_averageX@OutPut,w
  2137  03FF  00C2               	movwf	?_get_averageX
  2138  0400  0008               	return
  2139  0401                     __end_of_get_averageX:	
  2140                           
  2141                           	psect	text7
  2142  0401                     __ptext7:	
  2143 ;; *************** function _get_average *****************
  2144 ;; Defined at:
  2145 ;;		line 32 in file "average_calculations.c"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;  Data            2   34[BANK0 ] short 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;		None
  2150 ;; Return value:  Size  Location     Type
  2151 ;;                  2   34[BANK0 ] short 
  2152 ;; Registers used:
  2153 ;;		wreg, status,2, status,0, pclath, cstack
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMMON   BANK0   BANK1
  2159 ;;      Params:         0       2       0
  2160 ;;      Locals:         0       0       0
  2161 ;;      Temps:          0       4       0
  2162 ;;      Totals:         0       6       0
  2163 ;;Total ram usage:        6 bytes
  2164 ;; Hardware stack levels used:    1
  2165 ;; Hardware stack levels required when called:    4
  2166 ;; This function calls:
  2167 ;;		___aldiv
  2168 ;;		___lmul
  2169 ;; This function is called by:
  2170 ;;		_main
  2171 ;; This function uses a non-reentrant model
  2172 ;;
  2173                           
  2174                           
  2175                           ;psect for function _get_average
  2176  0401                     _get_average:	
  2177                           
  2178                           ;average_calculations.c: 34: static short OutPut = 0;
  2179                           ;average_calculations.c: 35: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  2180                           
  2181                           ;incstack = 0
  2182                           ; Regs used in _get_average: [wreg+status,2+status,0+pclath+cstack]
  2183  0401  3000               	movlw	0
  2184  0402  1283               	bcf	3,5	;RP0=0, select bank0
  2185  0403  1303               	bcf	3,6	;RP1=0, select bank0
  2186  0404  00B6               	movwf	___aldiv@divisor+3
  2187  0405  3000               	movlw	0
  2188  0406  00B5               	movwf	___aldiv@divisor+2
  2189  0407  3000               	movlw	0
  2190  0408  00B4               	movwf	___aldiv@divisor+1
  2191  0409  3064               	movlw	100
  2192  040A  00B3               	movwf	___aldiv@divisor
  2193  040B  084C               	movf	get_average@OutPut,w
  2194  040C  00C4               	movwf	??_get_average
  2195  040D  084D               	movf	get_average@OutPut+1,w
  2196  040E  00C5               	movwf	??_get_average+1
  2197  040F  3000               	movlw	0
  2198  0410  1BC5               	btfsc	??_get_average+1,7
  2199  0411  30FF               	movlw	255
  2200  0412  00C6               	movwf	??_get_average+2
  2201  0413  00C7               	movwf	??_get_average+3
  2202  0414  3003               	movlw	3
  2203  0415                     u1295:	
  2204  0415  1003               	clrc
  2205  0416  0DC4               	rlf	??_get_average,f
  2206  0417  0DC5               	rlf	??_get_average+1,f
  2207  0418  0DC6               	rlf	??_get_average+2,f
  2208  0419  0DC7               	rlf	??_get_average+3,f
  2209  041A  3EFF               	addlw	-1
  2210  041B  1D03               	skipz
  2211  041C  2C15               	goto	u1295
  2212  041D  0842               	movf	get_average@Data,w
  2213  041E  00A6               	movwf	___lmul@multiplier
  2214  041F  0843               	movf	get_average@Data+1,w
  2215  0420  00A7               	movwf	___lmul@multiplier+1
  2216  0421  3000               	movlw	0
  2217  0422  1BA7               	btfsc	___lmul@multiplier+1,7
  2218  0423  30FF               	movlw	255
  2219  0424  00A8               	movwf	___lmul@multiplier+2
  2220  0425  00A9               	movwf	___lmul@multiplier+3
  2221  0426  3000               	movlw	0
  2222  0427  00AD               	movwf	___lmul@multiplicand+3
  2223  0428  3000               	movlw	0
  2224  0429  00AC               	movwf	___lmul@multiplicand+2
  2225  042A  3000               	movlw	0
  2226  042B  00AB               	movwf	___lmul@multiplicand+1
  2227  042C  305C               	movlw	92
  2228  042D  00AA               	movwf	___lmul@multiplicand
  2229  042E  24F1               	fcall	___lmul
  2230  042F  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0430  1303               	bcf	3,6	;RP1=0, select bank0
  2232  0431  0826               	movf	?___lmul,w
  2233  0432  07C4               	addwf	??_get_average,f
  2234  0433  0827               	movf	?___lmul+1,w
  2235  0434  1803               	skipnc
  2236  0435  0F27               	incfsz	?___lmul+1,w
  2237  0436  2C38               	goto	u1300
  2238  0437  2C39               	goto	u1301
  2239  0438                     u1300:	
  2240  0438  07C5               	addwf	??_get_average+1,f
  2241  0439                     u1301:	
  2242  0439  0828               	movf	?___lmul+2,w
  2243  043A  1803               	skipnc
  2244  043B  0F28               	incfsz	?___lmul+2,w
  2245  043C  2C3E               	goto	u1302
  2246  043D  2C3F               	goto	u1303
  2247  043E                     u1302:	
  2248  043E  07C6               	addwf	??_get_average+2,f
  2249  043F                     u1303:	
  2250  043F  0829               	movf	?___lmul+3,w
  2251  0440  1803               	skipnc
  2252  0441  0A29               	incf	?___lmul+3,w
  2253  0442  07C7               	addwf	??_get_average+3,f
  2254  0443  0847               	movf	??_get_average+3,w
  2255  0444  00BA               	movwf	___aldiv@dividend+3
  2256  0445  0846               	movf	??_get_average+2,w
  2257  0446  00B9               	movwf	___aldiv@dividend+2
  2258  0447  0845               	movf	??_get_average+1,w
  2259  0448  00B8               	movwf	___aldiv@dividend+1
  2260  0449  0844               	movf	??_get_average,w
  2261  044A  00B7               	movwf	___aldiv@dividend
  2262  044B  2270               	fcall	___aldiv
  2263  044C  1283               	bcf	3,5	;RP0=0, select bank0
  2264  044D  1303               	bcf	3,6	;RP1=0, select bank0
  2265  044E  0834               	movf	?___aldiv+1,w
  2266  044F  00CD               	movwf	get_average@OutPut+1
  2267  0450  0833               	movf	?___aldiv,w
  2268  0451  00CC               	movwf	get_average@OutPut
  2269                           
  2270                           ;average_calculations.c: 36: return OutPut;
  2271  0452  084D               	movf	get_average@OutPut+1,w
  2272  0453  00C3               	movwf	?_get_average+1
  2273  0454  084C               	movf	get_average@OutPut,w
  2274  0455  00C2               	movwf	?_get_average
  2275  0456  0008               	return
  2276  0457                     __end_of_get_average:	
  2277                           
  2278                           	psect	text8
  2279  04F1                     __ptext8:	
  2280 ;; *************** function ___lmul *****************
  2281 ;; Defined at:
  2282 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;  multiplier      4    6[BANK0 ] unsigned long 
  2285 ;;  multiplicand    4   10[BANK0 ] unsigned long 
  2286 ;; Auto vars:     Size  Location     Type
  2287 ;;  product         4   15[BANK0 ] unsigned long 
  2288 ;; Return value:  Size  Location     Type
  2289 ;;                  4    6[BANK0 ] unsigned long 
  2290 ;; Registers used:
  2291 ;;		wreg, status,2, status,0
  2292 ;; Tracked objects:
  2293 ;;		On entry : 0/0
  2294 ;;		On exit  : 0/0
  2295 ;;		Unchanged: 0/0
  2296 ;; Data sizes:     COMMON   BANK0   BANK1
  2297 ;;      Params:         0       8       0
  2298 ;;      Locals:         0       4       0
  2299 ;;      Temps:          0       1       0
  2300 ;;      Totals:         0      13       0
  2301 ;;Total ram usage:       13 bytes
  2302 ;; Hardware stack levels used:    1
  2303 ;; Hardware stack levels required when called:    3
  2304 ;; This function calls:
  2305 ;;		Nothing
  2306 ;; This function is called by:
  2307 ;;		_get_averageX
  2308 ;;		_get_averageY
  2309 ;;		_get_averageZ
  2310 ;;		_get_average
  2311 ;; This function uses a non-reentrant model
  2312 ;;
  2313                           
  2314                           
  2315                           ;psect for function ___lmul
  2316  04F1                     ___lmul:	
  2317                           
  2318                           ;incstack = 0
  2319                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2320  04F1  3000               	movlw	0
  2321  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  2322  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  2323  04F4  00B2               	movwf	___lmul@product+3
  2324  04F5  3000               	movlw	0
  2325  04F6  00B1               	movwf	___lmul@product+2
  2326  04F7  3000               	movlw	0
  2327  04F8  00B0               	movwf	___lmul@product+1
  2328  04F9  3000               	movlw	0
  2329  04FA  00AF               	movwf	___lmul@product
  2330  04FB                     l1523:	
  2331  04FB  1C26               	btfss	___lmul@multiplier,0
  2332  04FC  2D11               	goto	l1527
  2333  04FD  082A               	movf	___lmul@multiplicand,w
  2334  04FE  07AF               	addwf	___lmul@product,f
  2335  04FF  082B               	movf	___lmul@multiplicand+1,w
  2336  0500  1103               	clrz
  2337  0501  1803               	skipnc
  2338  0502  3E01               	addlw	1
  2339  0503  1D03               	btfss	3,2
  2340  0504  07B0               	addwf	___lmul@product+1,f
  2341  0505  082C               	movf	___lmul@multiplicand+2,w
  2342  0506  1103               	clrz
  2343  0507  1803               	skipnc
  2344  0508  3E01               	addlw	1
  2345  0509  1D03               	btfss	3,2
  2346  050A  07B1               	addwf	___lmul@product+2,f
  2347  050B  082D               	movf	___lmul@multiplicand+3,w
  2348  050C  1103               	clrz
  2349  050D  1803               	skipnc
  2350  050E  3E01               	addlw	1
  2351  050F  1D03               	btfss	3,2
  2352  0510  07B2               	addwf	___lmul@product+3,f
  2353  0511                     l1527:	
  2354  0511  3001               	movlw	1
  2355  0512  00AE               	movwf	??___lmul
  2356  0513                     u1095:	
  2357  0513  1003               	clrc
  2358  0514  0DAA               	rlf	___lmul@multiplicand,f
  2359  0515  0DAB               	rlf	___lmul@multiplicand+1,f
  2360  0516  0DAC               	rlf	___lmul@multiplicand+2,f
  2361  0517  0DAD               	rlf	___lmul@multiplicand+3,f
  2362  0518  0BAE               	decfsz	??___lmul,f
  2363  0519  2D13               	goto	u1095
  2364  051A  3001               	movlw	1
  2365  051B                     u1105:	
  2366  051B  1003               	clrc
  2367  051C  0CA9               	rrf	___lmul@multiplier+3,f
  2368  051D  0CA8               	rrf	___lmul@multiplier+2,f
  2369  051E  0CA7               	rrf	___lmul@multiplier+1,f
  2370  051F  0CA6               	rrf	___lmul@multiplier,f
  2371  0520  3EFF               	addlw	-1
  2372  0521  1D03               	skipz
  2373  0522  2D1B               	goto	u1105
  2374  0523  0829               	movf	___lmul@multiplier+3,w
  2375  0524  0428               	iorwf	___lmul@multiplier+2,w
  2376  0525  0427               	iorwf	___lmul@multiplier+1,w
  2377  0526  0426               	iorwf	___lmul@multiplier,w
  2378  0527  1D03               	skipz
  2379  0528  2CFB               	goto	l1523
  2380  0529  0832               	movf	___lmul@product+3,w
  2381  052A  00A9               	movwf	?___lmul+3
  2382  052B  0831               	movf	___lmul@product+2,w
  2383  052C  00A8               	movwf	?___lmul+2
  2384  052D  0830               	movf	___lmul@product+1,w
  2385  052E  00A7               	movwf	?___lmul+1
  2386  052F  082F               	movf	___lmul@product,w
  2387  0530  00A6               	movwf	?___lmul
  2388  0531  0008               	return
  2389  0532                     __end_of___lmul:	
  2390                           
  2391                           	psect	text9
  2392  0270                     __ptext9:	
  2393 ;; *************** function ___aldiv *****************
  2394 ;; Defined at:
  2395 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;  divisor         4   19[BANK0 ] long 
  2398 ;;  dividend        4   23[BANK0 ] long 
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;  quotient        4   30[BANK0 ] long 
  2401 ;;  sign            1   29[BANK0 ] unsigned char 
  2402 ;;  counter         1   28[BANK0 ] unsigned char 
  2403 ;; Return value:  Size  Location     Type
  2404 ;;                  4   19[BANK0 ] long 
  2405 ;; Registers used:
  2406 ;;		wreg, status,2, status,0
  2407 ;; Tracked objects:
  2408 ;;		On entry : 0/0
  2409 ;;		On exit  : 0/0
  2410 ;;		Unchanged: 0/0
  2411 ;; Data sizes:     COMMON   BANK0   BANK1
  2412 ;;      Params:         0       8       0
  2413 ;;      Locals:         0       6       0
  2414 ;;      Temps:          0       1       0
  2415 ;;      Totals:         0      15       0
  2416 ;;Total ram usage:       15 bytes
  2417 ;; Hardware stack levels used:    1
  2418 ;; Hardware stack levels required when called:    3
  2419 ;; This function calls:
  2420 ;;		Nothing
  2421 ;; This function is called by:
  2422 ;;		_get_averageX
  2423 ;;		_get_averageY
  2424 ;;		_get_averageZ
  2425 ;;		_get_average
  2426 ;; This function uses a non-reentrant model
  2427 ;;
  2428                           
  2429                           
  2430                           ;psect for function ___aldiv
  2431  0270                     ___aldiv:	
  2432                           
  2433                           ;incstack = 0
  2434                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2435  0270  1283               	bcf	3,5	;RP0=0, select bank0
  2436  0271  1303               	bcf	3,6	;RP1=0, select bank0
  2437  0272  01BD               	clrf	___aldiv@sign
  2438  0273  1FB6               	btfss	___aldiv@divisor+3,7
  2439  0274  2A82               	goto	l418
  2440  0275  09B3               	comf	___aldiv@divisor,f
  2441  0276  09B4               	comf	___aldiv@divisor+1,f
  2442  0277  09B5               	comf	___aldiv@divisor+2,f
  2443  0278  09B6               	comf	___aldiv@divisor+3,f
  2444  0279  0AB3               	incf	___aldiv@divisor,f
  2445  027A  1903               	skipnz
  2446  027B  0AB4               	incf	___aldiv@divisor+1,f
  2447  027C  1903               	skipnz
  2448  027D  0AB5               	incf	___aldiv@divisor+2,f
  2449  027E  1903               	skipnz
  2450  027F  0AB6               	incf	___aldiv@divisor+3,f
  2451  0280  01BD               	clrf	___aldiv@sign
  2452  0281  0ABD               	incf	___aldiv@sign,f
  2453  0282                     l418:	
  2454  0282  1FBA               	btfss	___aldiv@dividend+3,7
  2455  0283  2A93               	goto	l1545
  2456  0284  09B7               	comf	___aldiv@dividend,f
  2457  0285  09B8               	comf	___aldiv@dividend+1,f
  2458  0286  09B9               	comf	___aldiv@dividend+2,f
  2459  0287  09BA               	comf	___aldiv@dividend+3,f
  2460  0288  0AB7               	incf	___aldiv@dividend,f
  2461  0289  1903               	skipnz
  2462  028A  0AB8               	incf	___aldiv@dividend+1,f
  2463  028B  1903               	skipnz
  2464  028C  0AB9               	incf	___aldiv@dividend+2,f
  2465  028D  1903               	skipnz
  2466  028E  0ABA               	incf	___aldiv@dividend+3,f
  2467  028F  3001               	movlw	1
  2468  0290  00BB               	movwf	??___aldiv
  2469  0291  083B               	movf	??___aldiv,w
  2470  0292  06BD               	xorwf	___aldiv@sign,f
  2471  0293                     l1545:	
  2472  0293  3000               	movlw	0
  2473  0294  00C1               	movwf	___aldiv@quotient+3
  2474  0295  3000               	movlw	0
  2475  0296  00C0               	movwf	___aldiv@quotient+2
  2476  0297  3000               	movlw	0
  2477  0298  00BF               	movwf	___aldiv@quotient+1
  2478  0299  3000               	movlw	0
  2479  029A  00BE               	movwf	___aldiv@quotient
  2480  029B  0836               	movf	___aldiv@divisor+3,w
  2481  029C  0435               	iorwf	___aldiv@divisor+2,w
  2482  029D  0434               	iorwf	___aldiv@divisor+1,w
  2483  029E  0433               	iorwf	___aldiv@divisor,w
  2484  029F  1903               	skipnz
  2485  02A0  2AE8               	goto	l1567
  2486  02A1  01BC               	clrf	___aldiv@counter
  2487  02A2  0ABC               	incf	___aldiv@counter,f
  2488  02A3                     l1553:	
  2489  02A3  1BB6               	btfsc	___aldiv@divisor+3,7
  2490  02A4  2AB3               	goto	l1555
  2491  02A5  3001               	movlw	1
  2492  02A6  00BB               	movwf	??___aldiv
  2493  02A7                     u1155:	
  2494  02A7  1003               	clrc
  2495  02A8  0DB3               	rlf	___aldiv@divisor,f
  2496  02A9  0DB4               	rlf	___aldiv@divisor+1,f
  2497  02AA  0DB5               	rlf	___aldiv@divisor+2,f
  2498  02AB  0DB6               	rlf	___aldiv@divisor+3,f
  2499  02AC  0BBB               	decfsz	??___aldiv,f
  2500  02AD  2AA7               	goto	u1155
  2501  02AE  3001               	movlw	1
  2502  02AF  00BB               	movwf	??___aldiv
  2503  02B0  083B               	movf	??___aldiv,w
  2504  02B1  07BC               	addwf	___aldiv@counter,f
  2505  02B2  2AA3               	goto	l1553
  2506  02B3                     l1555:	
  2507  02B3  3001               	movlw	1
  2508  02B4  00BB               	movwf	??___aldiv
  2509  02B5                     u1175:	
  2510  02B5  1003               	clrc
  2511  02B6  0DBE               	rlf	___aldiv@quotient,f
  2512  02B7  0DBF               	rlf	___aldiv@quotient+1,f
  2513  02B8  0DC0               	rlf	___aldiv@quotient+2,f
  2514  02B9  0DC1               	rlf	___aldiv@quotient+3,f
  2515  02BA  0BBB               	decfsz	??___aldiv,f
  2516  02BB  2AB5               	goto	u1175
  2517  02BC  0836               	movf	___aldiv@divisor+3,w
  2518  02BD  023A               	subwf	___aldiv@dividend+3,w
  2519  02BE  1D03               	skipz
  2520  02BF  2ACA               	goto	u1185
  2521  02C0  0835               	movf	___aldiv@divisor+2,w
  2522  02C1  0239               	subwf	___aldiv@dividend+2,w
  2523  02C2  1D03               	skipz
  2524  02C3  2ACA               	goto	u1185
  2525  02C4  0834               	movf	___aldiv@divisor+1,w
  2526  02C5  0238               	subwf	___aldiv@dividend+1,w
  2527  02C6  1D03               	skipz
  2528  02C7  2ACA               	goto	u1185
  2529  02C8  0833               	movf	___aldiv@divisor,w
  2530  02C9  0237               	subwf	___aldiv@dividend,w
  2531  02CA                     u1185:	
  2532  02CA  1C03               	skipc
  2533  02CB  2ADB               	goto	l1563
  2534  02CC  0833               	movf	___aldiv@divisor,w
  2535  02CD  02B7               	subwf	___aldiv@dividend,f
  2536  02CE  0834               	movf	___aldiv@divisor+1,w
  2537  02CF  1C03               	skipc
  2538  02D0  0F34               	incfsz	___aldiv@divisor+1,w
  2539  02D1  02B8               	subwf	___aldiv@dividend+1,f
  2540  02D2  0835               	movf	___aldiv@divisor+2,w
  2541  02D3  1C03               	skipc
  2542  02D4  0F35               	incfsz	___aldiv@divisor+2,w
  2543  02D5  02B9               	subwf	___aldiv@dividend+2,f
  2544  02D6  0836               	movf	___aldiv@divisor+3,w
  2545  02D7  1C03               	skipc
  2546  02D8  0F36               	incfsz	___aldiv@divisor+3,w
  2547  02D9  02BA               	subwf	___aldiv@dividend+3,f
  2548  02DA  143E               	bsf	___aldiv@quotient,0
  2549  02DB                     l1563:	
  2550  02DB  3001               	movlw	1
  2551  02DC                     u1195:	
  2552  02DC  1003               	clrc
  2553  02DD  0CB6               	rrf	___aldiv@divisor+3,f
  2554  02DE  0CB5               	rrf	___aldiv@divisor+2,f
  2555  02DF  0CB4               	rrf	___aldiv@divisor+1,f
  2556  02E0  0CB3               	rrf	___aldiv@divisor,f
  2557  02E1  3EFF               	addlw	-1
  2558  02E2  1D03               	skipz
  2559  02E3  2ADC               	goto	u1195
  2560  02E4  3001               	movlw	1
  2561  02E5  02BC               	subwf	___aldiv@counter,f
  2562  02E6  1D03               	btfss	3,2
  2563  02E7  2AB3               	goto	l1555
  2564  02E8                     l1567:	
  2565  02E8  083D               	movf	___aldiv@sign,w
  2566  02E9  1903               	btfsc	3,2
  2567  02EA  2AF6               	goto	l1571
  2568  02EB  09BE               	comf	___aldiv@quotient,f
  2569  02EC  09BF               	comf	___aldiv@quotient+1,f
  2570  02ED  09C0               	comf	___aldiv@quotient+2,f
  2571  02EE  09C1               	comf	___aldiv@quotient+3,f
  2572  02EF  0ABE               	incf	___aldiv@quotient,f
  2573  02F0  1903               	skipnz
  2574  02F1  0ABF               	incf	___aldiv@quotient+1,f
  2575  02F2  1903               	skipnz
  2576  02F3  0AC0               	incf	___aldiv@quotient+2,f
  2577  02F4  1903               	skipnz
  2578  02F5  0AC1               	incf	___aldiv@quotient+3,f
  2579  02F6                     l1571:	
  2580  02F6  0841               	movf	___aldiv@quotient+3,w
  2581  02F7  00B6               	movwf	?___aldiv+3
  2582  02F8  0840               	movf	___aldiv@quotient+2,w
  2583  02F9  00B5               	movwf	?___aldiv+2
  2584  02FA  083F               	movf	___aldiv@quotient+1,w
  2585  02FB  00B4               	movwf	?___aldiv+1
  2586  02FC  083E               	movf	___aldiv@quotient,w
  2587  02FD  00B3               	movwf	?___aldiv
  2588  02FE  0008               	return
  2589  02FF                     __end_of___aldiv:	
  2590                           
  2591                           	psect	text10
  2592  0532                     __ptext10:	
  2593 ;; *************** function ___lwdiv *****************
  2594 ;; Defined at:
  2595 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2596 ;; Parameters:    Size  Location     Type
  2597 ;;  divisor         2    6[BANK0 ] unsigned int 
  2598 ;;  dividend        2    8[BANK0 ] unsigned int 
  2599 ;; Auto vars:     Size  Location     Type
  2600 ;;  quotient        2   12[BANK0 ] unsigned int 
  2601 ;;  counter         1   11[BANK0 ] unsigned char 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  2    6[BANK0 ] unsigned int 
  2604 ;; Registers used:
  2605 ;;		wreg, status,2, status,0
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1
  2611 ;;      Params:         0       4       0
  2612 ;;      Locals:         0       3       0
  2613 ;;      Temps:          0       1       0
  2614 ;;      Totals:         0       8       0
  2615 ;;Total ram usage:        8 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    3
  2618 ;; This function calls:
  2619 ;;		Nothing
  2620 ;; This function is called by:
  2621 ;;		_main
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           
  2626                           ;psect for function ___lwdiv
  2627  0532                     ___lwdiv:	
  2628                           
  2629                           ;incstack = 0
  2630                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2631  0532  1283               	bcf	3,5	;RP0=0, select bank0
  2632  0533  1303               	bcf	3,6	;RP1=0, select bank0
  2633  0534  01AC               	clrf	___lwdiv@quotient
  2634  0535  01AD               	clrf	___lwdiv@quotient+1
  2635  0536  0826               	movf	___lwdiv@divisor,w
  2636  0537  0427               	iorwf	___lwdiv@divisor+1,w
  2637  0538  1903               	btfsc	3,2
  2638  0539  2D6B               	goto	l1691
  2639  053A  01AB               	clrf	___lwdiv@counter
  2640  053B  0AAB               	incf	___lwdiv@counter,f
  2641  053C                     l1679:	
  2642  053C  1BA7               	btfsc	___lwdiv@divisor+1,7
  2643  053D  2D4A               	goto	l1681
  2644  053E  3001               	movlw	1
  2645  053F                     u1325:	
  2646  053F  1003               	clrc
  2647  0540  0DA6               	rlf	___lwdiv@divisor,f
  2648  0541  0DA7               	rlf	___lwdiv@divisor+1,f
  2649  0542  3EFF               	addlw	-1
  2650  0543  1D03               	skipz
  2651  0544  2D3F               	goto	u1325
  2652  0545  3001               	movlw	1
  2653  0546  00AA               	movwf	??___lwdiv
  2654  0547  082A               	movf	??___lwdiv,w
  2655  0548  07AB               	addwf	___lwdiv@counter,f
  2656  0549  2D3C               	goto	l1679
  2657  054A                     l1681:	
  2658  054A  3001               	movlw	1
  2659  054B                     u1345:	
  2660  054B  1003               	clrc
  2661  054C  0DAC               	rlf	___lwdiv@quotient,f
  2662  054D  0DAD               	rlf	___lwdiv@quotient+1,f
  2663  054E  3EFF               	addlw	-1
  2664  054F  1D03               	skipz
  2665  0550  2D4B               	goto	u1345
  2666  0551  0827               	movf	___lwdiv@divisor+1,w
  2667  0552  0229               	subwf	___lwdiv@dividend+1,w
  2668  0553  1D03               	skipz
  2669  0554  2D57               	goto	u1355
  2670  0555  0826               	movf	___lwdiv@divisor,w
  2671  0556  0228               	subwf	___lwdiv@dividend,w
  2672  0557                     u1355:	
  2673  0557  1C03               	skipc
  2674  0558  2D60               	goto	l1687
  2675  0559  0826               	movf	___lwdiv@divisor,w
  2676  055A  02A8               	subwf	___lwdiv@dividend,f
  2677  055B  0827               	movf	___lwdiv@divisor+1,w
  2678  055C  1C03               	skipc
  2679  055D  03A9               	decf	___lwdiv@dividend+1,f
  2680  055E  02A9               	subwf	___lwdiv@dividend+1,f
  2681  055F  142C               	bsf	___lwdiv@quotient,0
  2682  0560                     l1687:	
  2683  0560  3001               	movlw	1
  2684  0561                     u1365:	
  2685  0561  1003               	clrc
  2686  0562  0CA7               	rrf	___lwdiv@divisor+1,f
  2687  0563  0CA6               	rrf	___lwdiv@divisor,f
  2688  0564  3EFF               	addlw	-1
  2689  0565  1D03               	skipz
  2690  0566  2D61               	goto	u1365
  2691  0567  3001               	movlw	1
  2692  0568  02AB               	subwf	___lwdiv@counter,f
  2693  0569  1D03               	btfss	3,2
  2694  056A  2D4A               	goto	l1681
  2695  056B                     l1691:	
  2696  056B  082D               	movf	___lwdiv@quotient+1,w
  2697  056C  00A7               	movwf	?___lwdiv+1
  2698  056D  082C               	movf	___lwdiv@quotient,w
  2699  056E  00A6               	movwf	?___lwdiv
  2700  056F  0008               	return
  2701  0570                     __end_of___lwdiv:	
  2702                           
  2703                           	psect	text11
  2704  062B                     __ptext11:	
  2705 ;; *************** function _UART_vidInit *****************
  2706 ;; Defined at:
  2707 ;;		line 18 in file "UART_m.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;		None
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;		None
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg, status,2, pclath, cstack
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMMON   BANK0   BANK1
  2721 ;;      Params:         0       0       0
  2722 ;;      Locals:         0       0       0
  2723 ;;      Temps:          0       1       0
  2724 ;;      Totals:         0       1       0
  2725 ;;Total ram usage:        1 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:    4
  2728 ;; This function calls:
  2729 ;;		_UART_u8GetNodeID
  2730 ;; This function is called by:
  2731 ;;		_main
  2732 ;; This function uses a non-reentrant model
  2733 ;;
  2734                           
  2735                           
  2736                           ;psect for function _UART_vidInit
  2737  062B                     _UART_vidInit:	
  2738                           
  2739                           ;UART_m.c: 20: BRGH = 0;
  2740                           
  2741                           ;incstack = 0
  2742                           ; Regs used in _UART_vidInit: [wreg+status,2+pclath+cstack]
  2743  062B  1683               	bsf	3,5	;RP0=1, select bank1
  2744  062C  1303               	bcf	3,6	;RP1=0, select bank1
  2745  062D  1118               	bcf	24,2	;volatile
  2746                           
  2747                           ;UART_m.c: 21: SPBRG = (unsigned char)((((unsigned long)20000000 / 9600)/64) - 1);
  2748  062E  301F               	movlw	31
  2749  062F  0099               	movwf	25	;volatile
  2750                           
  2751                           ;UART_m.c: 22: SYNC = 0;
  2752  0630  1218               	bcf	24,4	;volatile
  2753                           
  2754                           ;UART_m.c: 23: SPEN = 1;
  2755  0631  1283               	bcf	3,5	;RP0=0, select bank0
  2756  0632  1303               	bcf	3,6	;RP1=0, select bank0
  2757  0633  1798               	bsf	24,7	;volatile
  2758                           
  2759                           ;UART_m.c: 24: TRISC6 = 1;
  2760  0634  1683               	bsf	3,5	;RP0=1, select bank1
  2761  0635  1303               	bcf	3,6	;RP1=0, select bank1
  2762  0636  1707               	bsf	7,6	;volatile
  2763                           
  2764                           ;UART_m.c: 25: TRISC7 = 1;
  2765  0637  1787               	bsf	7,7	;volatile
  2766                           
  2767                           ;UART_m.c: 26: TXEN = 1;
  2768  0638  1698               	bsf	24,5	;volatile
  2769                           
  2770                           ;UART_m.c: 27: RCIE = 1;
  2771  0639  168C               	bsf	12,5	;volatile
  2772                           
  2773                           ;UART_m.c: 28: PEIE = 1;
  2774  063A  170B               	bsf	11,6	;volatile
  2775                           
  2776                           ;UART_m.c: 29: GIE = 1;
  2777  063B  178B               	bsf	11,7	;volatile
  2778                           
  2779                           ;UART_m.c: 30: CREN = 1;
  2780  063C  1283               	bcf	3,5	;RP0=0, select bank0
  2781  063D  1303               	bcf	3,6	;RP1=0, select bank0
  2782  063E  1618               	bsf	24,4	;volatile
  2783                           
  2784                           ;UART_m.c: 32: ECU_ID = UART_u8GetNodeID();
  2785  063F  26AC               	fcall	_UART_u8GetNodeID
  2786  0640  1283               	bcf	3,5	;RP0=0, select bank0
  2787  0641  1303               	bcf	3,6	;RP1=0, select bank0
  2788  0642  00A7               	movwf	??_UART_vidInit
  2789  0643  0827               	movf	??_UART_vidInit,w
  2790  0644  00DC               	movwf	_ECU_ID
  2791  0645  0008               	return
  2792  0646                     __end_of_UART_vidInit:	
  2793                           
  2794                           	psect	text12
  2795  06AC                     __ptext12:	
  2796 ;; *************** function _UART_u8GetNodeID *****************
  2797 ;; Defined at:
  2798 ;;		line 75 in file "UART_m.c"
  2799 ;; Parameters:    Size  Location     Type
  2800 ;;		None
  2801 ;; Auto vars:     Size  Location     Type
  2802 ;;		None
  2803 ;; Return value:  Size  Location     Type
  2804 ;;                  1    wreg      unsigned char 
  2805 ;; Registers used:
  2806 ;;		wreg, status,2
  2807 ;; Tracked objects:
  2808 ;;		On entry : 0/0
  2809 ;;		On exit  : 0/0
  2810 ;;		Unchanged: 0/0
  2811 ;; Data sizes:     COMMON   BANK0   BANK1
  2812 ;;      Params:         0       0       0
  2813 ;;      Locals:         0       0       0
  2814 ;;      Temps:          0       1       0
  2815 ;;      Totals:         0       1       0
  2816 ;;Total ram usage:        1 bytes
  2817 ;; Hardware stack levels used:    1
  2818 ;; Hardware stack levels required when called:    3
  2819 ;; This function calls:
  2820 ;;		Nothing
  2821 ;; This function is called by:
  2822 ;;		_UART_vidInit
  2823 ;; This function uses a non-reentrant model
  2824 ;;
  2825                           
  2826                           
  2827                           ;psect for function _UART_u8GetNodeID
  2828  06AC                     _UART_u8GetNodeID:	
  2829                           
  2830                           ;UART_m.c: 77: Data_Buffer.ID = (PORTB & 0x7F);
  2831                           
  2832                           ;incstack = 0
  2833                           ; Regs used in _UART_u8GetNodeID: [wreg+status,2]
  2834  06AC  1283               	bcf	3,5	;RP0=0, select bank0
  2835  06AD  1303               	bcf	3,6	;RP1=0, select bank0
  2836  06AE  0806               	movf	6,w	;volatile
  2837  06AF  397F               	andlw	127
  2838  06B0  00A6               	movwf	??_UART_u8GetNodeID
  2839  06B1  0826               	movf	??_UART_u8GetNodeID,w
  2840  06B2  1683               	bsf	3,5	;RP0=1, select bank1
  2841  06B3  1303               	bcf	3,6	;RP1=0, select bank1
  2842  06B4  00B2               	movwf	_Data_Buffer^(0+128)
  2843                           
  2844                           ;UART_m.c: 78: return Data_Buffer.ID;
  2845  06B5  0832               	movf	_Data_Buffer^(0+128),w
  2846  06B6  0008               	return
  2847  06B7                     __end_of_UART_u8GetNodeID:	
  2848                           
  2849                           	psect	text13
  2850  066F                     __ptext13:	
  2851 ;; *************** function _I2CInit *****************
  2852 ;; Defined at:
  2853 ;;		line 23 in file "ADXL_m.c"
  2854 ;; Parameters:    Size  Location     Type
  2855 ;;		None
  2856 ;; Auto vars:     Size  Location     Type
  2857 ;;		None
  2858 ;; Return value:  Size  Location     Type
  2859 ;;                  1    wreg      void 
  2860 ;; Registers used:
  2861 ;;		wreg, status,2
  2862 ;; Tracked objects:
  2863 ;;		On entry : 0/0
  2864 ;;		On exit  : 0/0
  2865 ;;		Unchanged: 0/0
  2866 ;; Data sizes:     COMMON   BANK0   BANK1
  2867 ;;      Params:         0       0       0
  2868 ;;      Locals:         0       0       0
  2869 ;;      Temps:          0       0       0
  2870 ;;      Totals:         0       0       0
  2871 ;;Total ram usage:        0 bytes
  2872 ;; Hardware stack levels used:    1
  2873 ;; Hardware stack levels required when called:    3
  2874 ;; This function calls:
  2875 ;;		Nothing
  2876 ;; This function is called by:
  2877 ;;		_main
  2878 ;; This function uses a non-reentrant model
  2879 ;;
  2880                           
  2881                           
  2882                           ;psect for function _I2CInit
  2883  066F                     _I2CInit:	
  2884                           
  2885                           ;ADXL_m.c: 25: TRISCbits.TRISC3 = 1;
  2886                           
  2887                           ;incstack = 0
  2888                           ; Regs used in _I2CInit: [wreg+status,2]
  2889  066F  1683               	bsf	3,5	;RP0=1, select bank1
  2890  0670  1303               	bcf	3,6	;RP1=0, select bank1
  2891  0671  1587               	bsf	7,3	;volatile
  2892                           
  2893                           ;ADXL_m.c: 26: TRISCbits.TRISC4 = 1;
  2894  0672  1607               	bsf	7,4	;volatile
  2895                           
  2896                           ;ADXL_m.c: 27: SSPSTAT |= 0x80;
  2897  0673  1794               	bsf	20,7	;volatile
  2898                           
  2899                           ;ADXL_m.c: 28: SSPCON = 0x28;
  2900  0674  3028               	movlw	40
  2901  0675  1283               	bcf	3,5	;RP0=0, select bank0
  2902  0676  1303               	bcf	3,6	;RP1=0, select bank0
  2903  0677  0094               	movwf	20	;volatile
  2904                           
  2905                           ;ADXL_m.c: 30: SSPCON2 = 0x00;
  2906  0678  1683               	bsf	3,5	;RP0=1, select bank1
  2907  0679  1303               	bcf	3,6	;RP1=0, select bank1
  2908  067A  0191               	clrf	17	;volatile
  2909                           
  2910                           ;ADXL_m.c: 31: SSPADD = 49;
  2911  067B  3031               	movlw	49
  2912  067C  0093               	movwf	19	;volatile
  2913                           
  2914                           ;ADXL_m.c: 32: PIR1bits.SSPIF = 0;
  2915  067D  1283               	bcf	3,5	;RP0=0, select bank0
  2916  067E  1303               	bcf	3,6	;RP1=0, select bank0
  2917  067F  118C               	bcf	12,3	;volatile
  2918                           
  2919                           ;ADXL_m.c: 33: PIR2bits.BCLIF = 0;
  2920  0680  118D               	bcf	13,3	;volatile
  2921  0681  0008               	return
  2922  0682                     __end_of_I2CInit:	
  2923                           
  2924                           	psect	text14
  2925  06D3                     __ptext14:	
  2926 ;; *************** function _I2CAck *****************
  2927 ;; Defined at:
  2928 ;;		line 89 in file "ADXL_m.c"
  2929 ;; Parameters:    Size  Location     Type
  2930 ;;		None
  2931 ;; Auto vars:     Size  Location     Type
  2932 ;;		None
  2933 ;; Return value:  Size  Location     Type
  2934 ;;                  1    wreg      void 
  2935 ;; Registers used:
  2936 ;;		None
  2937 ;; Tracked objects:
  2938 ;;		On entry : 0/0
  2939 ;;		On exit  : 0/0
  2940 ;;		Unchanged: 0/0
  2941 ;; Data sizes:     COMMON   BANK0   BANK1
  2942 ;;      Params:         0       0       0
  2943 ;;      Locals:         0       0       0
  2944 ;;      Temps:          0       0       0
  2945 ;;      Totals:         0       0       0
  2946 ;;Total ram usage:        0 bytes
  2947 ;; Hardware stack levels used:    1
  2948 ;; Hardware stack levels required when called:    3
  2949 ;; This function calls:
  2950 ;;		Nothing
  2951 ;; This function is called by:
  2952 ;;		_main
  2953 ;; This function uses a non-reentrant model
  2954 ;;
  2955                           
  2956                           
  2957                           ;psect for function _I2CAck
  2958  06D3                     _I2CAck:	
  2959                           
  2960                           ;ADXL_m.c: 91: ACKDT = 0;
  2961                           
  2962                           ;incstack = 0
  2963                           ; Regs used in _I2CAck: []
  2964  06D3  1683               	bsf	3,5	;RP0=1, select bank1
  2965  06D4  1303               	bcf	3,6	;RP1=0, select bank1
  2966  06D5  1291               	bcf	17,5	;volatile
  2967                           
  2968                           ;ADXL_m.c: 92: ACKEN = 1;
  2969  06D6  1611               	bsf	17,4	;volatile
  2970  06D7                     l216:	
  2971                           ;ADXL_m.c: 93: while(ACKEN);
  2972                           
  2973  06D7  1E11               	btfss	17,4	;volatile
  2974  06D8  0008               	return
  2975  06D9  2ED7               	goto	l216
  2976  06DA                     __end_of_I2CAck:	
  2977                           
  2978                           	psect	text15
  2979  0646                     __ptext15:	
  2980 ;; *************** function _E_Read *****************
  2981 ;; Defined at:
  2982 ;;		line 171 in file "ADXL_m.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;  addr            2    8[BANK0 ] int 
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;  ch              1   11[BANK0 ] unsigned char 
  2987 ;; Return value:  Size  Location     Type
  2988 ;;                  1    wreg      unsigned char 
  2989 ;; Registers used:
  2990 ;;		wreg, status,2, status,0, pclath, cstack
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/0
  2993 ;;		On exit  : 0/0
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMMON   BANK0   BANK1
  2996 ;;      Params:         0       2       0
  2997 ;;      Locals:         0       1       0
  2998 ;;      Temps:          0       1       0
  2999 ;;      Totals:         0       4       0
  3000 ;;Total ram usage:        4 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:    5
  3003 ;; This function calls:
  3004 ;;		_I2CNak
  3005 ;;		_I2CRead
  3006 ;;		_I2CRestart
  3007 ;;		_I2CSend
  3008 ;;		_I2CStart
  3009 ;;		_I2CStop
  3010 ;; This function is called by:
  3011 ;;		_main
  3012 ;; This function uses a non-reentrant model
  3013 ;;
  3014                           
  3015                           
  3016                           ;psect for function _E_Read
  3017  0646                     _E_Read:	
  3018                           
  3019                           ;ADXL_m.c: 173: unsigned char ch;
  3020                           ;ADXL_m.c: 175: I2CStart();
  3021                           
  3022                           ;incstack = 0
  3023                           ; Regs used in _E_Read: [wreg+status,2+status,0+pclath+cstack]
  3024  0646  26E7               	fcall	_I2CStart
  3025                           
  3026                           ;ADXL_m.c: 177: I2CSend(0xA6);
  3027  0647  30A6               	movlw	166
  3028  0648  26B7               	fcall	_I2CSend
  3029                           
  3030                           ;ADXL_m.c: 179: I2CSend(addr);
  3031  0649  1283               	bcf	3,5	;RP0=0, select bank0
  3032  064A  1303               	bcf	3,6	;RP1=0, select bank0
  3033  064B  0828               	movf	E_Read@addr,w
  3034  064C  26B7               	fcall	_I2CSend
  3035                           
  3036                           ;ADXL_m.c: 181: I2CRestart();
  3037  064D  26ED               	fcall	_I2CRestart
  3038                           
  3039                           ;ADXL_m.c: 183: I2CSend(0xA7);
  3040  064E  30A7               	movlw	167
  3041  064F  26B7               	fcall	_I2CSend
  3042                           
  3043                           ;ADXL_m.c: 185: ch = I2CRead();
  3044  0650  2682               	fcall	_I2CRead
  3045  0651  1283               	bcf	3,5	;RP0=0, select bank0
  3046  0652  1303               	bcf	3,6	;RP1=0, select bank0
  3047  0653  00AA               	movwf	??_E_Read
  3048  0654  082A               	movf	??_E_Read,w
  3049  0655  00AB               	movwf	E_Read@ch
  3050                           
  3051                           ;ADXL_m.c: 186: I2CNak();
  3052  0656  26DA               	fcall	_I2CNak
  3053                           
  3054                           ;ADXL_m.c: 187: I2CStop();
  3055  0657  26E1               	fcall	_I2CStop
  3056                           
  3057                           ;ADXL_m.c: 188: return ch;
  3058  0658  1283               	bcf	3,5	;RP0=0, select bank0
  3059  0659  1303               	bcf	3,6	;RP1=0, select bank0
  3060  065A  082B               	movf	E_Read@ch,w
  3061  065B  0008               	return
  3062  065C                     __end_of_E_Read:	
  3063                           
  3064                           	psect	text16
  3065  06E1                     __ptext16:	
  3066 ;; *************** function _I2CStop *****************
  3067 ;; Defined at:
  3068 ;;		line 64 in file "ADXL_m.c"
  3069 ;; Parameters:    Size  Location     Type
  3070 ;;		None
  3071 ;; Auto vars:     Size  Location     Type
  3072 ;;		None
  3073 ;; Return value:  Size  Location     Type
  3074 ;;                  1    wreg      void 
  3075 ;; Registers used:
  3076 ;;		None
  3077 ;; Tracked objects:
  3078 ;;		On entry : 0/0
  3079 ;;		On exit  : 0/0
  3080 ;;		Unchanged: 0/0
  3081 ;; Data sizes:     COMMON   BANK0   BANK1
  3082 ;;      Params:         0       0       0
  3083 ;;      Locals:         0       0       0
  3084 ;;      Temps:          0       0       0
  3085 ;;      Totals:         0       0       0
  3086 ;;Total ram usage:        0 bytes
  3087 ;; Hardware stack levels used:    1
  3088 ;; Hardware stack levels required when called:    3
  3089 ;; This function calls:
  3090 ;;		Nothing
  3091 ;; This function is called by:
  3092 ;;		_main
  3093 ;;		_E_Write
  3094 ;;		_E_Read
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           
  3099                           ;psect for function _I2CStop
  3100  06E1                     _I2CStop:	
  3101                           
  3102                           ;ADXL_m.c: 66: PEN = 1;
  3103                           
  3104                           ;incstack = 0
  3105                           ; Regs used in _I2CStop: []
  3106  06E1  1683               	bsf	3,5	;RP0=1, select bank1
  3107  06E2  1303               	bcf	3,6	;RP1=0, select bank1
  3108  06E3  1511               	bsf	17,2	;volatile
  3109  06E4                     l204:	
  3110                           ;ADXL_m.c: 67: while(PEN);
  3111                           
  3112  06E4  1D11               	btfss	17,2	;volatile
  3113  06E5  0008               	return
  3114  06E6  2EE4               	goto	l204
  3115  06E7                     __end_of_I2CStop:	
  3116                           
  3117                           	psect	text17
  3118  06E7                     __ptext17:	
  3119 ;; *************** function _I2CStart *****************
  3120 ;; Defined at:
  3121 ;;		line 51 in file "ADXL_m.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;		None
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;		None
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		None
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMMON   BANK0   BANK1
  3135 ;;      Params:         0       0       0
  3136 ;;      Locals:         0       0       0
  3137 ;;      Temps:          0       0       0
  3138 ;;      Totals:         0       0       0
  3139 ;;Total ram usage:        0 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:    3
  3142 ;; This function calls:
  3143 ;;		Nothing
  3144 ;; This function is called by:
  3145 ;;		_main
  3146 ;;		_E_Write
  3147 ;;		_E_Read
  3148 ;; This function uses a non-reentrant model
  3149 ;;
  3150                           
  3151                           
  3152                           ;psect for function _I2CStart
  3153  06E7                     _I2CStart:	
  3154                           
  3155                           ;ADXL_m.c: 53: SEN = 1;
  3156                           
  3157                           ;incstack = 0
  3158                           ; Regs used in _I2CStart: []
  3159  06E7  1683               	bsf	3,5	;RP0=1, select bank1
  3160  06E8  1303               	bcf	3,6	;RP1=0, select bank1
  3161  06E9  1411               	bsf	17,0	;volatile
  3162  06EA                     l198:	
  3163                           ;ADXL_m.c: 54: while(SEN);
  3164                           
  3165  06EA  1C11               	btfss	17,0	;volatile
  3166  06EB  0008               	return
  3167  06EC  2EEA               	goto	l198
  3168  06ED                     __end_of_I2CStart:	
  3169                           
  3170                           	psect	text18
  3171  06B7                     __ptext18:	
  3172 ;; *************** function _I2CSend *****************
  3173 ;; Defined at:
  3174 ;;		line 128 in file "ADXL_m.c"
  3175 ;; Parameters:    Size  Location     Type
  3176 ;;  dat             1    wreg     unsigned char 
  3177 ;; Auto vars:     Size  Location     Type
  3178 ;;  dat             1    6[BANK0 ] unsigned char 
  3179 ;; Return value:  Size  Location     Type
  3180 ;;                  1    wreg      void 
  3181 ;; Registers used:
  3182 ;;		wreg, status,2, status,0, pclath, cstack
  3183 ;; Tracked objects:
  3184 ;;		On entry : 0/0
  3185 ;;		On exit  : 0/0
  3186 ;;		Unchanged: 0/0
  3187 ;; Data sizes:     COMMON   BANK0   BANK1
  3188 ;;      Params:         0       0       0
  3189 ;;      Locals:         0       1       0
  3190 ;;      Temps:          0       0       0
  3191 ;;      Totals:         0       1       0
  3192 ;;Total ram usage:        1 bytes
  3193 ;; Hardware stack levels used:    1
  3194 ;; Hardware stack levels required when called:    4
  3195 ;; This function calls:
  3196 ;;		_I2CWait
  3197 ;; This function is called by:
  3198 ;;		_main
  3199 ;;		_E_Write
  3200 ;;		_E_Read
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           
  3205                           ;psect for function _I2CSend
  3206  06B7                     _I2CSend:	
  3207                           
  3208                           ;incstack = 0
  3209                           ; Regs used in _I2CSend: [wreg+status,2+status,0+pclath+cstack]
  3210                           ;I2CSend@dat stored from wreg
  3211  06B7  1283               	bcf	3,5	;RP0=0, select bank0
  3212  06B8  1303               	bcf	3,6	;RP1=0, select bank0
  3213  06B9  00A6               	movwf	I2CSend@dat
  3214                           
  3215                           ;ADXL_m.c: 130: SSPBUF = dat;
  3216  06BA  0826               	movf	I2CSend@dat,w
  3217  06BB  0093               	movwf	19	;volatile
  3218  06BC                     l234:	
  3219                           ;ADXL_m.c: 131: while(BF);
  3220                           
  3221  06BC  1683               	bsf	3,5	;RP0=1, select bank1
  3222  06BD  1303               	bcf	3,6	;RP1=0, select bank1
  3223  06BE  1814               	btfsc	20,0	;volatile
  3224  06BF  2EBC               	goto	l234
  3225                           
  3226                           ;ADXL_m.c: 132: I2CWait();
  3227  06C0  26C2               	fcall	_I2CWait
  3228  06C1  0008               	return
  3229  06C2                     __end_of_I2CSend:	
  3230                           
  3231                           	psect	text19
  3232  06ED                     __ptext19:	
  3233 ;; *************** function _I2CRestart *****************
  3234 ;; Defined at:
  3235 ;;		line 77 in file "ADXL_m.c"
  3236 ;; Parameters:    Size  Location     Type
  3237 ;;		None
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;		None
  3240 ;; Return value:  Size  Location     Type
  3241 ;;                  1    wreg      void 
  3242 ;; Registers used:
  3243 ;;		None
  3244 ;; Tracked objects:
  3245 ;;		On entry : 0/0
  3246 ;;		On exit  : 0/0
  3247 ;;		Unchanged: 0/0
  3248 ;; Data sizes:     COMMON   BANK0   BANK1
  3249 ;;      Params:         0       0       0
  3250 ;;      Locals:         0       0       0
  3251 ;;      Temps:          0       0       0
  3252 ;;      Totals:         0       0       0
  3253 ;;Total ram usage:        0 bytes
  3254 ;; Hardware stack levels used:    1
  3255 ;; Hardware stack levels required when called:    3
  3256 ;; This function calls:
  3257 ;;		Nothing
  3258 ;; This function is called by:
  3259 ;;		_main
  3260 ;;		_E_Read
  3261 ;; This function uses a non-reentrant model
  3262 ;;
  3263                           
  3264                           
  3265                           ;psect for function _I2CRestart
  3266  06ED                     _I2CRestart:	
  3267                           
  3268                           ;ADXL_m.c: 79: RSEN = 1;
  3269                           
  3270                           ;incstack = 0
  3271                           ; Regs used in _I2CRestart: []
  3272  06ED  1683               	bsf	3,5	;RP0=1, select bank1
  3273  06EE  1303               	bcf	3,6	;RP1=0, select bank1
  3274  06EF  1491               	bsf	17,1	;volatile
  3275  06F0                     l210:	
  3276                           ;ADXL_m.c: 80: while(RSEN);
  3277                           
  3278  06F0  1C91               	btfss	17,1	;volatile
  3279  06F1  0008               	return
  3280  06F2  2EF0               	goto	l210
  3281  06F3                     __end_of_I2CRestart:	
  3282                           
  3283                           	psect	text20
  3284  0682                     __ptext20:	
  3285 ;; *************** function _I2CRead *****************
  3286 ;; Defined at:
  3287 ;;		line 141 in file "ADXL_m.c"
  3288 ;; Parameters:    Size  Location     Type
  3289 ;;		None
  3290 ;; Auto vars:     Size  Location     Type
  3291 ;;  temp            1    7[BANK0 ] unsigned char 
  3292 ;; Return value:  Size  Location     Type
  3293 ;;                  1    wreg      unsigned char 
  3294 ;; Registers used:
  3295 ;;		wreg, status,2, status,0, pclath, cstack
  3296 ;; Tracked objects:
  3297 ;;		On entry : 0/0
  3298 ;;		On exit  : 0/0
  3299 ;;		Unchanged: 0/0
  3300 ;; Data sizes:     COMMON   BANK0   BANK1
  3301 ;;      Params:         0       0       0
  3302 ;;      Locals:         0       1       0
  3303 ;;      Temps:          0       1       0
  3304 ;;      Totals:         0       2       0
  3305 ;;Total ram usage:        2 bytes
  3306 ;; Hardware stack levels used:    1
  3307 ;; Hardware stack levels required when called:    4
  3308 ;; This function calls:
  3309 ;;		_I2CWait
  3310 ;; This function is called by:
  3311 ;;		_main
  3312 ;;		_E_Read
  3313 ;; This function uses a non-reentrant model
  3314 ;;
  3315                           
  3316                           
  3317                           ;psect for function _I2CRead
  3318  0682                     _I2CRead:	
  3319                           
  3320                           ;ADXL_m.c: 143: unsigned char temp;
  3321                           ;ADXL_m.c: 145: RCEN = 1;
  3322                           
  3323                           ;incstack = 0
  3324                           ; Regs used in _I2CRead: [wreg+status,2+status,0+pclath+cstack]
  3325  0682  1683               	bsf	3,5	;RP0=1, select bank1
  3326  0683  1303               	bcf	3,6	;RP1=0, select bank1
  3327  0684  1591               	bsf	17,3	;volatile
  3328  0685                     l240:	
  3329                           ;ADXL_m.c: 146: while(!BF);
  3330                           
  3331  0685  1C14               	btfss	20,0	;volatile
  3332  0686  2E85               	goto	l240
  3333                           
  3334                           ;ADXL_m.c: 147: temp = SSPBUF;
  3335  0687  1283               	bcf	3,5	;RP0=0, select bank0
  3336  0688  1303               	bcf	3,6	;RP1=0, select bank0
  3337  0689  0813               	movf	19,w	;volatile
  3338  068A  00A6               	movwf	??_I2CRead
  3339  068B  0826               	movf	??_I2CRead,w
  3340  068C  00A7               	movwf	I2CRead@temp
  3341                           
  3342                           ;ADXL_m.c: 148: I2CWait();
  3343  068D  26C2               	fcall	_I2CWait
  3344                           
  3345                           ;ADXL_m.c: 149: return temp;
  3346  068E  1283               	bcf	3,5	;RP0=0, select bank0
  3347  068F  1303               	bcf	3,6	;RP1=0, select bank0
  3348  0690  0827               	movf	I2CRead@temp,w
  3349  0691  0008               	return
  3350  0692                     __end_of_I2CRead:	
  3351                           
  3352                           	psect	text21
  3353  06C2                     __ptext21:	
  3354 ;; *************** function _I2CWait *****************
  3355 ;; Defined at:
  3356 ;;		line 115 in file "ADXL_m.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;		None
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;		None
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  1    wreg      void 
  3363 ;; Registers used:
  3364 ;;		wreg, status,2
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMMON   BANK0   BANK1
  3370 ;;      Params:         0       0       0
  3371 ;;      Locals:         0       0       0
  3372 ;;      Temps:          0       0       0
  3373 ;;      Totals:         0       0       0
  3374 ;;Total ram usage:        0 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:    3
  3377 ;; This function calls:
  3378 ;;		Nothing
  3379 ;; This function is called by:
  3380 ;;		_I2CSend
  3381 ;;		_I2CRead
  3382 ;; This function uses a non-reentrant model
  3383 ;;
  3384                           
  3385                           
  3386                           ;psect for function _I2CWait
  3387  06C2                     _I2CWait:	
  3388  06C2                     l1477:	
  3389                           ;ADXL_m.c: 117: while ((SSPCON2 & 0x1F ) || ( SSPSTAT & 0x04 ) );
  3390                           
  3391                           ;incstack = 0
  3392                           ; Regs used in _I2CWait: [wreg+status,2]
  3393                           
  3394  06C2  1683               	bsf	3,5	;RP0=1, select bank1
  3395  06C3  1303               	bcf	3,6	;RP1=0, select bank1
  3396  06C4  0811               	movf	17,w	;volatile
  3397  06C5  391F               	andlw	31
  3398  06C6  1D03               	btfss	3,2
  3399  06C7  2EC2               	goto	l1477
  3400  06C8  1D14               	btfss	20,2	;volatile
  3401  06C9  0008               	return
  3402  06CA  2EC2               	goto	l1477
  3403  06CB                     __end_of_I2CWait:	
  3404                           
  3405                           	psect	text22
  3406  06DA                     __ptext22:	
  3407 ;; *************** function _I2CNak *****************
  3408 ;; Defined at:
  3409 ;;		line 102 in file "ADXL_m.c"
  3410 ;; Parameters:    Size  Location     Type
  3411 ;;		None
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;		None
  3414 ;; Return value:  Size  Location     Type
  3415 ;;                  1    wreg      void 
  3416 ;; Registers used:
  3417 ;;		None
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMMON   BANK0   BANK1
  3423 ;;      Params:         0       0       0
  3424 ;;      Locals:         0       0       0
  3425 ;;      Temps:          0       0       0
  3426 ;;      Totals:         0       0       0
  3427 ;;Total ram usage:        0 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; Hardware stack levels required when called:    3
  3430 ;; This function calls:
  3431 ;;		Nothing
  3432 ;; This function is called by:
  3433 ;;		_main
  3434 ;;		_E_Read
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           
  3439                           ;psect for function _I2CNak
  3440  06DA                     _I2CNak:	
  3441                           
  3442                           ;ADXL_m.c: 104: ACKDT = 1;
  3443                           
  3444                           ;incstack = 0
  3445                           ; Regs used in _I2CNak: []
  3446  06DA  1683               	bsf	3,5	;RP0=1, select bank1
  3447  06DB  1303               	bcf	3,6	;RP1=0, select bank1
  3448  06DC  1691               	bsf	17,5	;volatile
  3449                           
  3450                           ;ADXL_m.c: 105: ACKEN = 1;
  3451  06DD  1611               	bsf	17,4	;volatile
  3452  06DE                     l222:	
  3453                           ;ADXL_m.c: 106: while(ACKEN);
  3454                           
  3455  06DE  1E11               	btfss	17,4	;volatile
  3456  06DF  0008               	return
  3457  06E0  2EDE               	goto	l222
  3458  06E1                     __end_of_I2CNak:	
  3459                           
  3460                           	psect	text23
  3461  0607                     __ptext23:	
  3462 ;; *************** function _UART_vidNewDataReceived *****************
  3463 ;; Defined at:
  3464 ;;		line 35 in file "UART_m.c"
  3465 ;; Parameters:    Size  Location     Type
  3466 ;;		None
  3467 ;; Auto vars:     Size  Location     Type
  3468 ;;		None
  3469 ;; Return value:  Size  Location     Type
  3470 ;;                  1    wreg      void 
  3471 ;; Registers used:
  3472 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3473 ;; Tracked objects:
  3474 ;;		On entry : 0/0
  3475 ;;		On exit  : 0/0
  3476 ;;		Unchanged: 0/0
  3477 ;; Data sizes:     COMMON   BANK0   BANK1
  3478 ;;      Params:         0       0       0
  3479 ;;      Locals:         0       0       0
  3480 ;;      Temps:          0       6       0
  3481 ;;      Totals:         0       6       0
  3482 ;;Total ram usage:        6 bytes
  3483 ;; Hardware stack levels used:    1
  3484 ;; Hardware stack levels required when called:    2
  3485 ;; This function calls:
  3486 ;;		_FinishBuffer
  3487 ;;		_Get_CRC8
  3488 ;;		_RS845_ManageState
  3489 ;; This function is called by:
  3490 ;;		Interrupt level 1
  3491 ;; This function uses a non-reentrant model
  3492 ;;
  3493                           
  3494                           
  3495                           ;psect for function _UART_vidNewDataReceived
  3496  0607                     _UART_vidNewDataReceived:	
  3497                           
  3498                           ;UART_m.c: 37: if(RCIF == 1)
  3499  0607  1E8C               	btfss	12,5	;volatile
  3500  0608  2E20               	goto	i1l137
  3501                           
  3502                           ;UART_m.c: 38: {
  3503                           ;UART_m.c: 39: GIE = 0;
  3504  0609  138B               	bcf	11,7	;volatile
  3505                           
  3506                           ;UART_m.c: 40: ptrFinishBuffer();
  3507  060A  087D               	movf	_ptrFinishBuffer,w
  3508  060B  2101               	fcall	i1fptable
  3509                           
  3510                           ;UART_m.c: 41: Data_Buffer.CRC = Get_CRC8(&Data_Buffer.DATA_BUFFER[0],((unsigned char)12
      +                          ) - 1);
  3511  060C  300B               	movlw	11
  3512  060D  1283               	bcf	3,5	;RP0=0, select bank0
  3513  060E  1303               	bcf	3,6	;RP1=0, select bank0
  3514  060F  00A0               	movwf	??_UART_vidNewDataReceived
  3515  0610  0820               	movf	??_UART_vidNewDataReceived,w
  3516  0611  00F0               	movwf	Get_CRC8@DataSize
  3517  0612  30B2               	movlw	(low (_Data_Buffer| 0))& (0+255)
  3518  0613  25D6               	fcall	_Get_CRC8
  3519  0614  1283               	bcf	3,5	;RP0=0, select bank0
  3520  0615  1303               	bcf	3,6	;RP1=0, select bank0
  3521  0616  00A1               	movwf	??_UART_vidNewDataReceived+1
  3522  0617  0821               	movf	??_UART_vidNewDataReceived+1,w
  3523  0618  1683               	bsf	3,5	;RP0=1, select bank1
  3524  0619  1303               	bcf	3,6	;RP1=0, select bank1
  3525  061A  00BD               	movwf	(_Data_Buffer^(0+128)+11)
  3526                           
  3527                           ;UART_m.c: 42: RS845_ManageState();
  3528  061B  269F               	fcall	_RS845_ManageState
  3529                           
  3530                           ;UART_m.c: 43: GIE = 1;
  3531  061C  178B               	bsf	11,7	;volatile
  3532                           
  3533                           ;UART_m.c: 44: RCIF = 0;
  3534  061D  1283               	bcf	3,5	;RP0=0, select bank0
  3535  061E  1303               	bcf	3,6	;RP1=0, select bank0
  3536  061F  128C               	bcf	12,5	;volatile
  3537  0620                     i1l137:	
  3538                           ;UART_m.c: 46: else
  3539                           ;UART_m.c: 47: {
  3540                           
  3541                           ;UART_m.c: 45: }
  3542                           
  3543  0620  0825               	movf	??_UART_vidNewDataReceived+5,w
  3544  0621  00FF               	movwf	127
  3545  0622  0824               	movf	??_UART_vidNewDataReceived+4,w
  3546  0623  008A               	movwf	10
  3547  0624  0823               	movf	??_UART_vidNewDataReceived+3,w
  3548  0625  0084               	movwf	4
  3549  0626  0E22               	swapf	(??_UART_vidNewDataReceived+2)^0,w
  3550  0627  0083               	movwf	3
  3551  0628  0EFE               	swapf	126,f
  3552  0629  0E7E               	swapf	126,w
  3553  062A  0009               	retfie
  3554  062B                     __end_of_UART_vidNewDataReceived:	
  3555                           
  3556                           	psect	intentry
  3557  0004                     __pintentry:	
  3558                           ;incstack = 0
  3559                           ; Regs used in _UART_vidNewDataReceived: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3560                           
  3561  0004                     interrupt_function:	
  3562  007E                     saved_w	set	btemp
  3563  0004  00FE               	movwf	btemp
  3564  0005  0E03               	swapf	3,w
  3565  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3566  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3567  0008  00A2               	movwf	??_UART_vidNewDataReceived+2
  3568  0009  0804               	movf	4,w
  3569  000A  00A3               	movwf	??_UART_vidNewDataReceived+3
  3570  000B  080A               	movf	10,w
  3571  000C  00A4               	movwf	??_UART_vidNewDataReceived+4
  3572  000D  087F               	movf	btemp+1,w
  3573  000E  00A5               	movwf	??_UART_vidNewDataReceived+5
  3574  000F  2E07               	ljmp	_UART_vidNewDataReceived
  3575                           
  3576                           	psect	text24
  3577  069F                     __ptext24:	
  3578 ;; *************** function _RS845_ManageState *****************
  3579 ;; Defined at:
  3580 ;;		line 52 in file "UART_m.c"
  3581 ;; Parameters:    Size  Location     Type
  3582 ;;		None
  3583 ;; Auto vars:     Size  Location     Type
  3584 ;;		None
  3585 ;; Return value:  Size  Location     Type
  3586 ;;                  1    wreg      void 
  3587 ;; Registers used:
  3588 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3589 ;; Tracked objects:
  3590 ;;		On entry : 0/0
  3591 ;;		On exit  : 0/0
  3592 ;;		Unchanged: 0/0
  3593 ;; Data sizes:     COMMON   BANK0   BANK1
  3594 ;;      Params:         0       0       0
  3595 ;;      Locals:         0       0       0
  3596 ;;      Temps:          1       0       0
  3597 ;;      Totals:         1       0       0
  3598 ;;Total ram usage:        1 bytes
  3599 ;; Hardware stack levels used:    1
  3600 ;; Hardware stack levels required when called:    1
  3601 ;; This function calls:
  3602 ;;		_UART_vidSend
  3603 ;; This function is called by:
  3604 ;;		_UART_vidNewDataReceived
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           
  3609                           ;psect for function _RS845_ManageState
  3610  069F                     _RS845_ManageState:	
  3611                           
  3612                           ;UART_m.c: 54: if(RCREG == (unsigned char)ECU_ID)
  3613                           
  3614                           ;incstack = 0
  3615                           ; Regs used in _RS845_ManageState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3616  069F  1283               	bcf	3,5	;RP0=0, select bank0
  3617  06A0  1303               	bcf	3,6	;RP1=0, select bank0
  3618  06A1  081A               	movf	26,w	;volatile
  3619  06A2  065C               	xorwf	_ECU_ID,w
  3620  06A3  1D03               	skipz
  3621  06A4  0008               	return
  3622                           
  3623                           ;UART_m.c: 55: {
  3624                           ;UART_m.c: 56: UART_vidSend(&Data_Buffer.DATA_BUFFER[0],((unsigned char)12));
  3625  06A5  300C               	movlw	12
  3626  06A6  00F6               	movwf	??_RS845_ManageState
  3627  06A7  0876               	movf	??_RS845_ManageState,w
  3628  06A8  00F0               	movwf	UART_vidSend@Len
  3629  06A9  30B2               	movlw	(low (_Data_Buffer| 0))& (0+255)
  3630  06AA  25A5               	fcall	_UART_vidSend
  3631                           
  3632                           ;UART_m.c: 57: }
  3633  06AB  0008               	return
  3634  06AC                     __end_of_RS845_ManageState:	
  3635                           ;UART_m.c: 58: else
  3636                           ;UART_m.c: 59: {
  3637                           
  3638                           
  3639                           	psect	text25
  3640  05A5                     __ptext25:	
  3641 ;; *************** function _UART_vidSend *****************
  3642 ;; Defined at:
  3643 ;;		line 63 in file "UART_m.c"
  3644 ;; Parameters:    Size  Location     Type
  3645 ;;  data            1    wreg     const PTR const unsigned
  3646 ;;		 -> Data_Buffer(12), 
  3647 ;;  Len             1    0[COMMON] const unsigned char 
  3648 ;; Auto vars:     Size  Location     Type
  3649 ;;  data            1    3[COMMON] const PTR const unsigned
  3650 ;;		 -> Data_Buffer(12), 
  3651 ;;  UART_u16Inde    2    4[COMMON] unsigned short 
  3652 ;; Return value:  Size  Location     Type
  3653 ;;                  1    wreg      void 
  3654 ;; Registers used:
  3655 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3656 ;; Tracked objects:
  3657 ;;		On entry : 0/0
  3658 ;;		On exit  : 0/0
  3659 ;;		Unchanged: 0/0
  3660 ;; Data sizes:     COMMON   BANK0   BANK1
  3661 ;;      Params:         1       0       0
  3662 ;;      Locals:         3       0       0
  3663 ;;      Temps:          2       0       0
  3664 ;;      Totals:         6       0       0
  3665 ;;Total ram usage:        6 bytes
  3666 ;; Hardware stack levels used:    1
  3667 ;; This function calls:
  3668 ;;		Nothing
  3669 ;; This function is called by:
  3670 ;;		_RS845_ManageState
  3671 ;; This function uses a non-reentrant model
  3672 ;;
  3673                           
  3674                           
  3675                           ;psect for function _UART_vidSend
  3676  05A5                     _UART_vidSend:	
  3677                           
  3678                           ;incstack = 0
  3679                           ; Regs used in _UART_vidSend: [wreg-fsr0h+status,2+status,0]
  3680                           ;UART_vidSend@data stored from wreg
  3681  05A5  00F3               	movwf	UART_vidSend@data
  3682                           
  3683                           ;UART_m.c: 65: unsigned short UART_u16Index = 0;
  3684  05A6  01F4               	clrf	UART_vidSend@UART_u16Index
  3685  05A7  01F5               	clrf	UART_vidSend@UART_u16Index+1
  3686                           
  3687                           ;UART_m.c: 67: for(UART_u16Index = 0; UART_u16Index < Len; UART_u16Index++)
  3688  05A8  01F4               	clrf	UART_vidSend@UART_u16Index
  3689  05A9  01F5               	clrf	UART_vidSend@UART_u16Index+1
  3690  05AA  0870               	movf	UART_vidSend@Len,w
  3691  05AB  00F1               	movwf	??_UART_vidSend
  3692  05AC  01F2               	clrf	??_UART_vidSend+1
  3693  05AD  0872               	movf	??_UART_vidSend+1,w
  3694  05AE  0275               	subwf	UART_vidSend@UART_u16Index+1,w
  3695  05AF  1D03               	skipz
  3696  05B0  2DB3               	goto	u59_25
  3697  05B1  0871               	movf	??_UART_vidSend,w
  3698  05B2  0274               	subwf	UART_vidSend@UART_u16Index,w
  3699  05B3                     u59_25:	
  3700  05B3  1803               	btfsc	3,0
  3701  05B4  2DD2               	goto	i1l146
  3702  05B5                     i1l147:	
  3703                           ;UART_m.c: 68: {
  3704                           ;UART_m.c: 69: while(PIR1bits.TXIF == 0);
  3705                           
  3706  05B5  1283               	bcf	3,5	;RP0=0, select bank0
  3707  05B6  1303               	bcf	3,6	;RP1=0, select bank0
  3708  05B7  1E0C               	btfss	12,4	;volatile
  3709  05B8  2DB5               	goto	i1l147
  3710                           
  3711                           ;UART_m.c: 70: TXREG = data[UART_u16Index];
  3712  05B9  0874               	movf	UART_vidSend@UART_u16Index,w
  3713  05BA  0773               	addwf	UART_vidSend@data,w
  3714  05BB  00F1               	movwf	??_UART_vidSend
  3715  05BC  0871               	movf	??_UART_vidSend,w
  3716  05BD  0084               	movwf	4
  3717  05BE  1383               	bcf	3,7	;select IRP bank0
  3718  05BF  0800               	movf	0,w
  3719  05C0  0099               	movwf	25	;volatile
  3720  05C1  3001               	movlw	1
  3721  05C2  07F4               	addwf	UART_vidSend@UART_u16Index,f
  3722  05C3  1803               	skipnc
  3723  05C4  0AF5               	incf	UART_vidSend@UART_u16Index+1,f
  3724  05C5  3000               	movlw	0
  3725  05C6  07F5               	addwf	UART_vidSend@UART_u16Index+1,f
  3726  05C7  0870               	movf	UART_vidSend@Len,w
  3727  05C8  00F1               	movwf	??_UART_vidSend
  3728  05C9  01F2               	clrf	??_UART_vidSend+1
  3729  05CA  0872               	movf	??_UART_vidSend+1,w
  3730  05CB  0275               	subwf	UART_vidSend@UART_u16Index+1,w
  3731  05CC  1D03               	skipz
  3732  05CD  2DD0               	goto	u61_25
  3733  05CE  0871               	movf	??_UART_vidSend,w
  3734  05CF  0274               	subwf	UART_vidSend@UART_u16Index,w
  3735  05D0                     u61_25:	
  3736  05D0  1C03               	skipc
  3737  05D1  2DB5               	goto	i1l147
  3738  05D2                     i1l146:	
  3739                           
  3740                           ;UART_m.c: 71: }
  3741                           ;UART_m.c: 72: PIR1bits.TXIF = 0;
  3742  05D2  1283               	bcf	3,5	;RP0=0, select bank0
  3743  05D3  1303               	bcf	3,6	;RP1=0, select bank0
  3744  05D4  120C               	bcf	12,4	;volatile
  3745  05D5  0008               	return
  3746  05D6                     __end_of_UART_vidSend:	
  3747                           
  3748                           	psect	text26
  3749  05D6                     __ptext26:	
  3750 ;; *************** function _Get_CRC8 *****************
  3751 ;; Defined at:
  3752 ;;		line 10 in file "CRC8.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  Data            1    wreg     PTR unsigned char 
  3755 ;;		 -> Data_Buffer(12), 
  3756 ;;  DataSize        1    0[COMMON] unsigned char 
  3757 ;; Auto vars:     Size  Location     Type
  3758 ;;  Data            1    3[COMMON] PTR unsigned char 
  3759 ;;		 -> Data_Buffer(12), 
  3760 ;;  CRC             1    6[COMMON] unsigned char 
  3761 ;;  bitIndex        1    5[COMMON] unsigned char 
  3762 ;;  DataIndex       1    4[COMMON] unsigned char 
  3763 ;; Return value:  Size  Location     Type
  3764 ;;                  1    wreg      unsigned char 
  3765 ;; Registers used:
  3766 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMMON   BANK0   BANK1
  3772 ;;      Params:         1       0       0
  3773 ;;      Locals:         4       0       0
  3774 ;;      Temps:          2       0       0
  3775 ;;      Totals:         7       0       0
  3776 ;;Total ram usage:        7 bytes
  3777 ;; Hardware stack levels used:    1
  3778 ;; This function calls:
  3779 ;;		Nothing
  3780 ;; This function is called by:
  3781 ;;		_UART_vidNewDataReceived
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784                           
  3785                           
  3786                           ;psect for function _Get_CRC8
  3787  05D6                     _Get_CRC8:	
  3788                           
  3789                           ;incstack = 0
  3790                           ; Regs used in _Get_CRC8: [wreg-fsr0h+status,2+status,0]
  3791                           ;Get_CRC8@Data stored from wreg
  3792  05D6  00F3               	movwf	Get_CRC8@Data
  3793                           
  3794                           ;CRC8.c: 12: unsigned char CRC = 0;
  3795  05D7  01F6               	clrf	Get_CRC8@CRC
  3796                           
  3797                           ;CRC8.c: 13: char DataIndex,bitIndex;
  3798                           ;CRC8.c: 15: for(DataIndex = 0; DataIndex < DataSize; DataIndex++)
  3799  05D8  01F4               	clrf	Get_CRC8@DataIndex
  3800  05D9                     i1l1363:	
  3801  05D9  0870               	movf	Get_CRC8@DataSize,w
  3802  05DA  0274               	subwf	Get_CRC8@DataIndex,w
  3803  05DB  1803               	btfsc	3,0
  3804  05DC  2E05               	goto	i1l1365
  3805                           
  3806                           ;CRC8.c: 16: {
  3807                           ;CRC8.c: 18: CRC ^= Data[DataIndex];
  3808  05DD  0874               	movf	Get_CRC8@DataIndex,w
  3809  05DE  0773               	addwf	Get_CRC8@Data,w
  3810  05DF  00F1               	movwf	??_Get_CRC8
  3811  05E0  0871               	movf	??_Get_CRC8,w
  3812  05E1  0084               	movwf	4
  3813  05E2  1383               	bcf	3,7	;select IRP bank0
  3814  05E3  0800               	movf	0,w
  3815  05E4  00F2               	movwf	??_Get_CRC8+1
  3816  05E5  0872               	movf	??_Get_CRC8+1,w
  3817  05E6  06F6               	xorwf	Get_CRC8@CRC,f
  3818                           
  3819                           ;CRC8.c: 19: for(bitIndex = 0; bitIndex < 8; bitIndex++)
  3820  05E7  01F5               	clrf	Get_CRC8@bitIndex
  3821  05E8  3008               	movlw	8
  3822  05E9  0275               	subwf	Get_CRC8@bitIndex,w
  3823  05EA  1803               	btfsc	3,0
  3824  05EB  2E00               	goto	i1l1361
  3825  05EC                     i1l274:	
  3826                           
  3827                           ;CRC8.c: 20: {
  3828                           ;CRC8.c: 21: if((CRC & 0x80) != 0)
  3829  05EC  1FF6               	btfss	Get_CRC8@CRC,7
  3830  05ED  2DF6               	goto	i1l1355
  3831                           
  3832                           ;CRC8.c: 22: {
  3833                           ;CRC8.c: 23: CRC = (CRC << 1) ^ 0x1DU;
  3834  05EE  0876               	movf	Get_CRC8@CRC,w
  3835  05EF  00F1               	movwf	??_Get_CRC8
  3836  05F0  0771               	addwf	??_Get_CRC8,w
  3837  05F1  3A1D               	xorlw	29
  3838  05F2  00F2               	movwf	??_Get_CRC8+1
  3839  05F3  0872               	movf	??_Get_CRC8+1,w
  3840  05F4  00F6               	movwf	Get_CRC8@CRC
  3841                           
  3842                           ;CRC8.c: 24: }
  3843  05F5  2DF8               	goto	i1l1357
  3844  05F6                     i1l1355:	
  3845                           
  3846                           ;CRC8.c: 25: else
  3847                           ;CRC8.c: 26: {
  3848                           ;CRC8.c: 27: CRC <<= 1;
  3849  05F6  1003               	clrc
  3850  05F7  0DF6               	rlf	Get_CRC8@CRC,f
  3851  05F8                     i1l1357:	
  3852  05F8  3001               	movlw	1
  3853  05F9  00F1               	movwf	??_Get_CRC8
  3854  05FA  0871               	movf	??_Get_CRC8,w
  3855  05FB  07F5               	addwf	Get_CRC8@bitIndex,f
  3856  05FC  3008               	movlw	8
  3857  05FD  0275               	subwf	Get_CRC8@bitIndex,w
  3858  05FE  1C03               	skipc
  3859  05FF  2DEC               	goto	i1l274
  3860  0600                     i1l1361:	
  3861  0600  3001               	movlw	1
  3862  0601  00F1               	movwf	??_Get_CRC8
  3863  0602  0871               	movf	??_Get_CRC8,w
  3864  0603  07F4               	addwf	Get_CRC8@DataIndex,f
  3865  0604  2DD9               	goto	i1l1363
  3866  0605                     i1l1365:	
  3867                           
  3868                           ;CRC8.c: 28: }
  3869                           ;CRC8.c: 29: }
  3870                           ;CRC8.c: 30: }
  3871                           ;CRC8.c: 32: return CRC;
  3872  0605  0876               	movf	Get_CRC8@CRC,w
  3873  0606  0008               	return
  3874  0607                     __end_of_Get_CRC8:	
  3875                           
  3876                           	psect	text27
  3877  0457                     __ptext27:	
  3878 ;; *************** function _FinishBuffer *****************
  3879 ;; Defined at:
  3880 ;;		line 86 in file "main.c"
  3881 ;; Parameters:    Size  Location     Type
  3882 ;;		None
  3883 ;; Auto vars:     Size  Location     Type
  3884 ;;		None
  3885 ;; Return value:  Size  Location     Type
  3886 ;;                  1    wreg      void 
  3887 ;; Registers used:
  3888 ;;		wreg, status,2, status,0, pclath, cstack
  3889 ;; Tracked objects:
  3890 ;;		On entry : 0/0
  3891 ;;		On exit  : 0/0
  3892 ;;		Unchanged: 0/0
  3893 ;; Data sizes:     COMMON   BANK0   BANK1
  3894 ;;      Params:         0       0       0
  3895 ;;      Locals:         0       0       0
  3896 ;;      Temps:          1       0       0
  3897 ;;      Totals:         1       0       0
  3898 ;;Total ram usage:        1 bytes
  3899 ;; Hardware stack levels used:    1
  3900 ;; Hardware stack levels required when called:    1
  3901 ;; This function calls:
  3902 ;;		_Get_Tempreture
  3903 ;; This function is called by:
  3904 ;;		_UART_vidNewDataReceived
  3905 ;; This function uses a non-reentrant model
  3906 ;;
  3907                           
  3908                           
  3909                           ;psect for function _FinishBuffer
  3910  0457                     _FinishBuffer:	
  3911                           
  3912                           ;main.c: 89: Data_Buffer.HX = XAVG>>8; Data_Buffer.LX=XAVG;
  3913                           
  3914                           ;incstack = 0
  3915                           ; Regs used in _FinishBuffer: [wreg+status,2+status,0+pclath+cstack]
  3916  0457  1283               	bcf	3,5	;RP0=0, select bank0
  3917  0458  1303               	bcf	3,6	;RP1=0, select bank0
  3918  0459  085B               	movf	_XAVG+1,w
  3919  045A  00FB               	movwf	??_FinishBuffer
  3920  045B  087B               	movf	??_FinishBuffer,w
  3921  045C  1683               	bsf	3,5	;RP0=1, select bank1
  3922  045D  1303               	bcf	3,6	;RP1=0, select bank1
  3923  045E  00B5               	movwf	(_Data_Buffer^(0+128)+3)
  3924  045F  1283               	bcf	3,5	;RP0=0, select bank0
  3925  0460  1303               	bcf	3,6	;RP1=0, select bank0
  3926  0461  085A               	movf	_XAVG,w
  3927  0462  00FB               	movwf	??_FinishBuffer
  3928  0463  087B               	movf	??_FinishBuffer,w
  3929  0464  1683               	bsf	3,5	;RP0=1, select bank1
  3930  0465  1303               	bcf	3,6	;RP1=0, select bank1
  3931  0466  00B6               	movwf	(_Data_Buffer^(0+128)+4)
  3932                           
  3933                           ;main.c: 90: Data_Buffer.HY = YAVG>>8; Data_Buffer.LY=YAVG;
  3934  0467  1283               	bcf	3,5	;RP0=0, select bank0
  3935  0468  1303               	bcf	3,6	;RP1=0, select bank0
  3936  0469  0859               	movf	_YAVG+1,w
  3937  046A  00FB               	movwf	??_FinishBuffer
  3938  046B  087B               	movf	??_FinishBuffer,w
  3939  046C  1683               	bsf	3,5	;RP0=1, select bank1
  3940  046D  1303               	bcf	3,6	;RP1=0, select bank1
  3941  046E  00B7               	movwf	(_Data_Buffer^(0+128)+5)
  3942  046F  1283               	bcf	3,5	;RP0=0, select bank0
  3943  0470  1303               	bcf	3,6	;RP1=0, select bank0
  3944  0471  0858               	movf	_YAVG,w
  3945  0472  00FB               	movwf	??_FinishBuffer
  3946  0473  087B               	movf	??_FinishBuffer,w
  3947  0474  1683               	bsf	3,5	;RP0=1, select bank1
  3948  0475  1303               	bcf	3,6	;RP1=0, select bank1
  3949  0476  00B8               	movwf	(_Data_Buffer^(0+128)+6)
  3950                           
  3951                           ;main.c: 91: Data_Buffer.HZ = ZAVG>>8; Data_Buffer.LZ=ZAVG;
  3952  0477  1283               	bcf	3,5	;RP0=0, select bank0
  3953  0478  1303               	bcf	3,6	;RP1=0, select bank0
  3954  0479  0857               	movf	_ZAVG+1,w
  3955  047A  00FB               	movwf	??_FinishBuffer
  3956  047B  087B               	movf	??_FinishBuffer,w
  3957  047C  1683               	bsf	3,5	;RP0=1, select bank1
  3958  047D  1303               	bcf	3,6	;RP1=0, select bank1
  3959  047E  00B9               	movwf	(_Data_Buffer^(0+128)+7)
  3960  047F  1283               	bcf	3,5	;RP0=0, select bank0
  3961  0480  1303               	bcf	3,6	;RP1=0, select bank0
  3962  0481  0856               	movf	_ZAVG,w
  3963  0482  00FB               	movwf	??_FinishBuffer
  3964  0483  087B               	movf	??_FinishBuffer,w
  3965  0484  1683               	bsf	3,5	;RP0=1, select bank1
  3966  0485  1303               	bcf	3,6	;RP1=0, select bank1
  3967  0486  00BA               	movwf	(_Data_Buffer^(0+128)+8)
  3968                           
  3969                           ;main.c: 92: Data_Buffer.HT = Get_Tempreture()>>8; Data_Buffer.LT = Get_Tempreture();
  3970  0487  2570               	fcall	_Get_Tempreture
  3971  0488  0871               	movf	?_Get_Tempreture+1,w
  3972  0489  00FB               	movwf	??_FinishBuffer
  3973  048A  087B               	movf	??_FinishBuffer,w
  3974  048B  1683               	bsf	3,5	;RP0=1, select bank1
  3975  048C  1303               	bcf	3,6	;RP1=0, select bank1
  3976  048D  00B3               	movwf	(_Data_Buffer^(0+128)+1)
  3977  048E  2570               	fcall	_Get_Tempreture
  3978  048F  0870               	movf	?_Get_Tempreture,w
  3979  0490  00FB               	movwf	??_FinishBuffer
  3980  0491  087B               	movf	??_FinishBuffer,w
  3981  0492  1683               	bsf	3,5	;RP0=1, select bank1
  3982  0493  1303               	bcf	3,6	;RP1=0, select bank1
  3983  0494  00B4               	movwf	(_Data_Buffer^(0+128)+2)
  3984                           
  3985                           ;main.c: 93: Data_Buffer.AVG_VibrationH = AVG>>8; Data_Buffer.AVG_VibrationL = AVG;
  3986  0495  1283               	bcf	3,5	;RP0=0, select bank0
  3987  0496  1303               	bcf	3,6	;RP1=0, select bank0
  3988  0497  0855               	movf	_AVG+1,w
  3989  0498  00FB               	movwf	??_FinishBuffer
  3990  0499  087B               	movf	??_FinishBuffer,w
  3991  049A  1683               	bsf	3,5	;RP0=1, select bank1
  3992  049B  1303               	bcf	3,6	;RP1=0, select bank1
  3993  049C  00BB               	movwf	(_Data_Buffer^(0+128)+9)
  3994  049D  1283               	bcf	3,5	;RP0=0, select bank0
  3995  049E  1303               	bcf	3,6	;RP1=0, select bank0
  3996  049F  0854               	movf	_AVG,w
  3997  04A0  00FB               	movwf	??_FinishBuffer
  3998  04A1  087B               	movf	??_FinishBuffer,w
  3999  04A2  1683               	bsf	3,5	;RP0=1, select bank1
  4000  04A3  1303               	bcf	3,6	;RP1=0, select bank1
  4001  04A4  00BC               	movwf	(_Data_Buffer^(0+128)+10)
  4002  04A5  0008               	return
  4003  04A6                     __end_of_FinishBuffer:	
  4004                           
  4005                           	psect	text28
  4006  0570                     __ptext28:	
  4007 ;; *************** function _Get_Tempreture *****************
  4008 ;; Defined at:
  4009 ;;		line 96 in file "main.c"
  4010 ;; Parameters:    Size  Location     Type
  4011 ;;		None
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;  Result          2    9[COMMON] unsigned short 
  4014 ;; Return value:  Size  Location     Type
  4015 ;;                  2    0[COMMON] unsigned short 
  4016 ;; Registers used:
  4017 ;;		wreg, status,2, status,0
  4018 ;; Tracked objects:
  4019 ;;		On entry : 0/0
  4020 ;;		On exit  : 0/0
  4021 ;;		Unchanged: 0/0
  4022 ;; Data sizes:     COMMON   BANK0   BANK1
  4023 ;;      Params:         2       0       0
  4024 ;;      Locals:         2       0       0
  4025 ;;      Temps:          7       0       0
  4026 ;;      Totals:        11       0       0
  4027 ;;Total ram usage:       11 bytes
  4028 ;; Hardware stack levels used:    1
  4029 ;; This function calls:
  4030 ;;		Nothing
  4031 ;; This function is called by:
  4032 ;;		_FinishBuffer
  4033 ;; This function uses a non-reentrant model
  4034 ;;
  4035                           
  4036                           
  4037                           ;psect for function _Get_Tempreture
  4038  0570                     _Get_Tempreture:	
  4039                           
  4040                           ;main.c: 98: unsigned short Result = 0x0000;
  4041                           
  4042                           ;incstack = 0
  4043                           ; Regs used in _Get_Tempreture: [wreg+status,2+status,0]
  4044  0570  01F9               	clrf	Get_Tempreture@Result
  4045  0571  01FA               	clrf	Get_Tempreture@Result+1
  4046                           
  4047                           ;main.c: 100: ADCON0 |= 0x02;
  4048  0572  1283               	bcf	3,5	;RP0=0, select bank0
  4049  0573  1303               	bcf	3,6	;RP1=0, select bank0
  4050  0574  149F               	bsf	31,1	;volatile
  4051                           
  4052                           ;main.c: 101: _delay((unsigned long)((10)*(20000000/4000.0)));
  4053  0575  3041               	movlw	65
  4054  0576  00F3               	movwf	??_Get_Tempreture+1
  4055  0577  30EE               	movlw	238
  4056  0578  00F2               	movwf	??_Get_Tempreture
  4057  0579                     u143_27:	
  4058  0579  0BF2               	decfsz	??_Get_Tempreture,f
  4059  057A  2D79               	goto	u143_27
  4060  057B  0BF3               	decfsz	??_Get_Tempreture+1,f
  4061  057C  2D79               	goto	u143_27
  4062  057D  0000               	nop
  4063                           
  4064                           ;main.c: 102: Result = ((unsigned short)ADRESH << 2)|((unsigned short)ADRESL >> 6);
  4065  057E  1683               	bsf	3,5	;RP0=1, select bank1
  4066  057F  1303               	bcf	3,6	;RP1=0, select bank1
  4067  0580  081E               	movf	30,w	;volatile
  4068  0581  00F2               	movwf	??_Get_Tempreture
  4069  0582  3006               	movlw	6
  4070  0583                     u58_25:	
  4071  0583  1003               	clrc
  4072  0584  0CF2               	rrf	??_Get_Tempreture,f
  4073  0585  3EFF               	addlw	-1
  4074  0586  1D03               	skipz
  4075  0587  2D83               	goto	u58_25
  4076  0588  0872               	movf	??_Get_Tempreture,w
  4077  0589  00F3               	movwf	??_Get_Tempreture+1
  4078  058A  01F4               	clrf	??_Get_Tempreture+2
  4079  058B  1283               	bcf	3,5	;RP0=0, select bank0
  4080  058C  1303               	bcf	3,6	;RP1=0, select bank0
  4081  058D  081E               	movf	30,w	;volatile
  4082  058E  00F5               	movwf	??_Get_Tempreture+3
  4083  058F  01F6               	clrf	??_Get_Tempreture+4
  4084  0590  1003               	clrc
  4085  0591  0DF5               	rlf	??_Get_Tempreture+3,f
  4086  0592  0DF6               	rlf	??_Get_Tempreture+4,f
  4087  0593  1003               	clrc
  4088  0594  0DF5               	rlf	??_Get_Tempreture+3,f
  4089  0595  0DF6               	rlf	??_Get_Tempreture+4,f
  4090  0596  0873               	movf	??_Get_Tempreture+1,w
  4091  0597  0475               	iorwf	??_Get_Tempreture+3,w
  4092  0598  00F7               	movwf	??_Get_Tempreture+5
  4093  0599  0874               	movf	??_Get_Tempreture+2,w
  4094  059A  0476               	iorwf	??_Get_Tempreture+4,w
  4095  059B  00F8               	movwf	??_Get_Tempreture+6
  4096  059C  0877               	movf	??_Get_Tempreture+5,w
  4097  059D  00F9               	movwf	Get_Tempreture@Result
  4098  059E  0878               	movf	??_Get_Tempreture+6,w
  4099  059F  00FA               	movwf	Get_Tempreture@Result+1
  4100                           
  4101                           ;main.c: 103: return Result;
  4102  05A0  087A               	movf	Get_Tempreture@Result+1,w
  4103  05A1  00F1               	movwf	?_Get_Tempreture+1
  4104  05A2  0879               	movf	Get_Tempreture@Result,w
  4105  05A3  00F0               	movwf	?_Get_Tempreture
  4106  05A4  0008               	return
  4107  05A5                     __end_of_Get_Tempreture:	
  4108  0002                     
  4109                           	psect	functab
  4110  0100                     __pfunctab:	
  4111  0100                     fptable:	
  4112  0100  2900               	goto	fptable	;no entries
  4113  0101                     __i1fptable:	
  4114  0101                     i1fptable:	
  4115  0101  00FF               	movwf	(btemp+1)& (0+127)
  4116  0102  3001               	movlw	high i1fptable
  4117  0103  008A               	movwf	10
  4118  0104  087F               	movf	(btemp+1)& (0+127),w
  4119  0105  0782               	addwf	2,f
  4120  0106                     i1fpbase:	
  4121  0106  2906               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
  4122  0107                     fp__FinishBuffer:	
  4123  0107  2C57               	ljmp	_FinishBuffer
  4124  0108                     __end_of__i1fptable:	
  4125  007E                     btemp	set	126	;btemp
  4126  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         29
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     44      61
    BANK1            32     18      30

Pointer List with Targets:

    Get_CRC8@Data	PTR unsigned char  size(1) Largest target is 12
		 -> Data_Buffer(BANK1[12]), 

    UART_vidSend@data	const PTR const unsigned char  size(1) Largest target is 12
		 -> Data_Buffer(BANK1[12]), 

    ptrFinishBuffer	PTR FTN()void  size(1) Largest target is 1
		 -> FinishBuffer(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _UART_vidNewDataReceived in COMMON

    _UART_vidNewDataReceived->_FinishBuffer
    _RS845_ManageState->_UART_vidSend
    _FinishBuffer->_Get_Tempreture

Critical Paths under _main in BANK0

    _main->_get_average
    _main->_get_averageX
    _main->_get_averageY
    _main->_get_averageZ
    _ini_adxl345->_E_Write
    _E_Write->_I2CSend
    _get_averageZ->___aldiv
    _get_averageY->___aldiv
    _get_averageX->___aldiv
    _get_average->___aldiv
    ___aldiv->___lmul
    _UART_vidInit->_UART_u8GetNodeID
    _E_Read->_I2CRead

Critical Paths under _UART_vidNewDataReceived in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART_vidNewDataReceived in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0    9846
                                             40 BANK0      4     4      0
                                              0 BANK1     18    18      0
                             _E_Read
                             _I2CAck
                            _I2CInit
                             _I2CNak
                            _I2CRead
                         _I2CRestart
                            _I2CSend
                           _I2CStart
                            _I2CStop
                       _UART_vidInit
                            ___lwdiv
                        _get_average
                       _get_averageX
                       _get_averageY
                       _get_averageZ
                        _ini_adxl345
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ini_adxl345                                          2     2      0     709
                                             10 BANK0      2     2      0
                            _E_Write
 ---------------------------------------------------------------------------------
 (2) _E_Write                                              3     0      3     709
                                              7 BANK0      3     0      3
                            _I2CSend
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (1) _get_averageZ                                         6     4      2    1921
                                             34 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _get_averageY                                         6     4      2    1921
                                             34 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _get_averageX                                         6     4      2    1921
                                             34 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _get_average                                          6     4      2    1921
                                             34 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     752
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1061
                                             19 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     703
                                              6 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_vidInit                                         1     1      0       0
                                              7 BANK0      1     1      0
                   _UART_u8GetNodeID
 ---------------------------------------------------------------------------------
 (2) _UART_u8GetNodeID                                     1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CAck                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _E_Read                                               4     2      2     361
                                              8 BANK0      4     2      2
                             _I2CNak
                            _I2CRead
                         _I2CRestart
                            _I2CSend
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (3) _I2CStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2CSend                                              1     1      0      31
                                              6 BANK0      1     1      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (1) _I2CRestart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CRead                                              2     2      0      34
                                              6 BANK0      2     2      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (4) _I2CWait                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CNak                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _UART_vidNewDataReceived                              6     6      0     553
                                              0 BANK0      6     6      0
                       _FinishBuffer *
                           _Get_CRC8
                  _RS845_ManageState
 ---------------------------------------------------------------------------------
 (6) _RS845_ManageState                                    1     1      0     229
                                              6 COMMON     1     1      0
                       _UART_vidSend
 ---------------------------------------------------------------------------------
 (7) _UART_vidSend                                         6     5      1     229
                                              0 COMMON     6     5      1
 ---------------------------------------------------------------------------------
 (6) _Get_CRC8                                             7     6      1     300
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (6) _FinishBuffer                                         1     1      0      24
                                             11 COMMON     1     1      0
                     _Get_Tempreture
 ---------------------------------------------------------------------------------
 (7) _Get_Tempreture                                      11     9      2      24
                                              0 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _E_Read
     _I2CNak
     _I2CRead
       _I2CWait
     _I2CRestart
     _I2CSend
       _I2CWait
     _I2CStart
     _I2CStop
   _I2CAck
   _I2CInit
   _I2CNak
   _I2CRead
     _I2CWait
   _I2CRestart
   _I2CSend
     _I2CWait
   _I2CStart
   _I2CStop
   _UART_vidInit
     _UART_u8GetNodeID
   ___lwdiv
   _get_average
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _get_averageX
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _get_averageY
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _get_averageZ
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _ini_adxl345
     _E_Write
       _I2CSend
         _I2CWait
       _I2CStart
       _I2CStop
   _system_init

 _UART_vidNewDataReceived (ROOT)
   _FinishBuffer *
     _Get_Tempreture
   _Get_CRC8 *
   _RS845_ManageState *
     _UART_vidSend

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20     12      1E       6       93.8%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      3D       4       76.3%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      69       8        0.0%
ABS                  0      0      69       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Wed Feb 03 01:18:28 2021

       ??_UART_vidNewDataReceived 0020                                 pc 0002                       __CFG_CP$OFF 0000  
                              _BF 04A0                                fsr 0004               __size_of_I2CRestart 0006  
             __end_of_system_init 066F                               l210 06F0                               l204 06E4  
                             l222 06DE                               l240 0685                               l216 06D7  
                             l234 06BC                               l418 0282                               l198 06EA  
                             _GIE 005F                               _AVG 0054                               _PEN 048A  
                    __CFG_CPD$OFF 0000                               _SEN 0488                   __end_of_I2CInit 0682  
                 __end_of_I2CRead 0692                   __end_of_I2CSend 06C2                               fsr0 0004  
                 __end_of_I2CWait 06CB                               indf 0000                   __end_of_I2CStop 06E7  
                    __CFG_FOSC$HS 0000                      __CFG_LVP$OFF 0000                       main@bw_rate 00A4  
                            l1523 04FB                              l1527 0511                              l1703 015E  
                            l1553 02A3                              l1545 0293                              l1571 02F6  
                            l1563 02DB                              l1555 02B3                              l1477 06C2  
                            l1567 02E8                              l1681 054A                              l1691 056B  
                            l1687 0560                              l1679 053C                              _ANS3 0C43  
                            _BRGH 04C2                              _CREN 00C4                              u1105 051B  
                            u1300 0438                              u1301 0439                              u1302 043E  
                            u1303 043F                              u1240 03E2                              u1241 03E3  
                            u1242 03E8                      ?_ini_adxl345 0070                              u1155 02A7  
                            u1243 03E9                              u1235 03BF                              u1260 038C  
                            u1325 053F                              u1261 038D                              u1262 0392  
                            u1175 02B5                              u1095 0513                              u1263 0393  
                            u1255 0369                              u1407 04B7                              u1280 0336  
                            u1345 054B                              u1185 02CA                              u1281 0337  
                            u1417 04CC                              u1282 033C                              u1355 0557  
                            u1195 02DC                              u1283 033D                              u1275 0313  
                            u1427 04E1                              u1365 0561                              u1295 0415  
                            u1387 0126                              u1397 0145                              _PEIE 005E  
                            _RCIE 0465                              _RCEN 048B                              _RCIF 0065  
                            _SPEN 00C7                              _RSEN 0489                              _XAVG 005A  
                            _YAVG 0058                              _ZAVG 0056                              _TXEN 04C5  
                  ??_get_averageX 0044                              _SYNC 04C4                    ??_get_averageY 0044  
                  ??_get_averageZ 0044                              _WPUB 0095                      __CFG_WRT$OFF 0000  
                            _main 0108                              btemp 007E                  __end_of_I2CStart 06ED  
                 __end_of_E_Write 069F                              start 0010                     __CFG_IESO$OFF 0000  
                   __CFG_MCLRE$ON 0000                       _Data_Buffer 00B2                   __end_of___aldiv 02FF  
                           ?_main 0070                             _ACKEN 048C                             _ACKDT 048D  
                   __CFG_WDTE$OFF 0000                   __end_of___lwdiv 0570                             i1l137 0620  
                           i1l146 05D2                             i1l147 05B5                             i1l274 05EC  
                           _RCREG 001A                             _SPBRG 0099                             _PORTB 0006  
                           u61_25 05D0                             _TRISB 0086                             u58_25 0583  
                           u59_25 05B3                             _TXREG 0019               ___lmul@multiplicand 002A  
                  __CFG_FCMEN$OFF 0000                             main@X 00AC                             main@Y 00AE  
                           main@Z 00B0                             fpbase 0000                    __CFG_BOREN$OFF 0000  
                           pclath 000A                             status 0003                             wtemp0 007E  
                __end_of_Get_CRC8 0607           __size_of_Get_Tempreture 0035                   __initialization 0011  
                     _system_init 065C                      __end_of_main 0270                         ??_I2CInit 0026  
                       ??_I2CRead 0026                         ??_I2CSend 0026                         ??_I2CWait 0026  
                       ??_I2CStop 0026                            ??_main 0048              __end_of_FinishBuffer 04A6  
                          _ADCON0 001F                            _I2CAck 06D3                            _I2CNak 06DA  
                          _ADRESH 001E                            _ADRESL 009E                         ??_E_Write 002A  
                          _ANSELH 0189                            _ECU_ID 005C                      ??_I2CRestart 0026  
                          i1l1361 0600                            i1l1355 05F6                            i1l1363 05D9  
                          i1l1365 0605                            i1l1357 05F8                            u143_27 0579  
                      __i1fptable 0101                            _E_Read 0646                            _SSPADD 0093  
                          _TRISC0 0438                            _TRISC6 043E                            _TRISC7 043F  
                          _SSPCON 0014                            _SSPBUF 0013                   _ptrFinishBuffer 007D  
                  __CFG_PWRTE$OFF 0000              __size_of_get_average 0056                            ___lmul 04F1  
                       ??___aldiv 003B                         ??___lwdiv 002A              __end_of_get_averageX 0401  
            __end_of_get_averageY 03AB              __end_of_get_averageZ 0355                            main@XH 00A7  
                          main@YH 00A8                            main@ZH 00AA                            main@XL 00A6  
                          main@YL 00A9                            main@ZL 00AB                            main@id 00A0  
              __end_of_I2CRestart 06F3                            fptable 0100                      __pdataCOMMON 007D  
                          fptotal 0000                         ?_I2CStart 0070                            saved_w 007E  
         __end_of__initialization 001D              __size_of_ini_adxl345 004B                 ?_UART_u8GetNodeID 0070  
                  __pcstackCOMMON 0070                 get_average@OutPut 004C                ??_UART_u8GetNodeID 0026  
                  _OPTION_REGbits 0081                        ??_I2CStart 0026                         ?_Get_CRC8 0070  
                         ?_I2CAck 0070                           ?_I2CNak 0070                        __pbssBANK0 004C  
                      __pbssBANK1 00B2                   get_average@Data 0042                           ?_E_Read 0028  
                  _Get_Tempreture 0570                        I2CSend@dat 0026                        __pmaintext 0108  
                         ?___lmul 0026                        __pintentry 0004                           _I2CInit 066F  
                         _I2CRead 0682                           _I2CSend 06B7                           _I2CWait 06C2  
                  ___lmul@product 002F                           _I2CStop 06E1             __size_of_FinishBuffer 004F  
                 UART_vidSend@Len 0070                        ??_Get_CRC8 0071                           _SSPCON2 0091  
                 __size_of_I2CAck 0007                   __size_of_I2CNak 0007                           _SSPSTAT 0094  
                         _E_Write 0692            __end_of_Get_Tempreture 05A5                           i1fpbase 0106  
                 __size_of_E_Read 0016          ?_UART_vidNewDataReceived 0070                         E_Write@ch 0029  
                    _FinishBuffer 0457                      ?_system_init 0070             __size_of_get_averageX 0056  
           __size_of_get_averageY 0056             __size_of_get_averageZ 0056                           ___aldiv 0270  
                 __size_of___lmul 0041                           ___lwdiv 0532                           __ptext1 065C  
                         __ptext2 04A6                           __ptext3 0692                           __ptext4 02FF  
                         __ptext5 0355                           __ptext6 03AB                           __ptext7 0401  
                         __ptext8 04F1                           __ptext9 0270               __size_of__i1fptable 0007  
                   ?_UART_vidInit 0070                     ?_UART_vidSend 0070                  ___aldiv@dividend 0037  
                         clrloop0 06CC                           main@pow 00A2              end_of_initialization 001D  
                 ?_Get_Tempreture 0070                      _get_averageX 03AB                      _get_averageY 0355  
                    _get_averageZ 02FF                  Get_CRC8@DataSize 0070                   _RECEIVED_ECU_ID 007C  
                ___aldiv@quotient 003E                    ??_UART_vidInit 0027                    ??_UART_vidSend 0071  
                       _TRISCbits 0087                 __size_of_I2CStart 0006   __end_of_UART_vidNewDataReceived 062B  
                  __end_of_I2CAck 06DA                    __end_of_I2CNak 06E1                     ??_get_average 0044  
                  __end_of_E_Read 065C                  Get_CRC8@bitIndex 0075                    __end_of___lmul 0532  
                   __pidataCOMMON 06F3                get_averageX@OutPut 0052               start_initialization 0011  
       __size_of_UART_u8GetNodeID 000B                get_averageY@OutPut 0050                get_averageZ@OutPut 004E  
                        ??_I2CAck 0026                          ??_I2CNak 0026                 __size_of_Get_CRC8 0031  
                   ??_ini_adxl345 002A                          ??_E_Read 002A                      Get_CRC8@Data 0073  
                     E_Write@addr 0027                          ??___lmul 002E               __end_of_get_average 0457  
            __size_of_system_init 0013                          ?_I2CInit 0070                          ?_I2CRead 0070  
                        ?_I2CSend 0070                          ?_I2CWait 0070                          ?_I2CStop 0070  
       UART_vidSend@UART_u16Index 0074                __end_of__i1fptable 0108                       __pbssCOMMON 007C  
                       ___latbits 0000                     __pcstackBANK0 0020                     __pcstackBANK1 00A0  
                get_averageX@Data 0042                  get_averageY@Data 0042                  get_averageZ@Data 0042  
                        ?_E_Write 0027                       I2CRead@temp 0027              __end_of_UART_vidInit 0646  
            __end_of_UART_vidSend 05D6                 _RS845_ManageState 069F                         __pnvBANK0 005C  
             __end_of_ini_adxl345 04F1                  ___lwdiv@dividend 0028                ?_RS845_ManageState 0070  
                       __pfunctab 0100                          ?___aldiv 0033                          ?___lwdiv 0026  
             ??_RS845_ManageState 0076                          E_Read@ch 002B  __size_of_UART_vidNewDataReceived 0024  
                        _I2CStart 06E7                  ??_Get_Tempreture 0072                  ___lwdiv@quotient 002C  
                UART_vidSend@data 0073         __end_of_RS845_ManageState 06AC                   ___aldiv@divisor 0033  
               interrupt_function 0004                   ___aldiv@counter 003C                         clear_ram0 06CB  
                     _get_average 0401                        E_Read@addr 0028                          _PIR1bits 000C  
                        _PIR2bits 000D                  __size_of_I2CInit 0013                  __size_of_I2CRead 0010  
                __size_of_I2CSend 000B                  __size_of_I2CWait 0009                  __size_of_I2CStop 0006  
                _UART_u8GetNodeID 06AC                          _Get_CRC8 05D6                          i1fptable 0101  
               ___lmul@multiplier 0026                          i1fptotal 0002                        _I2CRestart 06ED  
                     _ini_adxl345 04A6                  __size_of_E_Write 000D                       Get_CRC8@CRC 0076  
                __size_of___aldiv 008F                  __size_of___lwdiv 003E                   ___lwdiv@divisor 0026  
                 ___lwdiv@counter 002B                          __ptext10 0532                          __ptext11 062B  
                        __ptext20 0682                          __ptext12 06AC                          __ptext21 06C2  
                        __ptext13 066F                          __ptext22 06DA                          __ptext14 06D3  
                        __ptext23 0607                          __ptext15 0646                          __ptext24 069F  
                        __ptext16 06E1                          __ptext25 05A5                          __ptext17 06E7  
                        __ptext26 05D6                          __ptext18 06B7                          __ptext27 0457  
                        __ptext19 06ED                          __ptext28 0570                 __CFG_BOR4V$BOR40V 0000  
           __size_of_UART_vidInit 001B             __size_of_UART_vidSend 0031        __size_of_RS845_ManageState 000D  
                 fp__FinishBuffer 0107                     __size_of_main 0168           _UART_vidNewDataReceived 0607  
                    _UART_vidInit 062B                      _UART_vidSend 05A5                       ?_I2CRestart 0070  
                        intlevel1 0100                 Get_CRC8@DataIndex 0074                     ?_FinishBuffer 0070  
                   ??_system_init 0026              Get_Tempreture@Result 0079                      ___aldiv@sign 003D  
                   ?_get_averageX 0042                     ?_get_averageY 0042                     ?_get_averageZ 0042  
                    ?_get_average 0042                    ??_FinishBuffer 007B          __end_of_UART_u8GetNodeID 06B7  
