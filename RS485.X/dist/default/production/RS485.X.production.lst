

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Sat Jan 30 23:02:36 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F882
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	text22,local,class=CODE,merge=1,delta=2
    36                           	psect	text23,local,class=CODE,merge=1,delta=2
    37                           	psect	intentry,global,class=CODE,delta=2
    38                           	psect	text24,local,class=CODE,merge=1,delta=2
    39                           	psect	text25,local,class=CODE,merge=1,delta=2
    40                           	psect	text26,local,class=CODE,merge=1,delta=2
    41                           	psect	text27,local,class=CODE,merge=1,delta=2
    42                           	psect	functab,global,reloc=256,class=CODE,delta=2
    43                           	dabs	1,0x7E,2
    44  0000                     
    45                           ; Version 1.41
    46                           ; Generated 25/01/2017 GMT
    47                           ; 
    48                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    49                           ; All rights reserved.
    50                           ; 
    51                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    52                           ; 
    53                           ; Redistribution and use in source and binary forms, with or without modification, are
    54                           ; permitted provided that the following conditions are met:
    55                           ; 
    56                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    57                           ;        conditions and the following disclaimer.
    58                           ; 
    59                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    60                           ;        of conditions and the following disclaimer in the documentation and/or other
    61                           ;        materials provided with the distribution.
    62                           ; 
    63                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    64                           ;        software without specific prior written permission.
    65                           ; 
    66                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    67                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    68                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    69                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    70                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    71                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    72                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    73                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    74                           ; 
    75                           ; 
    76                           ; Code-generator required, PIC16F882 Definitions
    77                           ; 
    78                           ; SFR Addresses
    79  0000                     	;# 
    80  0001                     	;# 
    81  0002                     	;# 
    82  0003                     	;# 
    83  0004                     	;# 
    84  0005                     	;# 
    85  0006                     	;# 
    86  0007                     	;# 
    87  0009                     	;# 
    88  000A                     	;# 
    89  000B                     	;# 
    90  000C                     	;# 
    91  000D                     	;# 
    92  000E                     	;# 
    93  000E                     	;# 
    94  000F                     	;# 
    95  0010                     	;# 
    96  0011                     	;# 
    97  0012                     	;# 
    98  0013                     	;# 
    99  0014                     	;# 
   100  0015                     	;# 
   101  0015                     	;# 
   102  0016                     	;# 
   103  0017                     	;# 
   104  0018                     	;# 
   105  0019                     	;# 
   106  001A                     	;# 
   107  001B                     	;# 
   108  001B                     	;# 
   109  001C                     	;# 
   110  001D                     	;# 
   111  001E                     	;# 
   112  001F                     	;# 
   113  0081                     	;# 
   114  0085                     	;# 
   115  0086                     	;# 
   116  0087                     	;# 
   117  0089                     	;# 
   118  008C                     	;# 
   119  008D                     	;# 
   120  008E                     	;# 
   121  008F                     	;# 
   122  0090                     	;# 
   123  0091                     	;# 
   124  0092                     	;# 
   125  0093                     	;# 
   126  0093                     	;# 
   127  0093                     	;# 
   128  0094                     	;# 
   129  0095                     	;# 
   130  0096                     	;# 
   131  0097                     	;# 
   132  0098                     	;# 
   133  0099                     	;# 
   134  009A                     	;# 
   135  009B                     	;# 
   136  009C                     	;# 
   137  009D                     	;# 
   138  009E                     	;# 
   139  009F                     	;# 
   140  0105                     	;# 
   141  0107                     	;# 
   142  0108                     	;# 
   143  0109                     	;# 
   144  010C                     	;# 
   145  010C                     	;# 
   146  010D                     	;# 
   147  010E                     	;# 
   148  010F                     	;# 
   149  0185                     	;# 
   150  0187                     	;# 
   151  0188                     	;# 
   152  0189                     	;# 
   153  018C                     	;# 
   154  018D                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  0009                     	;# 
   164  000A                     	;# 
   165  000B                     	;# 
   166  000C                     	;# 
   167  000D                     	;# 
   168  000E                     	;# 
   169  000E                     	;# 
   170  000F                     	;# 
   171  0010                     	;# 
   172  0011                     	;# 
   173  0012                     	;# 
   174  0013                     	;# 
   175  0014                     	;# 
   176  0015                     	;# 
   177  0015                     	;# 
   178  0016                     	;# 
   179  0017                     	;# 
   180  0018                     	;# 
   181  0019                     	;# 
   182  001A                     	;# 
   183  001B                     	;# 
   184  001B                     	;# 
   185  001C                     	;# 
   186  001D                     	;# 
   187  001E                     	;# 
   188  001F                     	;# 
   189  0081                     	;# 
   190  0085                     	;# 
   191  0086                     	;# 
   192  0087                     	;# 
   193  0089                     	;# 
   194  008C                     	;# 
   195  008D                     	;# 
   196  008E                     	;# 
   197  008F                     	;# 
   198  0090                     	;# 
   199  0091                     	;# 
   200  0092                     	;# 
   201  0093                     	;# 
   202  0093                     	;# 
   203  0093                     	;# 
   204  0094                     	;# 
   205  0095                     	;# 
   206  0096                     	;# 
   207  0097                     	;# 
   208  0098                     	;# 
   209  0099                     	;# 
   210  009A                     	;# 
   211  009B                     	;# 
   212  009C                     	;# 
   213  009D                     	;# 
   214  009E                     	;# 
   215  009F                     	;# 
   216  0105                     	;# 
   217  0107                     	;# 
   218  0108                     	;# 
   219  0109                     	;# 
   220  010C                     	;# 
   221  010C                     	;# 
   222  010D                     	;# 
   223  010E                     	;# 
   224  010F                     	;# 
   225  0185                     	;# 
   226  0187                     	;# 
   227  0188                     	;# 
   228  0189                     	;# 
   229  018C                     	;# 
   230  018D                     	;# 
   231  0000                     	;# 
   232  0001                     	;# 
   233  0002                     	;# 
   234  0003                     	;# 
   235  0004                     	;# 
   236  0005                     	;# 
   237  0006                     	;# 
   238  0007                     	;# 
   239  0009                     	;# 
   240  000A                     	;# 
   241  000B                     	;# 
   242  000C                     	;# 
   243  000D                     	;# 
   244  000E                     	;# 
   245  000E                     	;# 
   246  000F                     	;# 
   247  0010                     	;# 
   248  0011                     	;# 
   249  0012                     	;# 
   250  0013                     	;# 
   251  0014                     	;# 
   252  0015                     	;# 
   253  0015                     	;# 
   254  0016                     	;# 
   255  0017                     	;# 
   256  0018                     	;# 
   257  0019                     	;# 
   258  001A                     	;# 
   259  001B                     	;# 
   260  001B                     	;# 
   261  001C                     	;# 
   262  001D                     	;# 
   263  001E                     	;# 
   264  001F                     	;# 
   265  0081                     	;# 
   266  0085                     	;# 
   267  0086                     	;# 
   268  0087                     	;# 
   269  0089                     	;# 
   270  008C                     	;# 
   271  008D                     	;# 
   272  008E                     	;# 
   273  008F                     	;# 
   274  0090                     	;# 
   275  0091                     	;# 
   276  0092                     	;# 
   277  0093                     	;# 
   278  0093                     	;# 
   279  0093                     	;# 
   280  0094                     	;# 
   281  0095                     	;# 
   282  0096                     	;# 
   283  0097                     	;# 
   284  0098                     	;# 
   285  0099                     	;# 
   286  009A                     	;# 
   287  009B                     	;# 
   288  009C                     	;# 
   289  009D                     	;# 
   290  009E                     	;# 
   291  009F                     	;# 
   292  0105                     	;# 
   293  0107                     	;# 
   294  0108                     	;# 
   295  0109                     	;# 
   296  010C                     	;# 
   297  010C                     	;# 
   298  010D                     	;# 
   299  010E                     	;# 
   300  010F                     	;# 
   301  0185                     	;# 
   302  0187                     	;# 
   303  0188                     	;# 
   304  0189                     	;# 
   305  018C                     	;# 
   306  018D                     	;# 
   307  0000                     	;# 
   308  0001                     	;# 
   309  0002                     	;# 
   310  0003                     	;# 
   311  0004                     	;# 
   312  0005                     	;# 
   313  0006                     	;# 
   314  0007                     	;# 
   315  0009                     	;# 
   316  000A                     	;# 
   317  000B                     	;# 
   318  000C                     	;# 
   319  000D                     	;# 
   320  000E                     	;# 
   321  000E                     	;# 
   322  000F                     	;# 
   323  0010                     	;# 
   324  0011                     	;# 
   325  0012                     	;# 
   326  0013                     	;# 
   327  0014                     	;# 
   328  0015                     	;# 
   329  0015                     	;# 
   330  0016                     	;# 
   331  0017                     	;# 
   332  0018                     	;# 
   333  0019                     	;# 
   334  001A                     	;# 
   335  001B                     	;# 
   336  001B                     	;# 
   337  001C                     	;# 
   338  001D                     	;# 
   339  001E                     	;# 
   340  001F                     	;# 
   341  0081                     	;# 
   342  0085                     	;# 
   343  0086                     	;# 
   344  0087                     	;# 
   345  0089                     	;# 
   346  008C                     	;# 
   347  008D                     	;# 
   348  008E                     	;# 
   349  008F                     	;# 
   350  0090                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0093                     	;# 
   356  0094                     	;# 
   357  0095                     	;# 
   358  0096                     	;# 
   359  0097                     	;# 
   360  0098                     	;# 
   361  0099                     	;# 
   362  009A                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  009F                     	;# 
   368  0105                     	;# 
   369  0107                     	;# 
   370  0108                     	;# 
   371  0109                     	;# 
   372  010C                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  010F                     	;# 
   377  0185                     	;# 
   378  0187                     	;# 
   379  0188                     	;# 
   380  0189                     	;# 
   381  018C                     	;# 
   382  018D                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  000E                     	;# 
   398  000F                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  001D                     	;# 
   415  001E                     	;# 
   416  001F                     	;# 
   417  0081                     	;# 
   418  0085                     	;# 
   419  0086                     	;# 
   420  0087                     	;# 
   421  0089                     	;# 
   422  008C                     	;# 
   423  008D                     	;# 
   424  008E                     	;# 
   425  008F                     	;# 
   426  0090                     	;# 
   427  0091                     	;# 
   428  0092                     	;# 
   429  0093                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0094                     	;# 
   433  0095                     	;# 
   434  0096                     	;# 
   435  0097                     	;# 
   436  0098                     	;# 
   437  0099                     	;# 
   438  009A                     	;# 
   439  009B                     	;# 
   440  009C                     	;# 
   441  009D                     	;# 
   442  009E                     	;# 
   443  009F                     	;# 
   444  0105                     	;# 
   445  0107                     	;# 
   446  0108                     	;# 
   447  0109                     	;# 
   448  010C                     	;# 
   449  010C                     	;# 
   450  010D                     	;# 
   451  010E                     	;# 
   452  010F                     	;# 
   453  0185                     	;# 
   454  0187                     	;# 
   455  0188                     	;# 
   456  0189                     	;# 
   457  018C                     	;# 
   458  018D                     	;# 
   459                           
   460                           	psect	idataCOMMON
   461  0649                     __pidataCOMMON:	
   462                           
   463                           ;initializer for _ptrFinishBuffer
   464  0649  3401               	retlw	low (fp__FinishBuffer-i1fpbase)
   465                           
   466                           	psect	nvBANK0
   467  0069                     __pnvBANK0:	
   468  0069                     _ECU_ID:	
   469  0069                     	ds	1
   470  0013                     _SSPBUF	set	19
   471  000D                     _PIR2bits	set	13
   472  0014                     _SSPCON	set	20
   473  0019                     _TXREG	set	25
   474  000C                     _PIR1bits	set	12
   475  001A                     _RCREG	set	26
   476  001F                     _ADCON0	set	31
   477  0038                     _RC0	set	56
   478  0065                     _RCIF	set	101
   479  00C4                     _CREN	set	196
   480  005F                     _GIE	set	95
   481  005E                     _PEIE	set	94
   482  00C7                     _SPEN	set	199
   483  0093                     _SSPADD	set	147
   484  0091                     _SSPCON2	set	145
   485  0094                     _SSPSTAT	set	148
   486  0087                     _TRISCbits	set	135
   487  0099                     _SPBRG	set	153
   488  0085                     _TRISA	set	133
   489  048B                     _RCEN	set	1163
   490  04A0                     _BF	set	1184
   491  048C                     _ACKEN	set	1164
   492  048D                     _ACKDT	set	1165
   493  0489                     _RSEN	set	1161
   494  048A                     _PEN	set	1162
   495  0488                     _SEN	set	1160
   496  0465                     _RCIE	set	1125
   497  04C5                     _TXEN	set	1221
   498  043F                     _TRISC7	set	1087
   499  043E                     _TRISC6	set	1086
   500  04C4                     _SYNC	set	1220
   501  04C2                     _BRGH	set	1218
   502  0438                     _TRISC0	set	1080
   503  0188                     _ANSEL	set	392
   504                           
   505                           ; #config settings
   506  0000                     
   507                           	psect	cinit
   508  0011                     start_initialization:	
   509  0011                     __initialization:	
   510                           
   511                           ; Initialize objects allocated to COMMON
   512  0011  2649               	fcall	__pidataCOMMON	;fetch initializer
   513  0012  00FD               	movwf	__pdataCOMMON& (0+127)
   514                           
   515                           ; Clear objects allocated to BANK1
   516  0013  1383               	bcf	3,7	;select IRP bank0
   517  0014  30A0               	movlw	low __pbssBANK1
   518  0015  0084               	movwf	4
   519  0016  30AB               	movlw	low (__pbssBANK1+11)
   520  0017  2621               	fcall	clear_ram0
   521                           
   522                           ; Clear objects allocated to BANK0
   523  0018  3058               	movlw	low __pbssBANK0
   524  0019  0084               	movwf	4
   525  001A  3069               	movlw	low (__pbssBANK0+17)
   526  001B  2621               	fcall	clear_ram0
   527  001C                     end_of_initialization:	
   528                           ;End of C runtime variable initialization code
   529                           
   530  001C                     __end_of__initialization:	
   531  001C  0183               	clrf	3
   532  001D  2908               	ljmp	_main	;jump to C main() function
   533                           
   534                           	psect	dataCOMMON
   535  007D                     __pdataCOMMON:	
   536  007D                     _ptrFinishBuffer:	
   537  007D                     	ds	1
   538                           
   539                           	psect	bssBANK0
   540  0058                     __pbssBANK0:	
   541  0058                     get_average@OutPut:	
   542  0058                     	ds	2
   543  005A                     get_averageZ@OutPut:	
   544  005A                     	ds	2
   545  005C                     get_averageY@OutPut:	
   546  005C                     	ds	2
   547  005E                     get_averageX@OutPut:	
   548  005E                     	ds	2
   549  0060                     _AVG:	
   550  0060                     	ds	2
   551  0062                     _ZAVG:	
   552  0062                     	ds	2
   553  0064                     _YAVG:	
   554  0064                     	ds	2
   555  0066                     _XAVG:	
   556  0066                     	ds	2
   557  0068                     _RECEIVED_ECU_ID:	
   558  0068                     	ds	1
   559                           
   560                           	psect	bssBANK1
   561  00A0                     __pbssBANK1:	
   562  00A0                     _Data_Buffer:	
   563  00A0                     	ds	11
   564                           
   565                           	psect	clrtext
   566  0621                     clear_ram0:	
   567                           ;	Called with FSR containing the base address, and
   568                           ;	W with the last address+1
   569                           
   570  0621  0064               	clrwdt	;clear the watchdog before getting into this loop
   571  0622                     clrloop0:	
   572  0622  0180               	clrf	0	;clear RAM location pointed to by FSR
   573  0623  0A84               	incf	4,f	;increment pointer
   574  0624  0604               	xorwf	4,w	;XOR with final address
   575  0625  1903               	btfsc	3,2	;have we reached the end yet?
   576  0626  3400               	retlw	0	;all done for this memory range, return
   577  0627  0604               	xorwf	4,w	;XOR again to restore value
   578  0628  2E22               	goto	clrloop0	;do the next byte
   579                           
   580                           	psect	cstackCOMMON
   581  0070                     __pcstackCOMMON:	
   582  0070                     ?_FinishBuffer:	
   583  0070                     ??_FinishBuffer:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ?_UART_vidInit:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0070                     ?_I2CInit:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ?_ini_adxl345:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ?_I2CStart:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ?_I2CSend:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ?_I2CRestart:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0070                     ?_I2CRead:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ?_I2CAck:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_I2CNak:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_I2CStop:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ?_UART_u8GetNodeID:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ?_Get_CRC8:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_RS845_ManageState:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_UART_vidSend:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_system_init:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ?_main:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?_UART_vidNewDataReceived:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     ?_I2CWait:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     Get_CRC8@DataSize:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     UART_vidSend@Len:	
   644                           ; 1 bytes @ 0x0
   645                           
   646                           
   647                           ; 2 bytes @ 0x0
   648  0070                     	ds	1
   649  0071                     ??_Get_CRC8:	
   650                           
   651                           ; 1 bytes @ 0x1
   652  0071                     	ds	1
   653  0072                     ??_UART_vidSend:	
   654                           
   655                           ; 1 bytes @ 0x2
   656  0072                     	ds	1
   657  0073                     UART_vidSend@data:	
   658  0073                     Get_CRC8@Data:	
   659                           ; 1 bytes @ 0x3
   660                           
   661                           
   662                           ; 1 bytes @ 0x3
   663  0073                     	ds	1
   664  0074                     Get_CRC8@DataIndex:	
   665  0074                     UART_vidSend@UART_u16Index:	
   666                           ; 1 bytes @ 0x4
   667                           
   668                           
   669                           ; 2 bytes @ 0x4
   670  0074                     	ds	1
   671  0075                     Get_CRC8@bitIndex:	
   672                           
   673                           ; 1 bytes @ 0x5
   674  0075                     	ds	1
   675  0076                     ??_RS845_ManageState:	
   676  0076                     Get_CRC8@CRC:	
   677                           ; 1 bytes @ 0x6
   678                           
   679                           
   680                           ; 1 bytes @ 0x6
   681  0076                     	ds	1
   682  0077                     ??_UART_vidNewDataReceived:	
   683                           
   684                           ; 1 bytes @ 0x7
   685  0077                     	ds	6
   686                           
   687                           	psect	cstackBANK0
   688  0020                     __pcstackBANK0:	
   689  0020                     ??_UART_vidInit:	
   690  0020                     ??_I2CInit:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0020                     ??_I2CStart:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0020                     ??_I2CSend:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0020                     ??_I2CRestart:	
   700                           ; 1 bytes @ 0x0
   701                           
   702  0020                     ??_I2CRead:	
   703                           ; 1 bytes @ 0x0
   704                           
   705  0020                     ??_I2CAck:	
   706                           ; 1 bytes @ 0x0
   707                           
   708  0020                     ??_I2CNak:	
   709                           ; 1 bytes @ 0x0
   710                           
   711  0020                     ??_I2CStop:	
   712                           ; 1 bytes @ 0x0
   713                           
   714  0020                     ??_UART_u8GetNodeID:	
   715                           ; 1 bytes @ 0x0
   716                           
   717  0020                     ??_system_init:	
   718                           ; 1 bytes @ 0x0
   719                           
   720  0020                     ??_I2CWait:	
   721                           ; 1 bytes @ 0x0
   722                           
   723  0020                     ?___lwdiv:	
   724                           ; 1 bytes @ 0x0
   725                           
   726  0020                     ?___lmul:	
   727                           ; 2 bytes @ 0x0
   728                           
   729  0020                     I2CSend@dat:	
   730                           ; 4 bytes @ 0x0
   731                           
   732  0020                     ___lwdiv@divisor:	
   733                           ; 1 bytes @ 0x0
   734                           
   735  0020                     ___lmul@multiplier:	
   736                           ; 2 bytes @ 0x0
   737                           
   738                           
   739                           ; 4 bytes @ 0x0
   740  0020                     	ds	1
   741  0021                     ?_E_Write:	
   742  0021                     I2CRead@temp:	
   743                           ; 1 bytes @ 0x1
   744                           
   745  0021                     E_Write@addr:	
   746                           ; 1 bytes @ 0x1
   747                           
   748                           
   749                           ; 2 bytes @ 0x1
   750  0021                     	ds	1
   751  0022                     ?_E_Read:	
   752  0022                     E_Read@addr:	
   753                           ; 1 bytes @ 0x2
   754                           
   755  0022                     ___lwdiv@dividend:	
   756                           ; 2 bytes @ 0x2
   757                           
   758                           
   759                           ; 2 bytes @ 0x2
   760  0022                     	ds	1
   761  0023                     E_Write@ch:	
   762                           
   763                           ; 1 bytes @ 0x3
   764  0023                     	ds	1
   765  0024                     ??_ini_adxl345:	
   766  0024                     ??_E_Read:	
   767                           ; 1 bytes @ 0x4
   768                           
   769  0024                     ??_E_Write:	
   770                           ; 1 bytes @ 0x4
   771                           
   772  0024                     ??___lwdiv:	
   773                           ; 1 bytes @ 0x4
   774                           
   775  0024                     ___lmul@multiplicand:	
   776                           ; 1 bytes @ 0x4
   777                           
   778                           
   779                           ; 4 bytes @ 0x4
   780  0024                     	ds	1
   781  0025                     E_Read@ch:	
   782  0025                     ___lwdiv@quotient:	
   783                           ; 1 bytes @ 0x5
   784                           
   785                           
   786                           ; 2 bytes @ 0x5
   787  0025                     	ds	2
   788  0027                     ___lwdiv@counter:	
   789                           
   790                           ; 1 bytes @ 0x7
   791  0027                     	ds	1
   792  0028                     ??___lmul:	
   793                           
   794                           ; 1 bytes @ 0x8
   795  0028                     	ds	1
   796  0029                     ___lmul@product:	
   797                           
   798                           ; 4 bytes @ 0x9
   799  0029                     	ds	4
   800  002D                     ?___aldiv:	
   801  002D                     ___aldiv@divisor:	
   802                           ; 4 bytes @ 0xD
   803                           
   804                           
   805                           ; 4 bytes @ 0xD
   806  002D                     	ds	4
   807  0031                     ___aldiv@dividend:	
   808                           
   809                           ; 4 bytes @ 0x11
   810  0031                     	ds	4
   811  0035                     ??___aldiv:	
   812                           
   813                           ; 1 bytes @ 0x15
   814  0035                     	ds	1
   815  0036                     ___aldiv@counter:	
   816                           
   817                           ; 1 bytes @ 0x16
   818  0036                     	ds	1
   819  0037                     ___aldiv@sign:	
   820                           
   821                           ; 1 bytes @ 0x17
   822  0037                     	ds	1
   823  0038                     ___aldiv@quotient:	
   824                           
   825                           ; 4 bytes @ 0x18
   826  0038                     	ds	4
   827  003C                     ?_get_averageX:	
   828  003C                     ?_get_averageY:	
   829                           ; 2 bytes @ 0x1C
   830                           
   831  003C                     ?_get_averageZ:	
   832                           ; 2 bytes @ 0x1C
   833                           
   834  003C                     ?_get_average:	
   835                           ; 2 bytes @ 0x1C
   836                           
   837  003C                     get_averageX@Data:	
   838                           ; 2 bytes @ 0x1C
   839                           
   840  003C                     get_averageY@Data:	
   841                           ; 2 bytes @ 0x1C
   842                           
   843  003C                     get_averageZ@Data:	
   844                           ; 2 bytes @ 0x1C
   845                           
   846  003C                     get_average@Data:	
   847                           ; 2 bytes @ 0x1C
   848                           
   849                           
   850                           ; 2 bytes @ 0x1C
   851  003C                     	ds	2
   852  003E                     ??_get_averageX:	
   853  003E                     ??_get_averageY:	
   854                           ; 1 bytes @ 0x1E
   855                           
   856  003E                     ??_get_averageZ:	
   857                           ; 1 bytes @ 0x1E
   858                           
   859  003E                     ??_get_average:	
   860                           ; 1 bytes @ 0x1E
   861                           
   862                           
   863                           ; 1 bytes @ 0x1E
   864  003E                     	ds	4
   865  0042                     ??_main:	
   866                           
   867                           ; 1 bytes @ 0x22
   868  0042                     	ds	4
   869  0046                     main@id:	
   870                           
   871                           ; 2 bytes @ 0x26
   872  0046                     	ds	2
   873  0048                     main@pow:	
   874                           
   875                           ; 2 bytes @ 0x28
   876  0048                     	ds	2
   877  004A                     main@bw_rate:	
   878                           
   879                           ; 2 bytes @ 0x2A
   880  004A                     	ds	2
   881  004C                     main@X:	
   882                           
   883                           ; 2 bytes @ 0x2C
   884  004C                     	ds	2
   885  004E                     main@Y:	
   886                           
   887                           ; 2 bytes @ 0x2E
   888  004E                     	ds	2
   889  0050                     main@Z:	
   890                           
   891                           ; 2 bytes @ 0x30
   892  0050                     	ds	2
   893  0052                     main@XL:	
   894                           
   895                           ; 1 bytes @ 0x32
   896  0052                     	ds	1
   897  0053                     main@XH:	
   898                           
   899                           ; 1 bytes @ 0x33
   900  0053                     	ds	1
   901  0054                     main@YH:	
   902                           
   903                           ; 1 bytes @ 0x34
   904  0054                     	ds	1
   905  0055                     main@YL:	
   906                           
   907                           ; 1 bytes @ 0x35
   908  0055                     	ds	1
   909  0056                     main@ZH:	
   910                           
   911                           ; 1 bytes @ 0x36
   912  0056                     	ds	1
   913  0057                     main@ZL:	
   914                           
   915                           ; 1 bytes @ 0x37
   916  0057                     	ds	1
   917                           
   918                           	psect	maintext
   919  0108                     __pmaintext:	
   920 ;;
   921 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   922 ;;
   923 ;; *************** function _main *****************
   924 ;; Defined at:
   925 ;;		line 25 in file "main.c"
   926 ;; Parameters:    Size  Location     Type
   927 ;;		None
   928 ;; Auto vars:     Size  Location     Type
   929 ;;  Z               2   48[BANK0 ] short 
   930 ;;  Y               2   46[BANK0 ] short 
   931 ;;  X               2   44[BANK0 ] short 
   932 ;;  bw_rate         2   42[BANK0 ] int 
   933 ;;  pow             2   40[BANK0 ] int 
   934 ;;  id              2   38[BANK0 ] int 
   935 ;;  ZL              1   55[BANK0 ] unsigned char 
   936 ;;  ZH              1   54[BANK0 ] unsigned char 
   937 ;;  YL              1   53[BANK0 ] unsigned char 
   938 ;;  YH              1   52[BANK0 ] unsigned char 
   939 ;;  XH              1   51[BANK0 ] unsigned char 
   940 ;;  XL              1   50[BANK0 ] unsigned char 
   941 ;; Return value:  Size  Location     Type
   942 ;;                  1    wreg      void 
   943 ;; Registers used:
   944 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   945 ;; Tracked objects:
   946 ;;		On entry : B00/0
   947 ;;		On exit  : 0/0
   948 ;;		Unchanged: 0/0
   949 ;; Data sizes:     COMMON   BANK0   BANK1
   950 ;;      Params:         0       0       0
   951 ;;      Locals:         0      18       0
   952 ;;      Temps:          0       4       0
   953 ;;      Totals:         0      22       0
   954 ;;Total ram usage:       22 bytes
   955 ;; Hardware stack levels required when called:    7
   956 ;; This function calls:
   957 ;;		_E_Read
   958 ;;		_I2CAck
   959 ;;		_I2CInit
   960 ;;		_I2CNak
   961 ;;		_I2CRead
   962 ;;		_I2CRestart
   963 ;;		_I2CSend
   964 ;;		_I2CStart
   965 ;;		_I2CStop
   966 ;;		_UART_vidInit
   967 ;;		___lwdiv
   968 ;;		_get_average
   969 ;;		_get_averageX
   970 ;;		_get_averageY
   971 ;;		_get_averageZ
   972 ;;		_ini_adxl345
   973 ;;		_system_init
   974 ;; This function is called by:
   975 ;;		Startup code after reset
   976 ;; This function uses a non-reentrant model
   977 ;;
   978                           
   979                           
   980                           ;psect for function _main
   981  0108                     _main:	
   982                           
   983                           ;main.c: 27: int id, pow, bw_rate;
   984                           ;main.c: 28: char XL,XH,YH,YL,ZH,ZL;
   985                           ;main.c: 29: short X, Y, Z;
   986                           ;main.c: 31: system_init();
   987                           
   988                           ;incstack = 0
   989                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
   990  0108  25F8               	fcall	_system_init
   991                           
   992                           ;main.c: 32: UART_vidInit();
   993  0109  258A               	fcall	_UART_vidInit
   994                           
   995                           ;main.c: 35: I2CInit();
   996  010A  25BB               	fcall	_I2CInit
   997                           
   998                           ;main.c: 37: ini_adxl345();
   999  010B  23FD               	fcall	_ini_adxl345
  1000                           
  1001                           ;main.c: 39: id = E_Read(0);
  1002  010C  3000               	movlw	0
  1003  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1004  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1005  010F  00A2               	movwf	E_Read@addr
  1006  0110  00A3               	movwf	E_Read@addr+1
  1007  0111  25A5               	fcall	_E_Read
  1008  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1009  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1010  0114  00C2               	movwf	??_main
  1011  0115  01C3               	clrf	??_main+1
  1012  0116  0842               	movf	??_main,w
  1013  0117  00C6               	movwf	main@id
  1014  0118  0843               	movf	??_main+1,w
  1015  0119  00C7               	movwf	main@id+1
  1016                           
  1017                           ;main.c: 40: _delay((unsigned long)((10)*(20000000/4000.0)));
  1018  011A  3041               	movlw	65
  1019  011B  1283               	bcf	3,5	;RP0=0, select bank0
  1020  011C  1303               	bcf	3,6	;RP1=0, select bank0
  1021  011D  00C3               	movwf	??_main+1
  1022  011E  30EE               	movlw	238
  1023  011F  00C2               	movwf	??_main
  1024  0120                     u977:	
  1025  0120  0BC2               	decfsz	??_main,f
  1026  0121  2920               	goto	u977
  1027  0122  0BC3               	decfsz	??_main+1,f
  1028  0123  2920               	goto	u977
  1029                           
  1030                           ;main.c: 41: pow = E_Read(0x2D);
  1031  0124  302D               	movlw	45
  1032  0125  1283               	bcf	3,5	;RP0=0, select bank0
  1033  0126  1303               	bcf	3,6	;RP1=0, select bank0
  1034  0127  00A2               	movwf	E_Read@addr
  1035  0128  3000               	movlw	0
  1036  0129  00A3               	movwf	E_Read@addr+1
  1037  012A  25A5               	fcall	_E_Read
  1038  012B  1283               	bcf	3,5	;RP0=0, select bank0
  1039  012C  1303               	bcf	3,6	;RP1=0, select bank0
  1040  012D  00C2               	movwf	??_main
  1041  012E  01C3               	clrf	??_main+1
  1042  012F  0842               	movf	??_main,w
  1043  0130  00C8               	movwf	main@pow
  1044  0131  0843               	movf	??_main+1,w
  1045  0132  00C9               	movwf	main@pow+1
  1046                           
  1047                           ;main.c: 42: _delay((unsigned long)((10)*(20000000/4000.0)));
  1048  0133  3041               	movlw	65
  1049  0134  1283               	bcf	3,5	;RP0=0, select bank0
  1050  0135  1303               	bcf	3,6	;RP1=0, select bank0
  1051  0136  00C3               	movwf	??_main+1
  1052  0137  30EE               	movlw	238
  1053  0138  00C2               	movwf	??_main
  1054  0139                     u987:	
  1055  0139  0BC2               	decfsz	??_main,f
  1056  013A  2939               	goto	u987
  1057  013B  0BC3               	decfsz	??_main+1,f
  1058  013C  2939               	goto	u987
  1059                           
  1060                           ;main.c: 43: bw_rate = E_Read(0x2C);
  1061  013D  302C               	movlw	44
  1062  013E  1283               	bcf	3,5	;RP0=0, select bank0
  1063  013F  1303               	bcf	3,6	;RP1=0, select bank0
  1064  0140  00A2               	movwf	E_Read@addr
  1065  0141  3000               	movlw	0
  1066  0142  00A3               	movwf	E_Read@addr+1
  1067  0143  25A5               	fcall	_E_Read
  1068  0144  1283               	bcf	3,5	;RP0=0, select bank0
  1069  0145  1303               	bcf	3,6	;RP1=0, select bank0
  1070  0146  00C2               	movwf	??_main
  1071  0147  01C3               	clrf	??_main+1
  1072  0148  0842               	movf	??_main,w
  1073  0149  00CA               	movwf	main@bw_rate
  1074  014A  0843               	movf	??_main+1,w
  1075  014B  00CB               	movwf	main@bw_rate+1
  1076  014C                     l1366:	
  1077                           ;main.c: 45: while(1)
  1078                           
  1079                           
  1080                           ;main.c: 46: {
  1081                           ;main.c: 47: X = Y = Z = 0;
  1082  014C  01D0               	clrf	main@Z
  1083  014D  01D1               	clrf	main@Z+1
  1084  014E  01CE               	clrf	main@Y
  1085  014F  01CF               	clrf	main@Y+1
  1086  0150  01CC               	clrf	main@X
  1087  0151  01CD               	clrf	main@X+1
  1088                           
  1089                           ;main.c: 49: I2CStart();
  1090  0152  263D               	fcall	_I2CStart
  1091                           
  1092                           ;main.c: 50: I2CSend(0xA6);
  1093  0153  30A6               	movlw	166
  1094  0154  2604               	fcall	_I2CSend
  1095                           
  1096                           ;main.c: 51: I2CSend(50);
  1097  0155  3032               	movlw	50
  1098  0156  2604               	fcall	_I2CSend
  1099                           
  1100                           ;main.c: 52: I2CRestart();
  1101  0157  2643               	fcall	_I2CRestart
  1102                           
  1103                           ;main.c: 53: I2CSend(0xA7);
  1104  0158  30A7               	movlw	167
  1105  0159  2604               	fcall	_I2CSend
  1106                           
  1107                           ;main.c: 54: XL = I2CRead();
  1108  015A  25CE               	fcall	_I2CRead
  1109  015B  1283               	bcf	3,5	;RP0=0, select bank0
  1110  015C  1303               	bcf	3,6	;RP1=0, select bank0
  1111  015D  00C2               	movwf	??_main
  1112  015E  0842               	movf	??_main,w
  1113  015F  00D2               	movwf	main@XL
  1114                           
  1115                           ;main.c: 55: I2CAck();
  1116  0160  2629               	fcall	_I2CAck
  1117                           
  1118                           ;main.c: 56: XH = I2CRead();
  1119  0161  25CE               	fcall	_I2CRead
  1120  0162  1283               	bcf	3,5	;RP0=0, select bank0
  1121  0163  1303               	bcf	3,6	;RP1=0, select bank0
  1122  0164  00C2               	movwf	??_main
  1123  0165  0842               	movf	??_main,w
  1124  0166  00D3               	movwf	main@XH
  1125                           
  1126                           ;main.c: 57: I2CAck();
  1127  0167  2629               	fcall	_I2CAck
  1128                           
  1129                           ;main.c: 58: YL = I2CRead();
  1130  0168  25CE               	fcall	_I2CRead
  1131  0169  1283               	bcf	3,5	;RP0=0, select bank0
  1132  016A  1303               	bcf	3,6	;RP1=0, select bank0
  1133  016B  00C2               	movwf	??_main
  1134  016C  0842               	movf	??_main,w
  1135  016D  00D5               	movwf	main@YL
  1136                           
  1137                           ;main.c: 59: I2CAck();
  1138  016E  2629               	fcall	_I2CAck
  1139                           
  1140                           ;main.c: 60: YH = I2CRead();
  1141  016F  25CE               	fcall	_I2CRead
  1142  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1143  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1144  0172  00C2               	movwf	??_main
  1145  0173  0842               	movf	??_main,w
  1146  0174  00D4               	movwf	main@YH
  1147                           
  1148                           ;main.c: 61: I2CAck();
  1149  0175  2629               	fcall	_I2CAck
  1150                           
  1151                           ;main.c: 62: ZL = I2CRead();
  1152  0176  25CE               	fcall	_I2CRead
  1153  0177  1283               	bcf	3,5	;RP0=0, select bank0
  1154  0178  1303               	bcf	3,6	;RP1=0, select bank0
  1155  0179  00C2               	movwf	??_main
  1156  017A  0842               	movf	??_main,w
  1157  017B  00D7               	movwf	main@ZL
  1158                           
  1159                           ;main.c: 63: I2CAck();
  1160  017C  2629               	fcall	_I2CAck
  1161                           
  1162                           ;main.c: 64: ZH = I2CRead();
  1163  017D  25CE               	fcall	_I2CRead
  1164  017E  1283               	bcf	3,5	;RP0=0, select bank0
  1165  017F  1303               	bcf	3,6	;RP1=0, select bank0
  1166  0180  00C2               	movwf	??_main
  1167  0181  0842               	movf	??_main,w
  1168  0182  00D6               	movwf	main@ZH
  1169                           
  1170                           ;main.c: 65: I2CNak();
  1171  0183  2630               	fcall	_I2CNak
  1172                           
  1173                           ;main.c: 66: I2CStop();
  1174  0184  2637               	fcall	_I2CStop
  1175                           
  1176                           ;main.c: 68: X = ((XH<<8) | XL);
  1177  0185  1283               	bcf	3,5	;RP0=0, select bank0
  1178  0186  1303               	bcf	3,6	;RP1=0, select bank0
  1179  0187  0852               	movf	main@XL,w
  1180  0188  00C2               	movwf	??_main
  1181  0189  01C3               	clrf	??_main+1
  1182  018A  0853               	movf	main@XH,w
  1183  018B  00C4               	movwf	??_main+2
  1184  018C  01C5               	clrf	??_main+3
  1185  018D  0844               	movf	??_main+2,w
  1186  018E  00C5               	movwf	??_main+3
  1187  018F  01C4               	clrf	??_main+2
  1188  0190  0842               	movf	??_main,w
  1189  0191  0444               	iorwf	??_main+2,w
  1190  0192  00CC               	movwf	main@X
  1191  0193  0843               	movf	??_main+1,w
  1192  0194  0445               	iorwf	??_main+3,w
  1193  0195  00CD               	movwf	main@X+1
  1194                           
  1195                           ;main.c: 69: Y = ((YH<<8) | YL);
  1196  0196  0855               	movf	main@YL,w
  1197  0197  00C2               	movwf	??_main
  1198  0198  01C3               	clrf	??_main+1
  1199  0199  0854               	movf	main@YH,w
  1200  019A  00C4               	movwf	??_main+2
  1201  019B  01C5               	clrf	??_main+3
  1202  019C  0844               	movf	??_main+2,w
  1203  019D  00C5               	movwf	??_main+3
  1204  019E  01C4               	clrf	??_main+2
  1205  019F  0842               	movf	??_main,w
  1206  01A0  0444               	iorwf	??_main+2,w
  1207  01A1  00CE               	movwf	main@Y
  1208  01A2  0843               	movf	??_main+1,w
  1209  01A3  0445               	iorwf	??_main+3,w
  1210  01A4  00CF               	movwf	main@Y+1
  1211                           
  1212                           ;main.c: 70: Z = ((ZH<<8) | ZL);
  1213  01A5  0857               	movf	main@ZL,w
  1214  01A6  00C2               	movwf	??_main
  1215  01A7  01C3               	clrf	??_main+1
  1216  01A8  0856               	movf	main@ZH,w
  1217  01A9  00C4               	movwf	??_main+2
  1218  01AA  01C5               	clrf	??_main+3
  1219  01AB  0844               	movf	??_main+2,w
  1220  01AC  00C5               	movwf	??_main+3
  1221  01AD  01C4               	clrf	??_main+2
  1222  01AE  0842               	movf	??_main,w
  1223  01AF  0444               	iorwf	??_main+2,w
  1224  01B0  00D0               	movwf	main@Z
  1225  01B1  0843               	movf	??_main+1,w
  1226  01B2  0445               	iorwf	??_main+3,w
  1227  01B3  00D1               	movwf	main@Z+1
  1228                           
  1229                           ;main.c: 73: XAVG = get_averageX(X);
  1230  01B4  084D               	movf	main@X+1,w
  1231  01B5  00BD               	movwf	get_averageX@Data+1
  1232  01B6  084C               	movf	main@X,w
  1233  01B7  00BC               	movwf	get_averageX@Data
  1234  01B8  2351               	fcall	_get_averageX
  1235  01B9  1283               	bcf	3,5	;RP0=0, select bank0
  1236  01BA  1303               	bcf	3,6	;RP1=0, select bank0
  1237  01BB  083D               	movf	?_get_averageX+1,w
  1238  01BC  00E7               	movwf	_XAVG+1
  1239  01BD  083C               	movf	?_get_averageX,w
  1240  01BE  00E6               	movwf	_XAVG
  1241                           
  1242                           ;main.c: 74: YAVG = get_averageY(Y);
  1243  01BF  084F               	movf	main@Y+1,w
  1244  01C0  00BD               	movwf	get_averageY@Data+1
  1245  01C1  084E               	movf	main@Y,w
  1246  01C2  00BC               	movwf	get_averageY@Data
  1247  01C3  22FB               	fcall	_get_averageY
  1248  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  1249  01C5  1303               	bcf	3,6	;RP1=0, select bank0
  1250  01C6  083D               	movf	?_get_averageY+1,w
  1251  01C7  00E5               	movwf	_YAVG+1
  1252  01C8  083C               	movf	?_get_averageY,w
  1253  01C9  00E4               	movwf	_YAVG
  1254                           
  1255                           ;main.c: 75: ZAVG = get_averageZ(Z);
  1256  01CA  0851               	movf	main@Z+1,w
  1257  01CB  00BD               	movwf	get_averageZ@Data+1
  1258  01CC  0850               	movf	main@Z,w
  1259  01CD  00BC               	movwf	get_averageZ@Data
  1260  01CE  22A5               	fcall	_get_averageZ
  1261  01CF  1283               	bcf	3,5	;RP0=0, select bank0
  1262  01D0  1303               	bcf	3,6	;RP1=0, select bank0
  1263  01D1  083D               	movf	?_get_averageZ+1,w
  1264  01D2  00E3               	movwf	_ZAVG+1
  1265  01D3  083C               	movf	?_get_averageZ,w
  1266  01D4  00E2               	movwf	_ZAVG
  1267                           
  1268                           ;main.c: 77: AVG = (XAVG/3) + (YAVG/3)+ (ZAVG/3);
  1269  01D5  3003               	movlw	3
  1270  01D6  00A0               	movwf	___lwdiv@divisor
  1271  01D7  3000               	movlw	0
  1272  01D8  00A1               	movwf	___lwdiv@divisor+1
  1273  01D9  0867               	movf	_XAVG+1,w
  1274  01DA  00A3               	movwf	___lwdiv@dividend+1
  1275  01DB  0866               	movf	_XAVG,w
  1276  01DC  00A2               	movwf	___lwdiv@dividend
  1277  01DD  24CE               	fcall	___lwdiv
  1278  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  1279  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  1280  01E0  0820               	movf	?___lwdiv,w
  1281  01E1  00C2               	movwf	??_main
  1282  01E2  0821               	movf	?___lwdiv+1,w
  1283  01E3  00C3               	movwf	??_main+1
  1284  01E4  3003               	movlw	3
  1285  01E5  00A0               	movwf	___lwdiv@divisor
  1286  01E6  3000               	movlw	0
  1287  01E7  00A1               	movwf	___lwdiv@divisor+1
  1288  01E8  0865               	movf	_YAVG+1,w
  1289  01E9  00A3               	movwf	___lwdiv@dividend+1
  1290  01EA  0864               	movf	_YAVG,w
  1291  01EB  00A2               	movwf	___lwdiv@dividend
  1292  01EC  24CE               	fcall	___lwdiv
  1293  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  1294  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  1295  01EF  0820               	movf	?___lwdiv,w
  1296  01F0  0742               	addwf	??_main,w
  1297  01F1  00C4               	movwf	??_main+2
  1298  01F2  0821               	movf	?___lwdiv+1,w
  1299  01F3  1803               	skipnc
  1300  01F4  0A21               	incf	?___lwdiv+1,w
  1301  01F5  0743               	addwf	??_main+1,w
  1302  01F6  00C5               	movwf	??_main+3
  1303  01F7  3003               	movlw	3
  1304  01F8  00A0               	movwf	___lwdiv@divisor
  1305  01F9  3000               	movlw	0
  1306  01FA  00A1               	movwf	___lwdiv@divisor+1
  1307  01FB  0863               	movf	_ZAVG+1,w
  1308  01FC  00A3               	movwf	___lwdiv@dividend+1
  1309  01FD  0862               	movf	_ZAVG,w
  1310  01FE  00A2               	movwf	___lwdiv@dividend
  1311  01FF  24CE               	fcall	___lwdiv
  1312  0200  1283               	bcf	3,5	;RP0=0, select bank0
  1313  0201  1303               	bcf	3,6	;RP1=0, select bank0
  1314  0202  0820               	movf	?___lwdiv,w
  1315  0203  0744               	addwf	??_main+2,w
  1316  0204  00E0               	movwf	_AVG
  1317  0205  0821               	movf	?___lwdiv+1,w
  1318  0206  1803               	skipnc
  1319  0207  0A21               	incf	?___lwdiv+1,w
  1320  0208  0745               	addwf	??_main+3,w
  1321  0209  00E1               	movwf	_AVG+1
  1322                           
  1323                           ;main.c: 79: AVG = get_average(AVG);
  1324  020A  0861               	movf	_AVG+1,w
  1325  020B  00BD               	movwf	get_average@Data+1
  1326  020C  0860               	movf	_AVG,w
  1327  020D  00BC               	movwf	get_average@Data
  1328  020E  23A7               	fcall	_get_average
  1329  020F  1283               	bcf	3,5	;RP0=0, select bank0
  1330  0210  1303               	bcf	3,6	;RP1=0, select bank0
  1331  0211  083D               	movf	?_get_average+1,w
  1332  0212  00E1               	movwf	_AVG+1
  1333  0213  083C               	movf	?_get_average,w
  1334  0214  00E0               	movwf	_AVG
  1335  0215  294C               	goto	l1366
  1336  0216                     __end_of_main:	
  1337                           
  1338                           	psect	text1
  1339  05F8                     __ptext1:	
  1340 ;; *************** function _system_init *****************
  1341 ;; Defined at:
  1342 ;;		line 16 in file "main.c"
  1343 ;; Parameters:    Size  Location     Type
  1344 ;;		None
  1345 ;; Auto vars:     Size  Location     Type
  1346 ;;		None
  1347 ;; Return value:  Size  Location     Type
  1348 ;;                  1    wreg      void 
  1349 ;; Registers used:
  1350 ;;		wreg, status,2
  1351 ;; Tracked objects:
  1352 ;;		On entry : 0/0
  1353 ;;		On exit  : 0/0
  1354 ;;		Unchanged: 0/0
  1355 ;; Data sizes:     COMMON   BANK0   BANK1
  1356 ;;      Params:         0       0       0
  1357 ;;      Locals:         0       0       0
  1358 ;;      Temps:          0       0       0
  1359 ;;      Totals:         0       0       0
  1360 ;;Total ram usage:        0 bytes
  1361 ;; Hardware stack levels used:    1
  1362 ;; Hardware stack levels required when called:    3
  1363 ;; This function calls:
  1364 ;;		Nothing
  1365 ;; This function is called by:
  1366 ;;		_main
  1367 ;; This function uses a non-reentrant model
  1368 ;;
  1369                           
  1370                           
  1371                           ;psect for function _system_init
  1372  05F8                     _system_init:	
  1373                           
  1374                           ;main.c: 18: TRISC0 = 0;
  1375                           
  1376                           ;incstack = 0
  1377                           ; Regs used in _system_init: [wreg+status,2]
  1378  05F8  1683               	bsf	3,5	;RP0=1, select bank1
  1379  05F9  1303               	bcf	3,6	;RP1=0, select bank1
  1380  05FA  1007               	bcf	7,0	;volatile
  1381                           
  1382                           ;main.c: 19: TRISA = 0xFF;
  1383  05FB  30FF               	movlw	255
  1384  05FC  0085               	movwf	5	;volatile
  1385                           
  1386                           ;main.c: 20: ADCON0 = 0x00;
  1387  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  1388  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  1389  05FF  019F               	clrf	31	;volatile
  1390                           
  1391                           ;main.c: 21: ANSEL = 0x00;
  1392  0600  1683               	bsf	3,5	;RP0=1, select bank3
  1393  0601  1703               	bsf	3,6	;RP1=1, select bank3
  1394  0602  0188               	clrf	8	;volatile
  1395  0603  0008               	return
  1396  0604                     __end_of_system_init:	
  1397                           
  1398                           	psect	text2
  1399  03FD                     __ptext2:	
  1400 ;; *************** function _ini_adxl345 *****************
  1401 ;; Defined at:
  1402 ;;		line 6 in file "ADXL_m.c"
  1403 ;; Parameters:    Size  Location     Type
  1404 ;;		None
  1405 ;; Auto vars:     Size  Location     Type
  1406 ;;		None
  1407 ;; Return value:  Size  Location     Type
  1408 ;;                  1    wreg      void 
  1409 ;; Registers used:
  1410 ;;		wreg, status,2, status,0, pclath, cstack
  1411 ;; Tracked objects:
  1412 ;;		On entry : 0/0
  1413 ;;		On exit  : 0/0
  1414 ;;		Unchanged: 0/0
  1415 ;; Data sizes:     COMMON   BANK0   BANK1
  1416 ;;      Params:         0       0       0
  1417 ;;      Locals:         0       0       0
  1418 ;;      Temps:          0       2       0
  1419 ;;      Totals:         0       2       0
  1420 ;;Total ram usage:        2 bytes
  1421 ;; Hardware stack levels used:    1
  1422 ;; Hardware stack levels required when called:    6
  1423 ;; This function calls:
  1424 ;;		_E_Write
  1425 ;; This function is called by:
  1426 ;;		_main
  1427 ;; This function uses a non-reentrant model
  1428 ;;
  1429                           
  1430                           
  1431                           ;psect for function _ini_adxl345
  1432  03FD                     _ini_adxl345:	
  1433                           
  1434                           ;ADXL_m.c: 8: E_Write(56,0x9f);
  1435                           
  1436                           ;incstack = 0
  1437                           ; Regs used in _ini_adxl345: [wreg+status,2+status,0+pclath+cstack]
  1438  03FD  3038               	movlw	56
  1439  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  1440  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  1441  0400  00A1               	movwf	E_Write@addr
  1442  0401  3000               	movlw	0
  1443  0402  00A2               	movwf	E_Write@addr+1
  1444  0403  309F               	movlw	159
  1445  0404  00A4               	movwf	??_ini_adxl345
  1446  0405  0824               	movf	??_ini_adxl345,w
  1447  0406  00A3               	movwf	E_Write@ch
  1448  0407  25DE               	fcall	_E_Write
  1449                           
  1450                           ;ADXL_m.c: 9: _delay((unsigned long)((10)*(20000000/4000.0)));
  1451  0408  3041               	movlw	65
  1452  0409  1283               	bcf	3,5	;RP0=0, select bank0
  1453  040A  1303               	bcf	3,6	;RP1=0, select bank0
  1454  040B  00A5               	movwf	??_ini_adxl345+1
  1455  040C  30EE               	movlw	238
  1456  040D  00A4               	movwf	??_ini_adxl345
  1457  040E                     u997:	
  1458  040E  0BA4               	decfsz	??_ini_adxl345,f
  1459  040F  2C0E               	goto	u997
  1460  0410  0BA5               	decfsz	??_ini_adxl345+1,f
  1461  0411  2C0E               	goto	u997
  1462                           
  1463                           ;ADXL_m.c: 10: E_Write(49,0x09);
  1464  0412  3031               	movlw	49
  1465  0413  1283               	bcf	3,5	;RP0=0, select bank0
  1466  0414  1303               	bcf	3,6	;RP1=0, select bank0
  1467  0415  00A1               	movwf	E_Write@addr
  1468  0416  3000               	movlw	0
  1469  0417  00A2               	movwf	E_Write@addr+1
  1470  0418  3009               	movlw	9
  1471  0419  00A4               	movwf	??_ini_adxl345
  1472  041A  0824               	movf	??_ini_adxl345,w
  1473  041B  00A3               	movwf	E_Write@ch
  1474  041C  25DE               	fcall	_E_Write
  1475                           
  1476                           ;ADXL_m.c: 11: _delay((unsigned long)((10)*(20000000/4000.0)));
  1477  041D  3041               	movlw	65
  1478  041E  1283               	bcf	3,5	;RP0=0, select bank0
  1479  041F  1303               	bcf	3,6	;RP1=0, select bank0
  1480  0420  00A5               	movwf	??_ini_adxl345+1
  1481  0421  30EE               	movlw	238
  1482  0422  00A4               	movwf	??_ini_adxl345
  1483  0423                     u1007:	
  1484  0423  0BA4               	decfsz	??_ini_adxl345,f
  1485  0424  2C23               	goto	u1007
  1486  0425  0BA5               	decfsz	??_ini_adxl345+1,f
  1487  0426  2C23               	goto	u1007
  1488                           
  1489                           ;ADXL_m.c: 12: E_Write(44,0x0d);
  1490  0427  302C               	movlw	44
  1491  0428  1283               	bcf	3,5	;RP0=0, select bank0
  1492  0429  1303               	bcf	3,6	;RP1=0, select bank0
  1493  042A  00A1               	movwf	E_Write@addr
  1494  042B  3000               	movlw	0
  1495  042C  00A2               	movwf	E_Write@addr+1
  1496  042D  300D               	movlw	13
  1497  042E  00A4               	movwf	??_ini_adxl345
  1498  042F  0824               	movf	??_ini_adxl345,w
  1499  0430  00A3               	movwf	E_Write@ch
  1500  0431  25DE               	fcall	_E_Write
  1501                           
  1502                           ;ADXL_m.c: 13: _delay((unsigned long)((10)*(20000000/4000.0)));
  1503  0432  3041               	movlw	65
  1504  0433  1283               	bcf	3,5	;RP0=0, select bank0
  1505  0434  1303               	bcf	3,6	;RP1=0, select bank0
  1506  0435  00A5               	movwf	??_ini_adxl345+1
  1507  0436  30EE               	movlw	238
  1508  0437  00A4               	movwf	??_ini_adxl345
  1509  0438                     u1017:	
  1510  0438  0BA4               	decfsz	??_ini_adxl345,f
  1511  0439  2C38               	goto	u1017
  1512  043A  0BA5               	decfsz	??_ini_adxl345+1,f
  1513  043B  2C38               	goto	u1017
  1514                           
  1515                           ;ADXL_m.c: 14: E_Write(45,0x08);
  1516  043C  302D               	movlw	45
  1517  043D  1283               	bcf	3,5	;RP0=0, select bank0
  1518  043E  1303               	bcf	3,6	;RP1=0, select bank0
  1519  043F  00A1               	movwf	E_Write@addr
  1520  0440  3000               	movlw	0
  1521  0441  00A2               	movwf	E_Write@addr+1
  1522  0442  3008               	movlw	8
  1523  0443  00A4               	movwf	??_ini_adxl345
  1524  0444  0824               	movf	??_ini_adxl345,w
  1525  0445  00A3               	movwf	E_Write@ch
  1526  0446  25DE               	fcall	_E_Write
  1527  0447  0008               	return
  1528  0448                     __end_of_ini_adxl345:	
  1529                           
  1530                           	psect	text3
  1531  05DE                     __ptext3:	
  1532 ;; *************** function _E_Write *****************
  1533 ;; Defined at:
  1534 ;;		line 154 in file "ADXL_m.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;  addr            2    1[BANK0 ] int 
  1537 ;;  ch              1    3[BANK0 ] unsigned char 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;		None
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      unsigned char 
  1542 ;; Registers used:
  1543 ;;		wreg, status,2, status,0, pclath, cstack
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMMON   BANK0   BANK1
  1549 ;;      Params:         0       3       0
  1550 ;;      Locals:         0       0       0
  1551 ;;      Temps:          0       0       0
  1552 ;;      Totals:         0       3       0
  1553 ;;Total ram usage:        3 bytes
  1554 ;; Hardware stack levels used:    1
  1555 ;; Hardware stack levels required when called:    5
  1556 ;; This function calls:
  1557 ;;		_I2CSend
  1558 ;;		_I2CStart
  1559 ;;		_I2CStop
  1560 ;; This function is called by:
  1561 ;;		_ini_adxl345
  1562 ;; This function uses a non-reentrant model
  1563 ;;
  1564                           
  1565                           
  1566                           ;psect for function _E_Write
  1567  05DE                     _E_Write:	
  1568                           
  1569                           ;ADXL_m.c: 157: I2CStart();
  1570                           
  1571                           ;incstack = 0
  1572                           ; Regs used in _E_Write: [wreg+status,2+status,0+pclath+cstack]
  1573  05DE  263D               	fcall	_I2CStart
  1574                           
  1575                           ;ADXL_m.c: 159: I2CSend(0xA6);
  1576  05DF  30A6               	movlw	166
  1577  05E0  2604               	fcall	_I2CSend
  1578                           
  1579                           ;ADXL_m.c: 161: I2CSend(addr);
  1580  05E1  1283               	bcf	3,5	;RP0=0, select bank0
  1581  05E2  1303               	bcf	3,6	;RP1=0, select bank0
  1582  05E3  0821               	movf	E_Write@addr,w
  1583  05E4  2604               	fcall	_I2CSend
  1584                           
  1585                           ;ADXL_m.c: 163: I2CSend(ch);
  1586  05E5  1283               	bcf	3,5	;RP0=0, select bank0
  1587  05E6  1303               	bcf	3,6	;RP1=0, select bank0
  1588  05E7  0823               	movf	E_Write@ch,w
  1589  05E8  2604               	fcall	_I2CSend
  1590                           
  1591                           ;ADXL_m.c: 165: I2CStop();
  1592  05E9  2637               	fcall	_I2CStop
  1593  05EA  0008               	return
  1594  05EB                     __end_of_E_Write:	
  1595                           ;ADXL_m.c: 166: return 1;
  1596                           ;	Return value of _E_Write is never used
  1597                           
  1598                           
  1599                           	psect	text4
  1600  02A5                     __ptext4:	
  1601 ;; *************** function _get_averageZ *****************
  1602 ;; Defined at:
  1603 ;;		line 25 in file "average_calculations.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  Data            2   28[BANK0 ] short 
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  2   28[BANK0 ] short 
  1610 ;; Registers used:
  1611 ;;		wreg, status,2, status,0, pclath, cstack
  1612 ;; Tracked objects:
  1613 ;;		On entry : 0/0
  1614 ;;		On exit  : 0/0
  1615 ;;		Unchanged: 0/0
  1616 ;; Data sizes:     COMMON   BANK0   BANK1
  1617 ;;      Params:         0       2       0
  1618 ;;      Locals:         0       0       0
  1619 ;;      Temps:          0       4       0
  1620 ;;      Totals:         0       6       0
  1621 ;;Total ram usage:        6 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; Hardware stack levels required when called:    4
  1624 ;; This function calls:
  1625 ;;		___aldiv
  1626 ;;		___lmul
  1627 ;; This function is called by:
  1628 ;;		_main
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           
  1633                           ;psect for function _get_averageZ
  1634  02A5                     _get_averageZ:	
  1635                           
  1636                           ;average_calculations.c: 27: static short OutPut = 0;
  1637                           ;average_calculations.c: 28: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  1638                           
  1639                           ;incstack = 0
  1640                           ; Regs used in _get_averageZ: [wreg+status,2+status,0+pclath+cstack]
  1641  02A5  3000               	movlw	0
  1642  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  1643  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  1644  02A8  00B0               	movwf	___aldiv@divisor+3
  1645  02A9  3000               	movlw	0
  1646  02AA  00AF               	movwf	___aldiv@divisor+2
  1647  02AB  3000               	movlw	0
  1648  02AC  00AE               	movwf	___aldiv@divisor+1
  1649  02AD  3064               	movlw	100
  1650  02AE  00AD               	movwf	___aldiv@divisor
  1651  02AF  085A               	movf	get_averageZ@OutPut,w
  1652  02B0  00BE               	movwf	??_get_averageZ
  1653  02B1  085B               	movf	get_averageZ@OutPut+1,w
  1654  02B2  00BF               	movwf	??_get_averageZ+1
  1655  02B3  3000               	movlw	0
  1656  02B4  1BBF               	btfsc	??_get_averageZ+1,7
  1657  02B5  30FF               	movlw	255
  1658  02B6  00C0               	movwf	??_get_averageZ+2
  1659  02B7  00C1               	movwf	??_get_averageZ+3
  1660  02B8  3003               	movlw	3
  1661  02B9                     u805:	
  1662  02B9  1003               	clrc
  1663  02BA  0DBE               	rlf	??_get_averageZ,f
  1664  02BB  0DBF               	rlf	??_get_averageZ+1,f
  1665  02BC  0DC0               	rlf	??_get_averageZ+2,f
  1666  02BD  0DC1               	rlf	??_get_averageZ+3,f
  1667  02BE  3EFF               	addlw	-1
  1668  02BF  1D03               	skipz
  1669  02C0  2AB9               	goto	u805
  1670  02C1  083C               	movf	get_averageZ@Data,w
  1671  02C2  00A0               	movwf	___lmul@multiplier
  1672  02C3  083D               	movf	get_averageZ@Data+1,w
  1673  02C4  00A1               	movwf	___lmul@multiplier+1
  1674  02C5  3000               	movlw	0
  1675  02C6  1BA1               	btfsc	___lmul@multiplier+1,7
  1676  02C7  30FF               	movlw	255
  1677  02C8  00A2               	movwf	___lmul@multiplier+2
  1678  02C9  00A3               	movwf	___lmul@multiplier+3
  1679  02CA  3000               	movlw	0
  1680  02CB  00A7               	movwf	___lmul@multiplicand+3
  1681  02CC  3000               	movlw	0
  1682  02CD  00A6               	movwf	___lmul@multiplicand+2
  1683  02CE  3000               	movlw	0
  1684  02CF  00A5               	movwf	___lmul@multiplicand+1
  1685  02D0  305C               	movlw	92
  1686  02D1  00A4               	movwf	___lmul@multiplicand
  1687  02D2  248D               	fcall	___lmul
  1688  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  1689  02D4  1303               	bcf	3,6	;RP1=0, select bank0
  1690  02D5  0820               	movf	?___lmul,w
  1691  02D6  07BE               	addwf	??_get_averageZ,f
  1692  02D7  0821               	movf	?___lmul+1,w
  1693  02D8  1803               	skipnc
  1694  02D9  0F21               	incfsz	?___lmul+1,w
  1695  02DA  2ADC               	goto	u810
  1696  02DB  2ADD               	goto	u811
  1697  02DC                     u810:	
  1698  02DC  07BF               	addwf	??_get_averageZ+1,f
  1699  02DD                     u811:	
  1700  02DD  0822               	movf	?___lmul+2,w
  1701  02DE  1803               	skipnc
  1702  02DF  0F22               	incfsz	?___lmul+2,w
  1703  02E0  2AE2               	goto	u812
  1704  02E1  2AE3               	goto	u813
  1705  02E2                     u812:	
  1706  02E2  07C0               	addwf	??_get_averageZ+2,f
  1707  02E3                     u813:	
  1708  02E3  0823               	movf	?___lmul+3,w
  1709  02E4  1803               	skipnc
  1710  02E5  0A23               	incf	?___lmul+3,w
  1711  02E6  07C1               	addwf	??_get_averageZ+3,f
  1712  02E7  0841               	movf	??_get_averageZ+3,w
  1713  02E8  00B4               	movwf	___aldiv@dividend+3
  1714  02E9  0840               	movf	??_get_averageZ+2,w
  1715  02EA  00B3               	movwf	___aldiv@dividend+2
  1716  02EB  083F               	movf	??_get_averageZ+1,w
  1717  02EC  00B2               	movwf	___aldiv@dividend+1
  1718  02ED  083E               	movf	??_get_averageZ,w
  1719  02EE  00B1               	movwf	___aldiv@dividend
  1720  02EF  2216               	fcall	___aldiv
  1721  02F0  1283               	bcf	3,5	;RP0=0, select bank0
  1722  02F1  1303               	bcf	3,6	;RP1=0, select bank0
  1723  02F2  082E               	movf	?___aldiv+1,w
  1724  02F3  00DB               	movwf	get_averageZ@OutPut+1
  1725  02F4  082D               	movf	?___aldiv,w
  1726  02F5  00DA               	movwf	get_averageZ@OutPut
  1727                           
  1728                           ;average_calculations.c: 29: return OutPut;
  1729  02F6  085B               	movf	get_averageZ@OutPut+1,w
  1730  02F7  00BD               	movwf	?_get_averageZ+1
  1731  02F8  085A               	movf	get_averageZ@OutPut,w
  1732  02F9  00BC               	movwf	?_get_averageZ
  1733  02FA  0008               	return
  1734  02FB                     __end_of_get_averageZ:	
  1735                           
  1736                           	psect	text5
  1737  02FB                     __ptext5:	
  1738 ;; *************** function _get_averageY *****************
  1739 ;; Defined at:
  1740 ;;		line 19 in file "average_calculations.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  Data            2   28[BANK0 ] short 
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;		None
  1745 ;; Return value:  Size  Location     Type
  1746 ;;                  2   28[BANK0 ] short 
  1747 ;; Registers used:
  1748 ;;		wreg, status,2, status,0, pclath, cstack
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 0/0
  1752 ;;		Unchanged: 0/0
  1753 ;; Data sizes:     COMMON   BANK0   BANK1
  1754 ;;      Params:         0       2       0
  1755 ;;      Locals:         0       0       0
  1756 ;;      Temps:          0       4       0
  1757 ;;      Totals:         0       6       0
  1758 ;;Total ram usage:        6 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    4
  1761 ;; This function calls:
  1762 ;;		___aldiv
  1763 ;;		___lmul
  1764 ;; This function is called by:
  1765 ;;		_main
  1766 ;; This function uses a non-reentrant model
  1767 ;;
  1768                           
  1769                           
  1770                           ;psect for function _get_averageY
  1771  02FB                     _get_averageY:	
  1772                           
  1773                           ;average_calculations.c: 21: static short OutPut = 0;
  1774                           ;average_calculations.c: 22: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  1775                           
  1776                           ;incstack = 0
  1777                           ; Regs used in _get_averageY: [wreg+status,2+status,0+pclath+cstack]
  1778  02FB  3000               	movlw	0
  1779  02FC  1283               	bcf	3,5	;RP0=0, select bank0
  1780  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  1781  02FE  00B0               	movwf	___aldiv@divisor+3
  1782  02FF  3000               	movlw	0
  1783  0300  00AF               	movwf	___aldiv@divisor+2
  1784  0301  3000               	movlw	0
  1785  0302  00AE               	movwf	___aldiv@divisor+1
  1786  0303  3064               	movlw	100
  1787  0304  00AD               	movwf	___aldiv@divisor
  1788  0305  085C               	movf	get_averageY@OutPut,w
  1789  0306  00BE               	movwf	??_get_averageY
  1790  0307  085D               	movf	get_averageY@OutPut+1,w
  1791  0308  00BF               	movwf	??_get_averageY+1
  1792  0309  3000               	movlw	0
  1793  030A  1BBF               	btfsc	??_get_averageY+1,7
  1794  030B  30FF               	movlw	255
  1795  030C  00C0               	movwf	??_get_averageY+2
  1796  030D  00C1               	movwf	??_get_averageY+3
  1797  030E  3003               	movlw	3
  1798  030F                     u785:	
  1799  030F  1003               	clrc
  1800  0310  0DBE               	rlf	??_get_averageY,f
  1801  0311  0DBF               	rlf	??_get_averageY+1,f
  1802  0312  0DC0               	rlf	??_get_averageY+2,f
  1803  0313  0DC1               	rlf	??_get_averageY+3,f
  1804  0314  3EFF               	addlw	-1
  1805  0315  1D03               	skipz
  1806  0316  2B0F               	goto	u785
  1807  0317  083C               	movf	get_averageY@Data,w
  1808  0318  00A0               	movwf	___lmul@multiplier
  1809  0319  083D               	movf	get_averageY@Data+1,w
  1810  031A  00A1               	movwf	___lmul@multiplier+1
  1811  031B  3000               	movlw	0
  1812  031C  1BA1               	btfsc	___lmul@multiplier+1,7
  1813  031D  30FF               	movlw	255
  1814  031E  00A2               	movwf	___lmul@multiplier+2
  1815  031F  00A3               	movwf	___lmul@multiplier+3
  1816  0320  3000               	movlw	0
  1817  0321  00A7               	movwf	___lmul@multiplicand+3
  1818  0322  3000               	movlw	0
  1819  0323  00A6               	movwf	___lmul@multiplicand+2
  1820  0324  3000               	movlw	0
  1821  0325  00A5               	movwf	___lmul@multiplicand+1
  1822  0326  305C               	movlw	92
  1823  0327  00A4               	movwf	___lmul@multiplicand
  1824  0328  248D               	fcall	___lmul
  1825  0329  1283               	bcf	3,5	;RP0=0, select bank0
  1826  032A  1303               	bcf	3,6	;RP1=0, select bank0
  1827  032B  0820               	movf	?___lmul,w
  1828  032C  07BE               	addwf	??_get_averageY,f
  1829  032D  0821               	movf	?___lmul+1,w
  1830  032E  1803               	skipnc
  1831  032F  0F21               	incfsz	?___lmul+1,w
  1832  0330  2B32               	goto	u790
  1833  0331  2B33               	goto	u791
  1834  0332                     u790:	
  1835  0332  07BF               	addwf	??_get_averageY+1,f
  1836  0333                     u791:	
  1837  0333  0822               	movf	?___lmul+2,w
  1838  0334  1803               	skipnc
  1839  0335  0F22               	incfsz	?___lmul+2,w
  1840  0336  2B38               	goto	u792
  1841  0337  2B39               	goto	u793
  1842  0338                     u792:	
  1843  0338  07C0               	addwf	??_get_averageY+2,f
  1844  0339                     u793:	
  1845  0339  0823               	movf	?___lmul+3,w
  1846  033A  1803               	skipnc
  1847  033B  0A23               	incf	?___lmul+3,w
  1848  033C  07C1               	addwf	??_get_averageY+3,f
  1849  033D  0841               	movf	??_get_averageY+3,w
  1850  033E  00B4               	movwf	___aldiv@dividend+3
  1851  033F  0840               	movf	??_get_averageY+2,w
  1852  0340  00B3               	movwf	___aldiv@dividend+2
  1853  0341  083F               	movf	??_get_averageY+1,w
  1854  0342  00B2               	movwf	___aldiv@dividend+1
  1855  0343  083E               	movf	??_get_averageY,w
  1856  0344  00B1               	movwf	___aldiv@dividend
  1857  0345  2216               	fcall	___aldiv
  1858  0346  1283               	bcf	3,5	;RP0=0, select bank0
  1859  0347  1303               	bcf	3,6	;RP1=0, select bank0
  1860  0348  082E               	movf	?___aldiv+1,w
  1861  0349  00DD               	movwf	get_averageY@OutPut+1
  1862  034A  082D               	movf	?___aldiv,w
  1863  034B  00DC               	movwf	get_averageY@OutPut
  1864                           
  1865                           ;average_calculations.c: 23: return OutPut;
  1866  034C  085D               	movf	get_averageY@OutPut+1,w
  1867  034D  00BD               	movwf	?_get_averageY+1
  1868  034E  085C               	movf	get_averageY@OutPut,w
  1869  034F  00BC               	movwf	?_get_averageY
  1870  0350  0008               	return
  1871  0351                     __end_of_get_averageY:	
  1872                           
  1873                           	psect	text6
  1874  0351                     __ptext6:	
  1875 ;; *************** function _get_averageX *****************
  1876 ;; Defined at:
  1877 ;;		line 13 in file "average_calculations.c"
  1878 ;; Parameters:    Size  Location     Type
  1879 ;;  Data            2   28[BANK0 ] short 
  1880 ;; Auto vars:     Size  Location     Type
  1881 ;;		None
  1882 ;; Return value:  Size  Location     Type
  1883 ;;                  2   28[BANK0 ] short 
  1884 ;; Registers used:
  1885 ;;		wreg, status,2, status,0, pclath, cstack
  1886 ;; Tracked objects:
  1887 ;;		On entry : 0/0
  1888 ;;		On exit  : 0/0
  1889 ;;		Unchanged: 0/0
  1890 ;; Data sizes:     COMMON   BANK0   BANK1
  1891 ;;      Params:         0       2       0
  1892 ;;      Locals:         0       0       0
  1893 ;;      Temps:          0       4       0
  1894 ;;      Totals:         0       6       0
  1895 ;;Total ram usage:        6 bytes
  1896 ;; Hardware stack levels used:    1
  1897 ;; Hardware stack levels required when called:    4
  1898 ;; This function calls:
  1899 ;;		___aldiv
  1900 ;;		___lmul
  1901 ;; This function is called by:
  1902 ;;		_main
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           
  1907                           ;psect for function _get_averageX
  1908  0351                     _get_averageX:	
  1909                           
  1910                           ;average_calculations.c: 15: static short OutPut = 0;
  1911                           ;average_calculations.c: 16: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  1912                           
  1913                           ;incstack = 0
  1914                           ; Regs used in _get_averageX: [wreg+status,2+status,0+pclath+cstack]
  1915  0351  3000               	movlw	0
  1916  0352  1283               	bcf	3,5	;RP0=0, select bank0
  1917  0353  1303               	bcf	3,6	;RP1=0, select bank0
  1918  0354  00B0               	movwf	___aldiv@divisor+3
  1919  0355  3000               	movlw	0
  1920  0356  00AF               	movwf	___aldiv@divisor+2
  1921  0357  3000               	movlw	0
  1922  0358  00AE               	movwf	___aldiv@divisor+1
  1923  0359  3064               	movlw	100
  1924  035A  00AD               	movwf	___aldiv@divisor
  1925  035B  085E               	movf	get_averageX@OutPut,w
  1926  035C  00BE               	movwf	??_get_averageX
  1927  035D  085F               	movf	get_averageX@OutPut+1,w
  1928  035E  00BF               	movwf	??_get_averageX+1
  1929  035F  3000               	movlw	0
  1930  0360  1BBF               	btfsc	??_get_averageX+1,7
  1931  0361  30FF               	movlw	255
  1932  0362  00C0               	movwf	??_get_averageX+2
  1933  0363  00C1               	movwf	??_get_averageX+3
  1934  0364  3003               	movlw	3
  1935  0365                     u765:	
  1936  0365  1003               	clrc
  1937  0366  0DBE               	rlf	??_get_averageX,f
  1938  0367  0DBF               	rlf	??_get_averageX+1,f
  1939  0368  0DC0               	rlf	??_get_averageX+2,f
  1940  0369  0DC1               	rlf	??_get_averageX+3,f
  1941  036A  3EFF               	addlw	-1
  1942  036B  1D03               	skipz
  1943  036C  2B65               	goto	u765
  1944  036D  083C               	movf	get_averageX@Data,w
  1945  036E  00A0               	movwf	___lmul@multiplier
  1946  036F  083D               	movf	get_averageX@Data+1,w
  1947  0370  00A1               	movwf	___lmul@multiplier+1
  1948  0371  3000               	movlw	0
  1949  0372  1BA1               	btfsc	___lmul@multiplier+1,7
  1950  0373  30FF               	movlw	255
  1951  0374  00A2               	movwf	___lmul@multiplier+2
  1952  0375  00A3               	movwf	___lmul@multiplier+3
  1953  0376  3000               	movlw	0
  1954  0377  00A7               	movwf	___lmul@multiplicand+3
  1955  0378  3000               	movlw	0
  1956  0379  00A6               	movwf	___lmul@multiplicand+2
  1957  037A  3000               	movlw	0
  1958  037B  00A5               	movwf	___lmul@multiplicand+1
  1959  037C  305C               	movlw	92
  1960  037D  00A4               	movwf	___lmul@multiplicand
  1961  037E  248D               	fcall	___lmul
  1962  037F  1283               	bcf	3,5	;RP0=0, select bank0
  1963  0380  1303               	bcf	3,6	;RP1=0, select bank0
  1964  0381  0820               	movf	?___lmul,w
  1965  0382  07BE               	addwf	??_get_averageX,f
  1966  0383  0821               	movf	?___lmul+1,w
  1967  0384  1803               	skipnc
  1968  0385  0F21               	incfsz	?___lmul+1,w
  1969  0386  2B88               	goto	u770
  1970  0387  2B89               	goto	u771
  1971  0388                     u770:	
  1972  0388  07BF               	addwf	??_get_averageX+1,f
  1973  0389                     u771:	
  1974  0389  0822               	movf	?___lmul+2,w
  1975  038A  1803               	skipnc
  1976  038B  0F22               	incfsz	?___lmul+2,w
  1977  038C  2B8E               	goto	u772
  1978  038D  2B8F               	goto	u773
  1979  038E                     u772:	
  1980  038E  07C0               	addwf	??_get_averageX+2,f
  1981  038F                     u773:	
  1982  038F  0823               	movf	?___lmul+3,w
  1983  0390  1803               	skipnc
  1984  0391  0A23               	incf	?___lmul+3,w
  1985  0392  07C1               	addwf	??_get_averageX+3,f
  1986  0393  0841               	movf	??_get_averageX+3,w
  1987  0394  00B4               	movwf	___aldiv@dividend+3
  1988  0395  0840               	movf	??_get_averageX+2,w
  1989  0396  00B3               	movwf	___aldiv@dividend+2
  1990  0397  083F               	movf	??_get_averageX+1,w
  1991  0398  00B2               	movwf	___aldiv@dividend+1
  1992  0399  083E               	movf	??_get_averageX,w
  1993  039A  00B1               	movwf	___aldiv@dividend
  1994  039B  2216               	fcall	___aldiv
  1995  039C  1283               	bcf	3,5	;RP0=0, select bank0
  1996  039D  1303               	bcf	3,6	;RP1=0, select bank0
  1997  039E  082E               	movf	?___aldiv+1,w
  1998  039F  00DF               	movwf	get_averageX@OutPut+1
  1999  03A0  082D               	movf	?___aldiv,w
  2000  03A1  00DE               	movwf	get_averageX@OutPut
  2001                           
  2002                           ;average_calculations.c: 17: return OutPut;
  2003  03A2  085F               	movf	get_averageX@OutPut+1,w
  2004  03A3  00BD               	movwf	?_get_averageX+1
  2005  03A4  085E               	movf	get_averageX@OutPut,w
  2006  03A5  00BC               	movwf	?_get_averageX
  2007  03A6  0008               	return
  2008  03A7                     __end_of_get_averageX:	
  2009                           
  2010                           	psect	text7
  2011  03A7                     __ptext7:	
  2012 ;; *************** function _get_average *****************
  2013 ;; Defined at:
  2014 ;;		line 32 in file "average_calculations.c"
  2015 ;; Parameters:    Size  Location     Type
  2016 ;;  Data            2   28[BANK0 ] short 
  2017 ;; Auto vars:     Size  Location     Type
  2018 ;;		None
  2019 ;; Return value:  Size  Location     Type
  2020 ;;                  2   28[BANK0 ] short 
  2021 ;; Registers used:
  2022 ;;		wreg, status,2, status,0, pclath, cstack
  2023 ;; Tracked objects:
  2024 ;;		On entry : 0/0
  2025 ;;		On exit  : 0/0
  2026 ;;		Unchanged: 0/0
  2027 ;; Data sizes:     COMMON   BANK0   BANK1
  2028 ;;      Params:         0       2       0
  2029 ;;      Locals:         0       0       0
  2030 ;;      Temps:          0       4       0
  2031 ;;      Totals:         0       6       0
  2032 ;;Total ram usage:        6 bytes
  2033 ;; Hardware stack levels used:    1
  2034 ;; Hardware stack levels required when called:    4
  2035 ;; This function calls:
  2036 ;;		___aldiv
  2037 ;;		___lmul
  2038 ;; This function is called by:
  2039 ;;		_main
  2040 ;; This function uses a non-reentrant model
  2041 ;;
  2042                           
  2043                           
  2044                           ;psect for function _get_average
  2045  03A7                     _get_average:	
  2046                           
  2047                           ;average_calculations.c: 34: static short OutPut = 0;
  2048                           ;average_calculations.c: 35: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  2049                           
  2050                           ;incstack = 0
  2051                           ; Regs used in _get_average: [wreg+status,2+status,0+pclath+cstack]
  2052  03A7  3000               	movlw	0
  2053  03A8  1283               	bcf	3,5	;RP0=0, select bank0
  2054  03A9  1303               	bcf	3,6	;RP1=0, select bank0
  2055  03AA  00B0               	movwf	___aldiv@divisor+3
  2056  03AB  3000               	movlw	0
  2057  03AC  00AF               	movwf	___aldiv@divisor+2
  2058  03AD  3000               	movlw	0
  2059  03AE  00AE               	movwf	___aldiv@divisor+1
  2060  03AF  3064               	movlw	100
  2061  03B0  00AD               	movwf	___aldiv@divisor
  2062  03B1  0858               	movf	get_average@OutPut,w
  2063  03B2  00BE               	movwf	??_get_average
  2064  03B3  0859               	movf	get_average@OutPut+1,w
  2065  03B4  00BF               	movwf	??_get_average+1
  2066  03B5  3000               	movlw	0
  2067  03B6  1BBF               	btfsc	??_get_average+1,7
  2068  03B7  30FF               	movlw	255
  2069  03B8  00C0               	movwf	??_get_average+2
  2070  03B9  00C1               	movwf	??_get_average+3
  2071  03BA  3003               	movlw	3
  2072  03BB                     u825:	
  2073  03BB  1003               	clrc
  2074  03BC  0DBE               	rlf	??_get_average,f
  2075  03BD  0DBF               	rlf	??_get_average+1,f
  2076  03BE  0DC0               	rlf	??_get_average+2,f
  2077  03BF  0DC1               	rlf	??_get_average+3,f
  2078  03C0  3EFF               	addlw	-1
  2079  03C1  1D03               	skipz
  2080  03C2  2BBB               	goto	u825
  2081  03C3  083C               	movf	get_average@Data,w
  2082  03C4  00A0               	movwf	___lmul@multiplier
  2083  03C5  083D               	movf	get_average@Data+1,w
  2084  03C6  00A1               	movwf	___lmul@multiplier+1
  2085  03C7  3000               	movlw	0
  2086  03C8  1BA1               	btfsc	___lmul@multiplier+1,7
  2087  03C9  30FF               	movlw	255
  2088  03CA  00A2               	movwf	___lmul@multiplier+2
  2089  03CB  00A3               	movwf	___lmul@multiplier+3
  2090  03CC  3000               	movlw	0
  2091  03CD  00A7               	movwf	___lmul@multiplicand+3
  2092  03CE  3000               	movlw	0
  2093  03CF  00A6               	movwf	___lmul@multiplicand+2
  2094  03D0  3000               	movlw	0
  2095  03D1  00A5               	movwf	___lmul@multiplicand+1
  2096  03D2  305C               	movlw	92
  2097  03D3  00A4               	movwf	___lmul@multiplicand
  2098  03D4  248D               	fcall	___lmul
  2099  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  2100  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  2101  03D7  0820               	movf	?___lmul,w
  2102  03D8  07BE               	addwf	??_get_average,f
  2103  03D9  0821               	movf	?___lmul+1,w
  2104  03DA  1803               	skipnc
  2105  03DB  0F21               	incfsz	?___lmul+1,w
  2106  03DC  2BDE               	goto	u830
  2107  03DD  2BDF               	goto	u831
  2108  03DE                     u830:	
  2109  03DE  07BF               	addwf	??_get_average+1,f
  2110  03DF                     u831:	
  2111  03DF  0822               	movf	?___lmul+2,w
  2112  03E0  1803               	skipnc
  2113  03E1  0F22               	incfsz	?___lmul+2,w
  2114  03E2  2BE4               	goto	u832
  2115  03E3  2BE5               	goto	u833
  2116  03E4                     u832:	
  2117  03E4  07C0               	addwf	??_get_average+2,f
  2118  03E5                     u833:	
  2119  03E5  0823               	movf	?___lmul+3,w
  2120  03E6  1803               	skipnc
  2121  03E7  0A23               	incf	?___lmul+3,w
  2122  03E8  07C1               	addwf	??_get_average+3,f
  2123  03E9  0841               	movf	??_get_average+3,w
  2124  03EA  00B4               	movwf	___aldiv@dividend+3
  2125  03EB  0840               	movf	??_get_average+2,w
  2126  03EC  00B3               	movwf	___aldiv@dividend+2
  2127  03ED  083F               	movf	??_get_average+1,w
  2128  03EE  00B2               	movwf	___aldiv@dividend+1
  2129  03EF  083E               	movf	??_get_average,w
  2130  03F0  00B1               	movwf	___aldiv@dividend
  2131  03F1  2216               	fcall	___aldiv
  2132  03F2  1283               	bcf	3,5	;RP0=0, select bank0
  2133  03F3  1303               	bcf	3,6	;RP1=0, select bank0
  2134  03F4  082E               	movf	?___aldiv+1,w
  2135  03F5  00D9               	movwf	get_average@OutPut+1
  2136  03F6  082D               	movf	?___aldiv,w
  2137  03F7  00D8               	movwf	get_average@OutPut
  2138                           
  2139                           ;average_calculations.c: 36: return OutPut;
  2140  03F8  0859               	movf	get_average@OutPut+1,w
  2141  03F9  00BD               	movwf	?_get_average+1
  2142  03FA  0858               	movf	get_average@OutPut,w
  2143  03FB  00BC               	movwf	?_get_average
  2144  03FC  0008               	return
  2145  03FD                     __end_of_get_average:	
  2146                           
  2147                           	psect	text8
  2148  048D                     __ptext8:	
  2149 ;; *************** function ___lmul *****************
  2150 ;; Defined at:
  2151 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;  multiplier      4    0[BANK0 ] unsigned long 
  2154 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  2155 ;; Auto vars:     Size  Location     Type
  2156 ;;  product         4    9[BANK0 ] unsigned long 
  2157 ;; Return value:  Size  Location     Type
  2158 ;;                  4    0[BANK0 ] unsigned long 
  2159 ;; Registers used:
  2160 ;;		wreg, status,2, status,0
  2161 ;; Tracked objects:
  2162 ;;		On entry : 0/0
  2163 ;;		On exit  : 0/0
  2164 ;;		Unchanged: 0/0
  2165 ;; Data sizes:     COMMON   BANK0   BANK1
  2166 ;;      Params:         0       8       0
  2167 ;;      Locals:         0       4       0
  2168 ;;      Temps:          0       1       0
  2169 ;;      Totals:         0      13       0
  2170 ;;Total ram usage:       13 bytes
  2171 ;; Hardware stack levels used:    1
  2172 ;; Hardware stack levels required when called:    3
  2173 ;; This function calls:
  2174 ;;		Nothing
  2175 ;; This function is called by:
  2176 ;;		_get_averageX
  2177 ;;		_get_averageY
  2178 ;;		_get_averageZ
  2179 ;;		_get_average
  2180 ;; This function uses a non-reentrant model
  2181 ;;
  2182                           
  2183                           
  2184                           ;psect for function ___lmul
  2185  048D                     ___lmul:	
  2186                           
  2187                           ;incstack = 0
  2188                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2189  048D  3000               	movlw	0
  2190  048E  1283               	bcf	3,5	;RP0=0, select bank0
  2191  048F  1303               	bcf	3,6	;RP1=0, select bank0
  2192  0490  00AC               	movwf	___lmul@product+3
  2193  0491  3000               	movlw	0
  2194  0492  00AB               	movwf	___lmul@product+2
  2195  0493  3000               	movlw	0
  2196  0494  00AA               	movwf	___lmul@product+1
  2197  0495  3000               	movlw	0
  2198  0496  00A9               	movwf	___lmul@product
  2199  0497                     l1142:	
  2200  0497  1C20               	btfss	___lmul@multiplier,0
  2201  0498  2CAD               	goto	l1146
  2202  0499  0824               	movf	___lmul@multiplicand,w
  2203  049A  07A9               	addwf	___lmul@product,f
  2204  049B  0825               	movf	___lmul@multiplicand+1,w
  2205  049C  1103               	clrz
  2206  049D  1803               	skipnc
  2207  049E  3E01               	addlw	1
  2208  049F  1D03               	btfss	3,2
  2209  04A0  07AA               	addwf	___lmul@product+1,f
  2210  04A1  0826               	movf	___lmul@multiplicand+2,w
  2211  04A2  1103               	clrz
  2212  04A3  1803               	skipnc
  2213  04A4  3E01               	addlw	1
  2214  04A5  1D03               	btfss	3,2
  2215  04A6  07AB               	addwf	___lmul@product+2,f
  2216  04A7  0827               	movf	___lmul@multiplicand+3,w
  2217  04A8  1103               	clrz
  2218  04A9  1803               	skipnc
  2219  04AA  3E01               	addlw	1
  2220  04AB  1D03               	btfss	3,2
  2221  04AC  07AC               	addwf	___lmul@product+3,f
  2222  04AD                     l1146:	
  2223  04AD  3001               	movlw	1
  2224  04AE  00A8               	movwf	??___lmul
  2225  04AF                     u625:	
  2226  04AF  1003               	clrc
  2227  04B0  0DA4               	rlf	___lmul@multiplicand,f
  2228  04B1  0DA5               	rlf	___lmul@multiplicand+1,f
  2229  04B2  0DA6               	rlf	___lmul@multiplicand+2,f
  2230  04B3  0DA7               	rlf	___lmul@multiplicand+3,f
  2231  04B4  0BA8               	decfsz	??___lmul,f
  2232  04B5  2CAF               	goto	u625
  2233  04B6  3001               	movlw	1
  2234  04B7                     u635:	
  2235  04B7  1003               	clrc
  2236  04B8  0CA3               	rrf	___lmul@multiplier+3,f
  2237  04B9  0CA2               	rrf	___lmul@multiplier+2,f
  2238  04BA  0CA1               	rrf	___lmul@multiplier+1,f
  2239  04BB  0CA0               	rrf	___lmul@multiplier,f
  2240  04BC  3EFF               	addlw	-1
  2241  04BD  1D03               	skipz
  2242  04BE  2CB7               	goto	u635
  2243  04BF  0823               	movf	___lmul@multiplier+3,w
  2244  04C0  0422               	iorwf	___lmul@multiplier+2,w
  2245  04C1  0421               	iorwf	___lmul@multiplier+1,w
  2246  04C2  0420               	iorwf	___lmul@multiplier,w
  2247  04C3  1D03               	skipz
  2248  04C4  2C97               	goto	l1142
  2249  04C5  082C               	movf	___lmul@product+3,w
  2250  04C6  00A3               	movwf	?___lmul+3
  2251  04C7  082B               	movf	___lmul@product+2,w
  2252  04C8  00A2               	movwf	?___lmul+2
  2253  04C9  082A               	movf	___lmul@product+1,w
  2254  04CA  00A1               	movwf	?___lmul+1
  2255  04CB  0829               	movf	___lmul@product,w
  2256  04CC  00A0               	movwf	?___lmul
  2257  04CD  0008               	return
  2258  04CE                     __end_of___lmul:	
  2259                           
  2260                           	psect	text9
  2261  0216                     __ptext9:	
  2262 ;; *************** function ___aldiv *****************
  2263 ;; Defined at:
  2264 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  2265 ;; Parameters:    Size  Location     Type
  2266 ;;  divisor         4   13[BANK0 ] long 
  2267 ;;  dividend        4   17[BANK0 ] long 
  2268 ;; Auto vars:     Size  Location     Type
  2269 ;;  quotient        4   24[BANK0 ] long 
  2270 ;;  sign            1   23[BANK0 ] unsigned char 
  2271 ;;  counter         1   22[BANK0 ] unsigned char 
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  4   13[BANK0 ] long 
  2274 ;; Registers used:
  2275 ;;		wreg, status,2, status,0
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMMON   BANK0   BANK1
  2281 ;;      Params:         0       8       0
  2282 ;;      Locals:         0       6       0
  2283 ;;      Temps:          0       1       0
  2284 ;;      Totals:         0      15       0
  2285 ;;Total ram usage:       15 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    3
  2288 ;; This function calls:
  2289 ;;		Nothing
  2290 ;; This function is called by:
  2291 ;;		_get_averageX
  2292 ;;		_get_averageY
  2293 ;;		_get_averageZ
  2294 ;;		_get_average
  2295 ;; This function uses a non-reentrant model
  2296 ;;
  2297                           
  2298                           
  2299                           ;psect for function ___aldiv
  2300  0216                     ___aldiv:	
  2301                           
  2302                           ;incstack = 0
  2303                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2304  0216  1283               	bcf	3,5	;RP0=0, select bank0
  2305  0217  1303               	bcf	3,6	;RP1=0, select bank0
  2306  0218  01B7               	clrf	___aldiv@sign
  2307  0219  1FB0               	btfss	___aldiv@divisor+3,7
  2308  021A  2A28               	goto	l407
  2309  021B  09AD               	comf	___aldiv@divisor,f
  2310  021C  09AE               	comf	___aldiv@divisor+1,f
  2311  021D  09AF               	comf	___aldiv@divisor+2,f
  2312  021E  09B0               	comf	___aldiv@divisor+3,f
  2313  021F  0AAD               	incf	___aldiv@divisor,f
  2314  0220  1903               	skipnz
  2315  0221  0AAE               	incf	___aldiv@divisor+1,f
  2316  0222  1903               	skipnz
  2317  0223  0AAF               	incf	___aldiv@divisor+2,f
  2318  0224  1903               	skipnz
  2319  0225  0AB0               	incf	___aldiv@divisor+3,f
  2320  0226  01B7               	clrf	___aldiv@sign
  2321  0227  0AB7               	incf	___aldiv@sign,f
  2322  0228                     l407:	
  2323  0228  1FB4               	btfss	___aldiv@dividend+3,7
  2324  0229  2A39               	goto	l1164
  2325  022A  09B1               	comf	___aldiv@dividend,f
  2326  022B  09B2               	comf	___aldiv@dividend+1,f
  2327  022C  09B3               	comf	___aldiv@dividend+2,f
  2328  022D  09B4               	comf	___aldiv@dividend+3,f
  2329  022E  0AB1               	incf	___aldiv@dividend,f
  2330  022F  1903               	skipnz
  2331  0230  0AB2               	incf	___aldiv@dividend+1,f
  2332  0231  1903               	skipnz
  2333  0232  0AB3               	incf	___aldiv@dividend+2,f
  2334  0233  1903               	skipnz
  2335  0234  0AB4               	incf	___aldiv@dividend+3,f
  2336  0235  3001               	movlw	1
  2337  0236  00B5               	movwf	??___aldiv
  2338  0237  0835               	movf	??___aldiv,w
  2339  0238  06B7               	xorwf	___aldiv@sign,f
  2340  0239                     l1164:	
  2341  0239  3000               	movlw	0
  2342  023A  00BB               	movwf	___aldiv@quotient+3
  2343  023B  3000               	movlw	0
  2344  023C  00BA               	movwf	___aldiv@quotient+2
  2345  023D  3000               	movlw	0
  2346  023E  00B9               	movwf	___aldiv@quotient+1
  2347  023F  3000               	movlw	0
  2348  0240  00B8               	movwf	___aldiv@quotient
  2349  0241  0830               	movf	___aldiv@divisor+3,w
  2350  0242  042F               	iorwf	___aldiv@divisor+2,w
  2351  0243  042E               	iorwf	___aldiv@divisor+1,w
  2352  0244  042D               	iorwf	___aldiv@divisor,w
  2353  0245  1903               	skipnz
  2354  0246  2A8E               	goto	l1186
  2355  0247  01B6               	clrf	___aldiv@counter
  2356  0248  0AB6               	incf	___aldiv@counter,f
  2357  0249                     l1172:	
  2358  0249  1BB0               	btfsc	___aldiv@divisor+3,7
  2359  024A  2A59               	goto	l1174
  2360  024B  3001               	movlw	1
  2361  024C  00B5               	movwf	??___aldiv
  2362  024D                     u685:	
  2363  024D  1003               	clrc
  2364  024E  0DAD               	rlf	___aldiv@divisor,f
  2365  024F  0DAE               	rlf	___aldiv@divisor+1,f
  2366  0250  0DAF               	rlf	___aldiv@divisor+2,f
  2367  0251  0DB0               	rlf	___aldiv@divisor+3,f
  2368  0252  0BB5               	decfsz	??___aldiv,f
  2369  0253  2A4D               	goto	u685
  2370  0254  3001               	movlw	1
  2371  0255  00B5               	movwf	??___aldiv
  2372  0256  0835               	movf	??___aldiv,w
  2373  0257  07B6               	addwf	___aldiv@counter,f
  2374  0258  2A49               	goto	l1172
  2375  0259                     l1174:	
  2376  0259  3001               	movlw	1
  2377  025A  00B5               	movwf	??___aldiv
  2378  025B                     u705:	
  2379  025B  1003               	clrc
  2380  025C  0DB8               	rlf	___aldiv@quotient,f
  2381  025D  0DB9               	rlf	___aldiv@quotient+1,f
  2382  025E  0DBA               	rlf	___aldiv@quotient+2,f
  2383  025F  0DBB               	rlf	___aldiv@quotient+3,f
  2384  0260  0BB5               	decfsz	??___aldiv,f
  2385  0261  2A5B               	goto	u705
  2386  0262  0830               	movf	___aldiv@divisor+3,w
  2387  0263  0234               	subwf	___aldiv@dividend+3,w
  2388  0264  1D03               	skipz
  2389  0265  2A70               	goto	u715
  2390  0266  082F               	movf	___aldiv@divisor+2,w
  2391  0267  0233               	subwf	___aldiv@dividend+2,w
  2392  0268  1D03               	skipz
  2393  0269  2A70               	goto	u715
  2394  026A  082E               	movf	___aldiv@divisor+1,w
  2395  026B  0232               	subwf	___aldiv@dividend+1,w
  2396  026C  1D03               	skipz
  2397  026D  2A70               	goto	u715
  2398  026E  082D               	movf	___aldiv@divisor,w
  2399  026F  0231               	subwf	___aldiv@dividend,w
  2400  0270                     u715:	
  2401  0270  1C03               	skipc
  2402  0271  2A81               	goto	l1182
  2403  0272  082D               	movf	___aldiv@divisor,w
  2404  0273  02B1               	subwf	___aldiv@dividend,f
  2405  0274  082E               	movf	___aldiv@divisor+1,w
  2406  0275  1C03               	skipc
  2407  0276  0F2E               	incfsz	___aldiv@divisor+1,w
  2408  0277  02B2               	subwf	___aldiv@dividend+1,f
  2409  0278  082F               	movf	___aldiv@divisor+2,w
  2410  0279  1C03               	skipc
  2411  027A  0F2F               	incfsz	___aldiv@divisor+2,w
  2412  027B  02B3               	subwf	___aldiv@dividend+2,f
  2413  027C  0830               	movf	___aldiv@divisor+3,w
  2414  027D  1C03               	skipc
  2415  027E  0F30               	incfsz	___aldiv@divisor+3,w
  2416  027F  02B4               	subwf	___aldiv@dividend+3,f
  2417  0280  1438               	bsf	___aldiv@quotient,0
  2418  0281                     l1182:	
  2419  0281  3001               	movlw	1
  2420  0282                     u725:	
  2421  0282  1003               	clrc
  2422  0283  0CB0               	rrf	___aldiv@divisor+3,f
  2423  0284  0CAF               	rrf	___aldiv@divisor+2,f
  2424  0285  0CAE               	rrf	___aldiv@divisor+1,f
  2425  0286  0CAD               	rrf	___aldiv@divisor,f
  2426  0287  3EFF               	addlw	-1
  2427  0288  1D03               	skipz
  2428  0289  2A82               	goto	u725
  2429  028A  3001               	movlw	1
  2430  028B  02B6               	subwf	___aldiv@counter,f
  2431  028C  1D03               	btfss	3,2
  2432  028D  2A59               	goto	l1174
  2433  028E                     l1186:	
  2434  028E  0837               	movf	___aldiv@sign,w
  2435  028F  1903               	btfsc	3,2
  2436  0290  2A9C               	goto	l1190
  2437  0291  09B8               	comf	___aldiv@quotient,f
  2438  0292  09B9               	comf	___aldiv@quotient+1,f
  2439  0293  09BA               	comf	___aldiv@quotient+2,f
  2440  0294  09BB               	comf	___aldiv@quotient+3,f
  2441  0295  0AB8               	incf	___aldiv@quotient,f
  2442  0296  1903               	skipnz
  2443  0297  0AB9               	incf	___aldiv@quotient+1,f
  2444  0298  1903               	skipnz
  2445  0299  0ABA               	incf	___aldiv@quotient+2,f
  2446  029A  1903               	skipnz
  2447  029B  0ABB               	incf	___aldiv@quotient+3,f
  2448  029C                     l1190:	
  2449  029C  083B               	movf	___aldiv@quotient+3,w
  2450  029D  00B0               	movwf	?___aldiv+3
  2451  029E  083A               	movf	___aldiv@quotient+2,w
  2452  029F  00AF               	movwf	?___aldiv+2
  2453  02A0  0839               	movf	___aldiv@quotient+1,w
  2454  02A1  00AE               	movwf	?___aldiv+1
  2455  02A2  0838               	movf	___aldiv@quotient,w
  2456  02A3  00AD               	movwf	?___aldiv
  2457  02A4  0008               	return
  2458  02A5                     __end_of___aldiv:	
  2459                           
  2460                           	psect	text10
  2461  04CE                     __ptext10:	
  2462 ;; *************** function ___lwdiv *****************
  2463 ;; Defined at:
  2464 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2465 ;; Parameters:    Size  Location     Type
  2466 ;;  divisor         2    0[BANK0 ] unsigned int 
  2467 ;;  dividend        2    2[BANK0 ] unsigned int 
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;  quotient        2    5[BANK0 ] unsigned int 
  2470 ;;  counter         1    7[BANK0 ] unsigned char 
  2471 ;; Return value:  Size  Location     Type
  2472 ;;                  2    0[BANK0 ] unsigned int 
  2473 ;; Registers used:
  2474 ;;		wreg, status,2, status,0
  2475 ;; Tracked objects:
  2476 ;;		On entry : 0/0
  2477 ;;		On exit  : 0/0
  2478 ;;		Unchanged: 0/0
  2479 ;; Data sizes:     COMMON   BANK0   BANK1
  2480 ;;      Params:         0       4       0
  2481 ;;      Locals:         0       3       0
  2482 ;;      Temps:          0       1       0
  2483 ;;      Totals:         0       8       0
  2484 ;;Total ram usage:        8 bytes
  2485 ;; Hardware stack levels used:    1
  2486 ;; Hardware stack levels required when called:    3
  2487 ;; This function calls:
  2488 ;;		Nothing
  2489 ;; This function is called by:
  2490 ;;		_main
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           
  2495                           ;psect for function ___lwdiv
  2496  04CE                     ___lwdiv:	
  2497                           
  2498                           ;incstack = 0
  2499                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2500  04CE  1283               	bcf	3,5	;RP0=0, select bank0
  2501  04CF  1303               	bcf	3,6	;RP1=0, select bank0
  2502  04D0  01A5               	clrf	___lwdiv@quotient
  2503  04D1  01A6               	clrf	___lwdiv@quotient+1
  2504  04D2  0820               	movf	___lwdiv@divisor,w
  2505  04D3  0421               	iorwf	___lwdiv@divisor+1,w
  2506  04D4  1903               	btfsc	3,2
  2507  04D5  2D07               	goto	l1354
  2508  04D6  01A7               	clrf	___lwdiv@counter
  2509  04D7  0AA7               	incf	___lwdiv@counter,f
  2510  04D8                     l1342:	
  2511  04D8  1BA1               	btfsc	___lwdiv@divisor+1,7
  2512  04D9  2CE6               	goto	l1344
  2513  04DA  3001               	movlw	1
  2514  04DB                     u905:	
  2515  04DB  1003               	clrc
  2516  04DC  0DA0               	rlf	___lwdiv@divisor,f
  2517  04DD  0DA1               	rlf	___lwdiv@divisor+1,f
  2518  04DE  3EFF               	addlw	-1
  2519  04DF  1D03               	skipz
  2520  04E0  2CDB               	goto	u905
  2521  04E1  3001               	movlw	1
  2522  04E2  00A4               	movwf	??___lwdiv
  2523  04E3  0824               	movf	??___lwdiv,w
  2524  04E4  07A7               	addwf	___lwdiv@counter,f
  2525  04E5  2CD8               	goto	l1342
  2526  04E6                     l1344:	
  2527  04E6  3001               	movlw	1
  2528  04E7                     u925:	
  2529  04E7  1003               	clrc
  2530  04E8  0DA5               	rlf	___lwdiv@quotient,f
  2531  04E9  0DA6               	rlf	___lwdiv@quotient+1,f
  2532  04EA  3EFF               	addlw	-1
  2533  04EB  1D03               	skipz
  2534  04EC  2CE7               	goto	u925
  2535  04ED  0821               	movf	___lwdiv@divisor+1,w
  2536  04EE  0223               	subwf	___lwdiv@dividend+1,w
  2537  04EF  1D03               	skipz
  2538  04F0  2CF3               	goto	u935
  2539  04F1  0820               	movf	___lwdiv@divisor,w
  2540  04F2  0222               	subwf	___lwdiv@dividend,w
  2541  04F3                     u935:	
  2542  04F3  1C03               	skipc
  2543  04F4  2CFC               	goto	l1350
  2544  04F5  0820               	movf	___lwdiv@divisor,w
  2545  04F6  02A2               	subwf	___lwdiv@dividend,f
  2546  04F7  0821               	movf	___lwdiv@divisor+1,w
  2547  04F8  1C03               	skipc
  2548  04F9  03A3               	decf	___lwdiv@dividend+1,f
  2549  04FA  02A3               	subwf	___lwdiv@dividend+1,f
  2550  04FB  1425               	bsf	___lwdiv@quotient,0
  2551  04FC                     l1350:	
  2552  04FC  3001               	movlw	1
  2553  04FD                     u945:	
  2554  04FD  1003               	clrc
  2555  04FE  0CA1               	rrf	___lwdiv@divisor+1,f
  2556  04FF  0CA0               	rrf	___lwdiv@divisor,f
  2557  0500  3EFF               	addlw	-1
  2558  0501  1D03               	skipz
  2559  0502  2CFD               	goto	u945
  2560  0503  3001               	movlw	1
  2561  0504  02A7               	subwf	___lwdiv@counter,f
  2562  0505  1D03               	btfss	3,2
  2563  0506  2CE6               	goto	l1344
  2564  0507                     l1354:	
  2565  0507  0826               	movf	___lwdiv@quotient+1,w
  2566  0508  00A1               	movwf	?___lwdiv+1
  2567  0509  0825               	movf	___lwdiv@quotient,w
  2568  050A  00A0               	movwf	?___lwdiv
  2569  050B  0008               	return
  2570  050C                     __end_of___lwdiv:	
  2571                           
  2572                           	psect	text11
  2573  058A                     __ptext11:	
  2574 ;; *************** function _UART_vidInit *****************
  2575 ;; Defined at:
  2576 ;;		line 18 in file "UART_m.c"
  2577 ;; Parameters:    Size  Location     Type
  2578 ;;		None
  2579 ;; Auto vars:     Size  Location     Type
  2580 ;;		None
  2581 ;; Return value:  Size  Location     Type
  2582 ;;                  1    wreg      void 
  2583 ;; Registers used:
  2584 ;;		wreg, status,2, status,0, pclath, cstack
  2585 ;; Tracked objects:
  2586 ;;		On entry : 0/0
  2587 ;;		On exit  : 0/0
  2588 ;;		Unchanged: 0/0
  2589 ;; Data sizes:     COMMON   BANK0   BANK1
  2590 ;;      Params:         0       0       0
  2591 ;;      Locals:         0       0       0
  2592 ;;      Temps:          0       1       0
  2593 ;;      Totals:         0       1       0
  2594 ;;Total ram usage:        1 bytes
  2595 ;; Hardware stack levels used:    1
  2596 ;; Hardware stack levels required when called:    4
  2597 ;; This function calls:
  2598 ;;		_UART_u8GetNodeID
  2599 ;; This function is called by:
  2600 ;;		_main
  2601 ;; This function uses a non-reentrant model
  2602 ;;
  2603                           
  2604                           
  2605                           ;psect for function _UART_vidInit
  2606  058A                     _UART_vidInit:	
  2607                           
  2608                           ;UART_m.c: 20: BRGH = 0;
  2609                           
  2610                           ;incstack = 0
  2611                           ; Regs used in _UART_vidInit: [wreg+status,2+status,0+pclath+cstack]
  2612  058A  1683               	bsf	3,5	;RP0=1, select bank1
  2613  058B  1303               	bcf	3,6	;RP1=0, select bank1
  2614  058C  1118               	bcf	24,2	;volatile
  2615                           
  2616                           ;UART_m.c: 21: SPBRG = (unsigned char)((((unsigned long)20000000 / 9600)/64) - 1);
  2617  058D  301F               	movlw	31
  2618  058E  0099               	movwf	25	;volatile
  2619                           
  2620                           ;UART_m.c: 22: SYNC = 0;
  2621  058F  1218               	bcf	24,4	;volatile
  2622                           
  2623                           ;UART_m.c: 23: SPEN = 1;
  2624  0590  1283               	bcf	3,5	;RP0=0, select bank0
  2625  0591  1303               	bcf	3,6	;RP1=0, select bank0
  2626  0592  1798               	bsf	24,7	;volatile
  2627                           
  2628                           ;UART_m.c: 24: TRISC6 = 1;
  2629  0593  1683               	bsf	3,5	;RP0=1, select bank1
  2630  0594  1303               	bcf	3,6	;RP1=0, select bank1
  2631  0595  1707               	bsf	7,6	;volatile
  2632                           
  2633                           ;UART_m.c: 25: TRISC7 = 1;
  2634  0596  1787               	bsf	7,7	;volatile
  2635                           
  2636                           ;UART_m.c: 26: TXEN = 1;
  2637  0597  1698               	bsf	24,5	;volatile
  2638                           
  2639                           ;UART_m.c: 27: RCIE = 1;
  2640  0598  168C               	bsf	12,5	;volatile
  2641                           
  2642                           ;UART_m.c: 28: PEIE = 1;
  2643  0599  170B               	bsf	11,6	;volatile
  2644                           
  2645                           ;UART_m.c: 29: GIE = 1;
  2646  059A  178B               	bsf	11,7	;volatile
  2647                           
  2648                           ;UART_m.c: 30: CREN = 1;
  2649  059B  1283               	bcf	3,5	;RP0=0, select bank0
  2650  059C  1303               	bcf	3,6	;RP1=0, select bank0
  2651  059D  1618               	bsf	24,4	;volatile
  2652                           
  2653                           ;UART_m.c: 32: ECU_ID = UART_u8GetNodeID();
  2654  059E  260F               	fcall	_UART_u8GetNodeID
  2655  059F  1283               	bcf	3,5	;RP0=0, select bank0
  2656  05A0  1303               	bcf	3,6	;RP1=0, select bank0
  2657  05A1  00A0               	movwf	??_UART_vidInit
  2658  05A2  0820               	movf	??_UART_vidInit,w
  2659  05A3  00E9               	movwf	_ECU_ID
  2660  05A4  0008               	return
  2661  05A5                     __end_of_UART_vidInit:	
  2662                           
  2663                           	psect	text12
  2664  060F                     __ptext12:	
  2665 ;; *************** function _UART_u8GetNodeID *****************
  2666 ;; Defined at:
  2667 ;;		line 76 in file "UART_m.c"
  2668 ;; Parameters:    Size  Location     Type
  2669 ;;		None
  2670 ;; Auto vars:     Size  Location     Type
  2671 ;;		None
  2672 ;; Return value:  Size  Location     Type
  2673 ;;                  1    wreg      unsigned char 
  2674 ;; Registers used:
  2675 ;;		wreg, status,2, status,0
  2676 ;; Tracked objects:
  2677 ;;		On entry : 0/0
  2678 ;;		On exit  : 0/0
  2679 ;;		Unchanged: 0/0
  2680 ;; Data sizes:     COMMON   BANK0   BANK1
  2681 ;;      Params:         0       0       0
  2682 ;;      Locals:         0       0       0
  2683 ;;      Temps:          0       0       0
  2684 ;;      Totals:         0       0       0
  2685 ;;Total ram usage:        0 bytes
  2686 ;; Hardware stack levels used:    1
  2687 ;; Hardware stack levels required when called:    3
  2688 ;; This function calls:
  2689 ;;		Nothing
  2690 ;; This function is called by:
  2691 ;;		_UART_vidInit
  2692 ;; This function uses a non-reentrant model
  2693 ;;
  2694                           
  2695                           
  2696                           ;psect for function _UART_u8GetNodeID
  2697  060F                     _UART_u8GetNodeID:	
  2698                           
  2699                           ;UART_m.c: 78: return Data_Buffer.ID = 0x35;
  2700                           
  2701                           ;incstack = 0
  2702                           ; Regs used in _UART_u8GetNodeID: [wreg+status,2+status,0]
  2703  060F  1683               	bsf	3,5	;RP0=1, select bank1
  2704  0610  1303               	bcf	3,6	;RP1=0, select bank1
  2705  0611  0820               	movf	_Data_Buffer^(0+128),w
  2706  0612  3980               	andlw	-128
  2707  0613  3835               	iorlw	53
  2708  0614  00A0               	movwf	_Data_Buffer^(0+128)
  2709  0615  0820               	movf	_Data_Buffer^(0+128),w
  2710  0616  397F               	andlw	127
  2711  0617  0008               	return
  2712  0618                     __end_of_UART_u8GetNodeID:	
  2713                           
  2714                           	psect	text13
  2715  05BB                     __ptext13:	
  2716 ;; *************** function _I2CInit *****************
  2717 ;; Defined at:
  2718 ;;		line 23 in file "ADXL_m.c"
  2719 ;; Parameters:    Size  Location     Type
  2720 ;;		None
  2721 ;; Auto vars:     Size  Location     Type
  2722 ;;		None
  2723 ;; Return value:  Size  Location     Type
  2724 ;;                  1    wreg      void 
  2725 ;; Registers used:
  2726 ;;		wreg, status,2
  2727 ;; Tracked objects:
  2728 ;;		On entry : 0/0
  2729 ;;		On exit  : 0/0
  2730 ;;		Unchanged: 0/0
  2731 ;; Data sizes:     COMMON   BANK0   BANK1
  2732 ;;      Params:         0       0       0
  2733 ;;      Locals:         0       0       0
  2734 ;;      Temps:          0       0       0
  2735 ;;      Totals:         0       0       0
  2736 ;;Total ram usage:        0 bytes
  2737 ;; Hardware stack levels used:    1
  2738 ;; Hardware stack levels required when called:    3
  2739 ;; This function calls:
  2740 ;;		Nothing
  2741 ;; This function is called by:
  2742 ;;		_main
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           
  2747                           ;psect for function _I2CInit
  2748  05BB                     _I2CInit:	
  2749                           
  2750                           ;ADXL_m.c: 25: TRISCbits.TRISC3 = 1;
  2751                           
  2752                           ;incstack = 0
  2753                           ; Regs used in _I2CInit: [wreg+status,2]
  2754  05BB  1683               	bsf	3,5	;RP0=1, select bank1
  2755  05BC  1303               	bcf	3,6	;RP1=0, select bank1
  2756  05BD  1587               	bsf	7,3	;volatile
  2757                           
  2758                           ;ADXL_m.c: 26: TRISCbits.TRISC4 = 1;
  2759  05BE  1607               	bsf	7,4	;volatile
  2760                           
  2761                           ;ADXL_m.c: 27: SSPSTAT |= 0x80;
  2762  05BF  1794               	bsf	20,7	;volatile
  2763                           
  2764                           ;ADXL_m.c: 28: SSPCON = 0x28;
  2765  05C0  3028               	movlw	40
  2766  05C1  1283               	bcf	3,5	;RP0=0, select bank0
  2767  05C2  1303               	bcf	3,6	;RP1=0, select bank0
  2768  05C3  0094               	movwf	20	;volatile
  2769                           
  2770                           ;ADXL_m.c: 30: SSPCON2 = 0x00;
  2771  05C4  1683               	bsf	3,5	;RP0=1, select bank1
  2772  05C5  1303               	bcf	3,6	;RP1=0, select bank1
  2773  05C6  0191               	clrf	17	;volatile
  2774                           
  2775                           ;ADXL_m.c: 31: SSPADD = 49;
  2776  05C7  3031               	movlw	49
  2777  05C8  0093               	movwf	19	;volatile
  2778                           
  2779                           ;ADXL_m.c: 32: PIR1bits.SSPIF = 0;
  2780  05C9  1283               	bcf	3,5	;RP0=0, select bank0
  2781  05CA  1303               	bcf	3,6	;RP1=0, select bank0
  2782  05CB  118C               	bcf	12,3	;volatile
  2783                           
  2784                           ;ADXL_m.c: 33: PIR2bits.BCLIF = 0;
  2785  05CC  118D               	bcf	13,3	;volatile
  2786  05CD  0008               	return
  2787  05CE                     __end_of_I2CInit:	
  2788                           
  2789                           	psect	text14
  2790  0629                     __ptext14:	
  2791 ;; *************** function _I2CAck *****************
  2792 ;; Defined at:
  2793 ;;		line 89 in file "ADXL_m.c"
  2794 ;; Parameters:    Size  Location     Type
  2795 ;;		None
  2796 ;; Auto vars:     Size  Location     Type
  2797 ;;		None
  2798 ;; Return value:  Size  Location     Type
  2799 ;;                  1    wreg      void 
  2800 ;; Registers used:
  2801 ;;		None
  2802 ;; Tracked objects:
  2803 ;;		On entry : 0/0
  2804 ;;		On exit  : 0/0
  2805 ;;		Unchanged: 0/0
  2806 ;; Data sizes:     COMMON   BANK0   BANK1
  2807 ;;      Params:         0       0       0
  2808 ;;      Locals:         0       0       0
  2809 ;;      Temps:          0       0       0
  2810 ;;      Totals:         0       0       0
  2811 ;;Total ram usage:        0 bytes
  2812 ;; Hardware stack levels used:    1
  2813 ;; Hardware stack levels required when called:    3
  2814 ;; This function calls:
  2815 ;;		Nothing
  2816 ;; This function is called by:
  2817 ;;		_main
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function _I2CAck
  2823  0629                     _I2CAck:	
  2824                           
  2825                           ;ADXL_m.c: 91: ACKDT = 0;
  2826                           
  2827                           ;incstack = 0
  2828                           ; Regs used in _I2CAck: []
  2829  0629  1683               	bsf	3,5	;RP0=1, select bank1
  2830  062A  1303               	bcf	3,6	;RP1=0, select bank1
  2831  062B  1291               	bcf	17,5	;volatile
  2832                           
  2833                           ;ADXL_m.c: 92: ACKEN = 1;
  2834  062C  1611               	bsf	17,4	;volatile
  2835  062D                     l205:	
  2836                           ;ADXL_m.c: 93: while(ACKEN);
  2837                           
  2838  062D  1E11               	btfss	17,4	;volatile
  2839  062E  0008               	return
  2840  062F  2E2D               	goto	l205
  2841  0630                     __end_of_I2CAck:	
  2842                           
  2843                           	psect	text15
  2844  05A5                     __ptext15:	
  2845 ;; *************** function _E_Read *****************
  2846 ;; Defined at:
  2847 ;;		line 171 in file "ADXL_m.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  addr            2    2[BANK0 ] int 
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;  ch              1    5[BANK0 ] unsigned char 
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      unsigned char 
  2854 ;; Registers used:
  2855 ;;		wreg, status,2, status,0, pclath, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMMON   BANK0   BANK1
  2861 ;;      Params:         0       2       0
  2862 ;;      Locals:         0       1       0
  2863 ;;      Temps:          0       1       0
  2864 ;;      Totals:         0       4       0
  2865 ;;Total ram usage:        4 bytes
  2866 ;; Hardware stack levels used:    1
  2867 ;; Hardware stack levels required when called:    5
  2868 ;; This function calls:
  2869 ;;		_I2CNak
  2870 ;;		_I2CRead
  2871 ;;		_I2CRestart
  2872 ;;		_I2CSend
  2873 ;;		_I2CStart
  2874 ;;		_I2CStop
  2875 ;; This function is called by:
  2876 ;;		_main
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           
  2881                           ;psect for function _E_Read
  2882  05A5                     _E_Read:	
  2883                           
  2884                           ;ADXL_m.c: 173: unsigned char ch;
  2885                           ;ADXL_m.c: 175: I2CStart();
  2886                           
  2887                           ;incstack = 0
  2888                           ; Regs used in _E_Read: [wreg+status,2+status,0+pclath+cstack]
  2889  05A5  263D               	fcall	_I2CStart
  2890                           
  2891                           ;ADXL_m.c: 177: I2CSend(0xA6);
  2892  05A6  30A6               	movlw	166
  2893  05A7  2604               	fcall	_I2CSend
  2894                           
  2895                           ;ADXL_m.c: 179: I2CSend(addr);
  2896  05A8  1283               	bcf	3,5	;RP0=0, select bank0
  2897  05A9  1303               	bcf	3,6	;RP1=0, select bank0
  2898  05AA  0822               	movf	E_Read@addr,w
  2899  05AB  2604               	fcall	_I2CSend
  2900                           
  2901                           ;ADXL_m.c: 181: I2CRestart();
  2902  05AC  2643               	fcall	_I2CRestart
  2903                           
  2904                           ;ADXL_m.c: 183: I2CSend(0xA7);
  2905  05AD  30A7               	movlw	167
  2906  05AE  2604               	fcall	_I2CSend
  2907                           
  2908                           ;ADXL_m.c: 185: ch = I2CRead();
  2909  05AF  25CE               	fcall	_I2CRead
  2910  05B0  1283               	bcf	3,5	;RP0=0, select bank0
  2911  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  2912  05B2  00A4               	movwf	??_E_Read
  2913  05B3  0824               	movf	??_E_Read,w
  2914  05B4  00A5               	movwf	E_Read@ch
  2915                           
  2916                           ;ADXL_m.c: 186: I2CNak();
  2917  05B5  2630               	fcall	_I2CNak
  2918                           
  2919                           ;ADXL_m.c: 187: I2CStop();
  2920  05B6  2637               	fcall	_I2CStop
  2921                           
  2922                           ;ADXL_m.c: 188: return ch;
  2923  05B7  1283               	bcf	3,5	;RP0=0, select bank0
  2924  05B8  1303               	bcf	3,6	;RP1=0, select bank0
  2925  05B9  0825               	movf	E_Read@ch,w
  2926  05BA  0008               	return
  2927  05BB                     __end_of_E_Read:	
  2928                           
  2929                           	psect	text16
  2930  0637                     __ptext16:	
  2931 ;; *************** function _I2CStop *****************
  2932 ;; Defined at:
  2933 ;;		line 64 in file "ADXL_m.c"
  2934 ;; Parameters:    Size  Location     Type
  2935 ;;		None
  2936 ;; Auto vars:     Size  Location     Type
  2937 ;;		None
  2938 ;; Return value:  Size  Location     Type
  2939 ;;                  1    wreg      void 
  2940 ;; Registers used:
  2941 ;;		None
  2942 ;; Tracked objects:
  2943 ;;		On entry : 0/0
  2944 ;;		On exit  : 0/0
  2945 ;;		Unchanged: 0/0
  2946 ;; Data sizes:     COMMON   BANK0   BANK1
  2947 ;;      Params:         0       0       0
  2948 ;;      Locals:         0       0       0
  2949 ;;      Temps:          0       0       0
  2950 ;;      Totals:         0       0       0
  2951 ;;Total ram usage:        0 bytes
  2952 ;; Hardware stack levels used:    1
  2953 ;; Hardware stack levels required when called:    3
  2954 ;; This function calls:
  2955 ;;		Nothing
  2956 ;; This function is called by:
  2957 ;;		_main
  2958 ;;		_E_Write
  2959 ;;		_E_Read
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962                           
  2963                           
  2964                           ;psect for function _I2CStop
  2965  0637                     _I2CStop:	
  2966                           
  2967                           ;ADXL_m.c: 66: PEN = 1;
  2968                           
  2969                           ;incstack = 0
  2970                           ; Regs used in _I2CStop: []
  2971  0637  1683               	bsf	3,5	;RP0=1, select bank1
  2972  0638  1303               	bcf	3,6	;RP1=0, select bank1
  2973  0639  1511               	bsf	17,2	;volatile
  2974  063A                     l193:	
  2975                           ;ADXL_m.c: 67: while(PEN);
  2976                           
  2977  063A  1D11               	btfss	17,2	;volatile
  2978  063B  0008               	return
  2979  063C  2E3A               	goto	l193
  2980  063D                     __end_of_I2CStop:	
  2981                           
  2982                           	psect	text17
  2983  063D                     __ptext17:	
  2984 ;; *************** function _I2CStart *****************
  2985 ;; Defined at:
  2986 ;;		line 51 in file "ADXL_m.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;		None
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		None
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMMON   BANK0   BANK1
  3000 ;;      Params:         0       0       0
  3001 ;;      Locals:         0       0       0
  3002 ;;      Temps:          0       0       0
  3003 ;;      Totals:         0       0       0
  3004 ;;Total ram usage:        0 bytes
  3005 ;; Hardware stack levels used:    1
  3006 ;; Hardware stack levels required when called:    3
  3007 ;; This function calls:
  3008 ;;		Nothing
  3009 ;; This function is called by:
  3010 ;;		_main
  3011 ;;		_E_Write
  3012 ;;		_E_Read
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           
  3017                           ;psect for function _I2CStart
  3018  063D                     _I2CStart:	
  3019                           
  3020                           ;ADXL_m.c: 53: SEN = 1;
  3021                           
  3022                           ;incstack = 0
  3023                           ; Regs used in _I2CStart: []
  3024  063D  1683               	bsf	3,5	;RP0=1, select bank1
  3025  063E  1303               	bcf	3,6	;RP1=0, select bank1
  3026  063F  1411               	bsf	17,0	;volatile
  3027  0640                     l187:	
  3028                           ;ADXL_m.c: 54: while(SEN);
  3029                           
  3030  0640  1C11               	btfss	17,0	;volatile
  3031  0641  0008               	return
  3032  0642  2E40               	goto	l187
  3033  0643                     __end_of_I2CStart:	
  3034                           
  3035                           	psect	text18
  3036  0604                     __ptext18:	
  3037 ;; *************** function _I2CSend *****************
  3038 ;; Defined at:
  3039 ;;		line 128 in file "ADXL_m.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;  dat             1    wreg     unsigned char 
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;  dat             1    0[BANK0 ] unsigned char 
  3044 ;; Return value:  Size  Location     Type
  3045 ;;                  1    wreg      void 
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0, pclath, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1
  3053 ;;      Params:         0       0       0
  3054 ;;      Locals:         0       1       0
  3055 ;;      Temps:          0       0       0
  3056 ;;      Totals:         0       1       0
  3057 ;;Total ram usage:        1 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    4
  3060 ;; This function calls:
  3061 ;;		_I2CWait
  3062 ;; This function is called by:
  3063 ;;		_main
  3064 ;;		_E_Write
  3065 ;;		_E_Read
  3066 ;; This function uses a non-reentrant model
  3067 ;;
  3068                           
  3069                           
  3070                           ;psect for function _I2CSend
  3071  0604                     _I2CSend:	
  3072                           
  3073                           ;incstack = 0
  3074                           ; Regs used in _I2CSend: [wreg+status,2+status,0+pclath+cstack]
  3075                           ;I2CSend@dat stored from wreg
  3076  0604  1283               	bcf	3,5	;RP0=0, select bank0
  3077  0605  1303               	bcf	3,6	;RP1=0, select bank0
  3078  0606  00A0               	movwf	I2CSend@dat
  3079                           
  3080                           ;ADXL_m.c: 130: SSPBUF = dat;
  3081  0607  0820               	movf	I2CSend@dat,w
  3082  0608  0093               	movwf	19	;volatile
  3083  0609                     l223:	
  3084                           ;ADXL_m.c: 131: while(BF);
  3085                           
  3086  0609  1683               	bsf	3,5	;RP0=1, select bank1
  3087  060A  1303               	bcf	3,6	;RP1=0, select bank1
  3088  060B  1814               	btfsc	20,0	;volatile
  3089  060C  2E09               	goto	l223
  3090                           
  3091                           ;ADXL_m.c: 132: I2CWait();
  3092  060D  2618               	fcall	_I2CWait
  3093  060E  0008               	return
  3094  060F                     __end_of_I2CSend:	
  3095                           
  3096                           	psect	text19
  3097  0643                     __ptext19:	
  3098 ;; *************** function _I2CRestart *****************
  3099 ;; Defined at:
  3100 ;;		line 77 in file "ADXL_m.c"
  3101 ;; Parameters:    Size  Location     Type
  3102 ;;		None
  3103 ;; Auto vars:     Size  Location     Type
  3104 ;;		None
  3105 ;; Return value:  Size  Location     Type
  3106 ;;                  1    wreg      void 
  3107 ;; Registers used:
  3108 ;;		None
  3109 ;; Tracked objects:
  3110 ;;		On entry : 0/0
  3111 ;;		On exit  : 0/0
  3112 ;;		Unchanged: 0/0
  3113 ;; Data sizes:     COMMON   BANK0   BANK1
  3114 ;;      Params:         0       0       0
  3115 ;;      Locals:         0       0       0
  3116 ;;      Temps:          0       0       0
  3117 ;;      Totals:         0       0       0
  3118 ;;Total ram usage:        0 bytes
  3119 ;; Hardware stack levels used:    1
  3120 ;; Hardware stack levels required when called:    3
  3121 ;; This function calls:
  3122 ;;		Nothing
  3123 ;; This function is called by:
  3124 ;;		_main
  3125 ;;		_E_Read
  3126 ;; This function uses a non-reentrant model
  3127 ;;
  3128                           
  3129                           
  3130                           ;psect for function _I2CRestart
  3131  0643                     _I2CRestart:	
  3132                           
  3133                           ;ADXL_m.c: 79: RSEN = 1;
  3134                           
  3135                           ;incstack = 0
  3136                           ; Regs used in _I2CRestart: []
  3137  0643  1683               	bsf	3,5	;RP0=1, select bank1
  3138  0644  1303               	bcf	3,6	;RP1=0, select bank1
  3139  0645  1491               	bsf	17,1	;volatile
  3140  0646                     l199:	
  3141                           ;ADXL_m.c: 80: while(RSEN);
  3142                           
  3143  0646  1C91               	btfss	17,1	;volatile
  3144  0647  0008               	return
  3145  0648  2E46               	goto	l199
  3146  0649                     __end_of_I2CRestart:	
  3147                           
  3148                           	psect	text20
  3149  05CE                     __ptext20:	
  3150 ;; *************** function _I2CRead *****************
  3151 ;; Defined at:
  3152 ;;		line 141 in file "ADXL_m.c"
  3153 ;; Parameters:    Size  Location     Type
  3154 ;;		None
  3155 ;; Auto vars:     Size  Location     Type
  3156 ;;  temp            1    1[BANK0 ] unsigned char 
  3157 ;; Return value:  Size  Location     Type
  3158 ;;                  1    wreg      unsigned char 
  3159 ;; Registers used:
  3160 ;;		wreg, status,2, status,0, pclath, cstack
  3161 ;; Tracked objects:
  3162 ;;		On entry : 0/0
  3163 ;;		On exit  : 0/0
  3164 ;;		Unchanged: 0/0
  3165 ;; Data sizes:     COMMON   BANK0   BANK1
  3166 ;;      Params:         0       0       0
  3167 ;;      Locals:         0       1       0
  3168 ;;      Temps:          0       1       0
  3169 ;;      Totals:         0       2       0
  3170 ;;Total ram usage:        2 bytes
  3171 ;; Hardware stack levels used:    1
  3172 ;; Hardware stack levels required when called:    4
  3173 ;; This function calls:
  3174 ;;		_I2CWait
  3175 ;; This function is called by:
  3176 ;;		_main
  3177 ;;		_E_Read
  3178 ;; This function uses a non-reentrant model
  3179 ;;
  3180                           
  3181                           
  3182                           ;psect for function _I2CRead
  3183  05CE                     _I2CRead:	
  3184                           
  3185                           ;ADXL_m.c: 143: unsigned char temp;
  3186                           ;ADXL_m.c: 145: RCEN = 1;
  3187                           
  3188                           ;incstack = 0
  3189                           ; Regs used in _I2CRead: [wreg+status,2+status,0+pclath+cstack]
  3190  05CE  1683               	bsf	3,5	;RP0=1, select bank1
  3191  05CF  1303               	bcf	3,6	;RP1=0, select bank1
  3192  05D0  1591               	bsf	17,3	;volatile
  3193  05D1                     l229:	
  3194                           ;ADXL_m.c: 146: while(!BF);
  3195                           
  3196  05D1  1C14               	btfss	20,0	;volatile
  3197  05D2  2DD1               	goto	l229
  3198                           
  3199                           ;ADXL_m.c: 147: temp = SSPBUF;
  3200  05D3  1283               	bcf	3,5	;RP0=0, select bank0
  3201  05D4  1303               	bcf	3,6	;RP1=0, select bank0
  3202  05D5  0813               	movf	19,w	;volatile
  3203  05D6  00A0               	movwf	??_I2CRead
  3204  05D7  0820               	movf	??_I2CRead,w
  3205  05D8  00A1               	movwf	I2CRead@temp
  3206                           
  3207                           ;ADXL_m.c: 148: I2CWait();
  3208  05D9  2618               	fcall	_I2CWait
  3209                           
  3210                           ;ADXL_m.c: 149: return temp;
  3211  05DA  1283               	bcf	3,5	;RP0=0, select bank0
  3212  05DB  1303               	bcf	3,6	;RP1=0, select bank0
  3213  05DC  0821               	movf	I2CRead@temp,w
  3214  05DD  0008               	return
  3215  05DE                     __end_of_I2CRead:	
  3216                           
  3217                           	psect	text21
  3218  0618                     __ptext21:	
  3219 ;; *************** function _I2CWait *****************
  3220 ;; Defined at:
  3221 ;;		line 115 in file "ADXL_m.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;		None
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;		None
  3226 ;; Return value:  Size  Location     Type
  3227 ;;                  1    wreg      void 
  3228 ;; Registers used:
  3229 ;;		wreg, status,2
  3230 ;; Tracked objects:
  3231 ;;		On entry : 0/0
  3232 ;;		On exit  : 0/0
  3233 ;;		Unchanged: 0/0
  3234 ;; Data sizes:     COMMON   BANK0   BANK1
  3235 ;;      Params:         0       0       0
  3236 ;;      Locals:         0       0       0
  3237 ;;      Temps:          0       0       0
  3238 ;;      Totals:         0       0       0
  3239 ;;Total ram usage:        0 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    3
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_I2CSend
  3246 ;;		_I2CRead
  3247 ;; This function uses a non-reentrant model
  3248 ;;
  3249                           
  3250                           
  3251                           ;psect for function _I2CWait
  3252  0618                     _I2CWait:	
  3253  0618                     l1086:	
  3254                           ;ADXL_m.c: 117: while ((SSPCON2 & 0x1F ) || ( SSPSTAT & 0x04 ) );
  3255                           
  3256                           ;incstack = 0
  3257                           ; Regs used in _I2CWait: [wreg+status,2]
  3258                           
  3259  0618  1683               	bsf	3,5	;RP0=1, select bank1
  3260  0619  1303               	bcf	3,6	;RP1=0, select bank1
  3261  061A  0811               	movf	17,w	;volatile
  3262  061B  391F               	andlw	31
  3263  061C  1D03               	btfss	3,2
  3264  061D  2E18               	goto	l1086
  3265  061E  1D14               	btfss	20,2	;volatile
  3266  061F  0008               	return
  3267  0620  2E18               	goto	l1086
  3268  0621                     __end_of_I2CWait:	
  3269                           
  3270                           	psect	text22
  3271  0630                     __ptext22:	
  3272 ;; *************** function _I2CNak *****************
  3273 ;; Defined at:
  3274 ;;		line 102 in file "ADXL_m.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;		None
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;		None
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  1    wreg      void 
  3281 ;; Registers used:
  3282 ;;		None
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMMON   BANK0   BANK1
  3288 ;;      Params:         0       0       0
  3289 ;;      Locals:         0       0       0
  3290 ;;      Temps:          0       0       0
  3291 ;;      Totals:         0       0       0
  3292 ;;Total ram usage:        0 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    3
  3295 ;; This function calls:
  3296 ;;		Nothing
  3297 ;; This function is called by:
  3298 ;;		_main
  3299 ;;		_E_Read
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           
  3304                           ;psect for function _I2CNak
  3305  0630                     _I2CNak:	
  3306                           
  3307                           ;ADXL_m.c: 104: ACKDT = 1;
  3308                           
  3309                           ;incstack = 0
  3310                           ; Regs used in _I2CNak: []
  3311  0630  1683               	bsf	3,5	;RP0=1, select bank1
  3312  0631  1303               	bcf	3,6	;RP1=0, select bank1
  3313  0632  1691               	bsf	17,5	;volatile
  3314                           
  3315                           ;ADXL_m.c: 105: ACKEN = 1;
  3316  0633  1611               	bsf	17,4	;volatile
  3317  0634                     l211:	
  3318                           ;ADXL_m.c: 106: while(ACKEN);
  3319                           
  3320  0634  1E11               	btfss	17,4	;volatile
  3321  0635  0008               	return
  3322  0636  2E34               	goto	l211
  3323  0637                     __end_of_I2CNak:	
  3324                           
  3325                           	psect	text23
  3326  0568                     __ptext23:	
  3327 ;; *************** function _UART_vidNewDataReceived *****************
  3328 ;; Defined at:
  3329 ;;		line 35 in file "UART_m.c"
  3330 ;; Parameters:    Size  Location     Type
  3331 ;;		None
  3332 ;; Auto vars:     Size  Location     Type
  3333 ;;		None
  3334 ;; Return value:  Size  Location     Type
  3335 ;;                  1    wreg      void 
  3336 ;; Registers used:
  3337 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3338 ;; Tracked objects:
  3339 ;;		On entry : 0/0
  3340 ;;		On exit  : 0/0
  3341 ;;		Unchanged: 0/0
  3342 ;; Data sizes:     COMMON   BANK0   BANK1
  3343 ;;      Params:         0       0       0
  3344 ;;      Locals:         0       0       0
  3345 ;;      Temps:          6       0       0
  3346 ;;      Totals:         6       0       0
  3347 ;;Total ram usage:        6 bytes
  3348 ;; Hardware stack levels used:    1
  3349 ;; Hardware stack levels required when called:    2
  3350 ;; This function calls:
  3351 ;;		_FinishBuffer
  3352 ;;		_Get_CRC8
  3353 ;;		_RS845_ManageState
  3354 ;; This function is called by:
  3355 ;;		Interrupt level 1
  3356 ;; This function uses a non-reentrant model
  3357 ;;
  3358                           
  3359                           
  3360                           ;psect for function _UART_vidNewDataReceived
  3361  0568                     _UART_vidNewDataReceived:	
  3362                           
  3363                           ;UART_m.c: 37: if(RCIF == 1)
  3364  0568  1E8C               	btfss	12,5	;volatile
  3365  0569  2D7F               	goto	i1l124
  3366                           
  3367                           ;UART_m.c: 38: {
  3368                           ;UART_m.c: 39: GIE = 0;
  3369  056A  138B               	bcf	11,7	;volatile
  3370                           
  3371                           ;UART_m.c: 40: ptrFinishBuffer();
  3372  056B  087D               	movf	_ptrFinishBuffer,w
  3373  056C  2101               	fcall	i1fptable
  3374                           
  3375                           ;UART_m.c: 41: Data_Buffer.CRC = Get_CRC8(&Data_Buffer.DATA_BUFFER[0],10);
  3376  056D  300A               	movlw	10
  3377  056E  00F7               	movwf	??_UART_vidNewDataReceived
  3378  056F  0877               	movf	??_UART_vidNewDataReceived,w
  3379  0570  00F0               	movwf	Get_CRC8@DataSize
  3380  0571  30A0               	movlw	(low (_Data_Buffer| 0))& (0+255)
  3381  0572  250C               	fcall	_Get_CRC8
  3382  0573  00F8               	movwf	??_UART_vidNewDataReceived+1
  3383  0574  0878               	movf	??_UART_vidNewDataReceived+1,w
  3384  0575  1683               	bsf	3,5	;RP0=1, select bank1
  3385  0576  1303               	bcf	3,6	;RP1=0, select bank1
  3386  0577  00AA               	movwf	(_Data_Buffer^(0+128)+10)
  3387                           
  3388                           ;UART_m.c: 42: RS845_ManageState();
  3389  0578  25EB               	fcall	_RS845_ManageState
  3390                           
  3391                           ;UART_m.c: 43: GIE = 1;
  3392  0579  178B               	bsf	11,7	;volatile
  3393                           
  3394                           ;UART_m.c: 44: RCIF = 0;
  3395  057A  1283               	bcf	3,5	;RP0=0, select bank0
  3396  057B  1303               	bcf	3,6	;RP1=0, select bank0
  3397  057C  128C               	bcf	12,5	;volatile
  3398                           
  3399                           ;UART_m.c: 45: RC0 ^= 1;
  3400  057D  3001               	movlw	1
  3401  057E  0687               	xorwf	7,f
  3402  057F                     i1l124:	
  3403                           ;UART_m.c: 47: else
  3404                           ;UART_m.c: 48: {
  3405                           
  3406                           ;UART_m.c: 46: }
  3407                           
  3408  057F  087C               	movf	??_UART_vidNewDataReceived+5,w
  3409  0580  00FF               	movwf	127
  3410  0581  087B               	movf	??_UART_vidNewDataReceived+4,w
  3411  0582  008A               	movwf	10
  3412  0583  087A               	movf	??_UART_vidNewDataReceived+3,w
  3413  0584  0084               	movwf	4
  3414  0585  0E79               	swapf	(??_UART_vidNewDataReceived+2)^(0+-128),w
  3415  0586  0083               	movwf	3
  3416  0587  0EFE               	swapf	126,f
  3417  0588  0E7E               	swapf	126,w
  3418  0589  0009               	retfie
  3419  058A                     __end_of_UART_vidNewDataReceived:	
  3420                           
  3421                           	psect	intentry
  3422  0004                     __pintentry:	
  3423                           ;incstack = 0
  3424                           ; Regs used in _UART_vidNewDataReceived: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3425                           
  3426  0004                     interrupt_function:	
  3427  007E                     saved_w	set	btemp
  3428  0004  00FE               	movwf	btemp
  3429  0005  0E03               	swapf	3,w
  3430  0006  00F9               	movwf	??_UART_vidNewDataReceived+2
  3431  0007  0804               	movf	4,w
  3432  0008  00FA               	movwf	??_UART_vidNewDataReceived+3
  3433  0009  080A               	movf	10,w
  3434  000A  00FB               	movwf	??_UART_vidNewDataReceived+4
  3435  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3436  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3437  000D  087F               	movf	btemp+1,w
  3438  000E  00FC               	movwf	??_UART_vidNewDataReceived+5
  3439  000F  2D68               	ljmp	_UART_vidNewDataReceived
  3440                           
  3441                           	psect	text24
  3442  05EB                     __ptext24:	
  3443 ;; *************** function _RS845_ManageState *****************
  3444 ;; Defined at:
  3445 ;;		line 53 in file "UART_m.c"
  3446 ;; Parameters:    Size  Location     Type
  3447 ;;		None
  3448 ;; Auto vars:     Size  Location     Type
  3449 ;;		None
  3450 ;; Return value:  Size  Location     Type
  3451 ;;                  1    wreg      void 
  3452 ;; Registers used:
  3453 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3454 ;; Tracked objects:
  3455 ;;		On entry : 0/0
  3456 ;;		On exit  : 0/0
  3457 ;;		Unchanged: 0/0
  3458 ;; Data sizes:     COMMON   BANK0   BANK1
  3459 ;;      Params:         0       0       0
  3460 ;;      Locals:         0       0       0
  3461 ;;      Temps:          0       0       0
  3462 ;;      Totals:         0       0       0
  3463 ;;Total ram usage:        0 bytes
  3464 ;; Hardware stack levels used:    1
  3465 ;; Hardware stack levels required when called:    1
  3466 ;; This function calls:
  3467 ;;		_UART_vidSend
  3468 ;; This function is called by:
  3469 ;;		_UART_vidNewDataReceived
  3470 ;; This function uses a non-reentrant model
  3471 ;;
  3472                           
  3473                           
  3474                           ;psect for function _RS845_ManageState
  3475  05EB                     _RS845_ManageState:	
  3476                           
  3477                           ;UART_m.c: 55: if(RCREG == (unsigned char)ECU_ID)
  3478                           
  3479                           ;incstack = 0
  3480                           ; Regs used in _RS845_ManageState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3481  05EB  1283               	bcf	3,5	;RP0=0, select bank0
  3482  05EC  1303               	bcf	3,6	;RP1=0, select bank0
  3483  05ED  081A               	movf	26,w	;volatile
  3484  05EE  0669               	xorwf	_ECU_ID,w
  3485  05EF  1D03               	skipz
  3486  05F0  0008               	return
  3487                           
  3488                           ;UART_m.c: 56: {
  3489                           ;UART_m.c: 57: UART_vidSend(&Data_Buffer.DATA_BUFFER[0],((unsigned char)11));
  3490  05F1  300B               	movlw	11
  3491  05F2  00F0               	movwf	UART_vidSend@Len
  3492  05F3  3000               	movlw	0
  3493  05F4  00F1               	movwf	UART_vidSend@Len+1
  3494  05F5  30A0               	movlw	(low (_Data_Buffer| 0))& (0+255)
  3495  05F6  253D               	fcall	_UART_vidSend
  3496                           
  3497                           ;UART_m.c: 58: }
  3498  05F7  0008               	return
  3499  05F8                     __end_of_RS845_ManageState:	
  3500                           ;UART_m.c: 59: else
  3501                           ;UART_m.c: 60: {
  3502                           
  3503                           
  3504                           	psect	text25
  3505  053D                     __ptext25:	
  3506 ;; *************** function _UART_vidSend *****************
  3507 ;; Defined at:
  3508 ;;		line 64 in file "UART_m.c"
  3509 ;; Parameters:    Size  Location     Type
  3510 ;;  data            1    wreg     const PTR unsigned char 
  3511 ;;		 -> Data_Buffer(11), 
  3512 ;;  Len             2    0[COMMON] const unsigned short 
  3513 ;; Auto vars:     Size  Location     Type
  3514 ;;  data            1    3[COMMON] const PTR unsigned char 
  3515 ;;		 -> Data_Buffer(11), 
  3516 ;;  UART_u16Inde    2    4[COMMON] unsigned short 
  3517 ;; Return value:  Size  Location     Type
  3518 ;;                  1    wreg      void 
  3519 ;; Registers used:
  3520 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3521 ;; Tracked objects:
  3522 ;;		On entry : 0/0
  3523 ;;		On exit  : 0/0
  3524 ;;		Unchanged: 0/0
  3525 ;; Data sizes:     COMMON   BANK0   BANK1
  3526 ;;      Params:         2       0       0
  3527 ;;      Locals:         3       0       0
  3528 ;;      Temps:          1       0       0
  3529 ;;      Totals:         6       0       0
  3530 ;;Total ram usage:        6 bytes
  3531 ;; Hardware stack levels used:    1
  3532 ;; This function calls:
  3533 ;;		Nothing
  3534 ;; This function is called by:
  3535 ;;		_RS845_ManageState
  3536 ;; This function uses a non-reentrant model
  3537 ;;
  3538                           
  3539                           
  3540                           ;psect for function _UART_vidSend
  3541  053D                     _UART_vidSend:	
  3542                           
  3543                           ;incstack = 0
  3544                           ; Regs used in _UART_vidSend: [wreg-fsr0h+status,2+status,0]
  3545                           ;UART_vidSend@data stored from wreg
  3546  053D  00F3               	movwf	UART_vidSend@data
  3547                           
  3548                           ;UART_m.c: 66: unsigned short UART_u16Index = 0;
  3549  053E  01F4               	clrf	UART_vidSend@UART_u16Index
  3550  053F  01F5               	clrf	UART_vidSend@UART_u16Index+1
  3551                           
  3552                           ;UART_m.c: 68: for(UART_u16Index = 0; UART_u16Index < Len; UART_u16Index++)
  3553  0540  01F4               	clrf	UART_vidSend@UART_u16Index
  3554  0541  01F5               	clrf	UART_vidSend@UART_u16Index+1
  3555  0542  0871               	movf	UART_vidSend@Len+1,w
  3556  0543  0275               	subwf	UART_vidSend@UART_u16Index+1,w
  3557  0544  1D03               	skipz
  3558  0545  2D48               	goto	u57_25
  3559  0546  0870               	movf	UART_vidSend@Len,w
  3560  0547  0274               	subwf	UART_vidSend@UART_u16Index,w
  3561  0548                     u57_25:	
  3562  0548  1803               	btfsc	3,0
  3563  0549  2D64               	goto	i1l133
  3564  054A                     i1l134:	
  3565                           ;UART_m.c: 69: {
  3566                           ;UART_m.c: 70: while(PIR1bits.TXIF == 0);
  3567                           
  3568  054A  1283               	bcf	3,5	;RP0=0, select bank0
  3569  054B  1303               	bcf	3,6	;RP1=0, select bank0
  3570  054C  1E0C               	btfss	12,4	;volatile
  3571  054D  2D4A               	goto	i1l134
  3572                           
  3573                           ;UART_m.c: 71: TXREG = data[UART_u16Index];
  3574  054E  0874               	movf	UART_vidSend@UART_u16Index,w
  3575  054F  0773               	addwf	UART_vidSend@data,w
  3576  0550  00F2               	movwf	??_UART_vidSend
  3577  0551  0872               	movf	??_UART_vidSend,w
  3578  0552  0084               	movwf	4
  3579  0553  1383               	bcf	3,7	;select IRP bank0
  3580  0554  0800               	movf	0,w
  3581  0555  0099               	movwf	25	;volatile
  3582  0556  3001               	movlw	1
  3583  0557  07F4               	addwf	UART_vidSend@UART_u16Index,f
  3584  0558  1803               	skipnc
  3585  0559  0AF5               	incf	UART_vidSend@UART_u16Index+1,f
  3586  055A  3000               	movlw	0
  3587  055B  07F5               	addwf	UART_vidSend@UART_u16Index+1,f
  3588  055C  0871               	movf	UART_vidSend@Len+1,w
  3589  055D  0275               	subwf	UART_vidSend@UART_u16Index+1,w
  3590  055E  1D03               	skipz
  3591  055F  2D62               	goto	u59_25
  3592  0560  0870               	movf	UART_vidSend@Len,w
  3593  0561  0274               	subwf	UART_vidSend@UART_u16Index,w
  3594  0562                     u59_25:	
  3595  0562  1C03               	skipc
  3596  0563  2D4A               	goto	i1l134
  3597  0564                     i1l133:	
  3598                           
  3599                           ;UART_m.c: 72: }
  3600                           ;UART_m.c: 73: PIR1bits.TXIF = 0;
  3601  0564  1283               	bcf	3,5	;RP0=0, select bank0
  3602  0565  1303               	bcf	3,6	;RP1=0, select bank0
  3603  0566  120C               	bcf	12,4	;volatile
  3604  0567  0008               	return
  3605  0568                     __end_of_UART_vidSend:	
  3606                           
  3607                           	psect	text26
  3608  050C                     __ptext26:	
  3609 ;; *************** function _Get_CRC8 *****************
  3610 ;; Defined at:
  3611 ;;		line 10 in file "CRC8.c"
  3612 ;; Parameters:    Size  Location     Type
  3613 ;;  Data            1    wreg     PTR unsigned char 
  3614 ;;		 -> Data_Buffer(11), 
  3615 ;;  DataSize        1    0[COMMON] unsigned char 
  3616 ;; Auto vars:     Size  Location     Type
  3617 ;;  Data            1    3[COMMON] PTR unsigned char 
  3618 ;;		 -> Data_Buffer(11), 
  3619 ;;  CRC             1    6[COMMON] unsigned char 
  3620 ;;  bitIndex        1    5[COMMON] unsigned char 
  3621 ;;  DataIndex       1    4[COMMON] unsigned char 
  3622 ;; Return value:  Size  Location     Type
  3623 ;;                  1    wreg      unsigned char 
  3624 ;; Registers used:
  3625 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3626 ;; Tracked objects:
  3627 ;;		On entry : 0/0
  3628 ;;		On exit  : 0/0
  3629 ;;		Unchanged: 0/0
  3630 ;; Data sizes:     COMMON   BANK0   BANK1
  3631 ;;      Params:         1       0       0
  3632 ;;      Locals:         4       0       0
  3633 ;;      Temps:          2       0       0
  3634 ;;      Totals:         7       0       0
  3635 ;;Total ram usage:        7 bytes
  3636 ;; Hardware stack levels used:    1
  3637 ;; This function calls:
  3638 ;;		Nothing
  3639 ;; This function is called by:
  3640 ;;		_UART_vidNewDataReceived
  3641 ;; This function uses a non-reentrant model
  3642 ;;
  3643                           
  3644                           
  3645                           ;psect for function _Get_CRC8
  3646  050C                     _Get_CRC8:	
  3647                           
  3648                           ;incstack = 0
  3649                           ; Regs used in _Get_CRC8: [wreg-fsr0h+status,2+status,0]
  3650                           ;Get_CRC8@Data stored from wreg
  3651  050C  00F3               	movwf	Get_CRC8@Data
  3652                           
  3653                           ;CRC8.c: 12: unsigned char CRC = 0;
  3654  050D  01F6               	clrf	Get_CRC8@CRC
  3655                           
  3656                           ;CRC8.c: 13: char DataIndex,bitIndex;
  3657                           ;CRC8.c: 15: for(DataIndex = 0; DataIndex < DataSize; DataIndex++)
  3658  050E  01F4               	clrf	Get_CRC8@DataIndex
  3659  050F                     i1l1322:	
  3660  050F  0870               	movf	Get_CRC8@DataSize,w
  3661  0510  0274               	subwf	Get_CRC8@DataIndex,w
  3662  0511  1803               	btfsc	3,0
  3663  0512  2D3B               	goto	i1l1324
  3664                           
  3665                           ;CRC8.c: 16: {
  3666                           ;CRC8.c: 18: CRC ^= Data[DataIndex];
  3667  0513  0874               	movf	Get_CRC8@DataIndex,w
  3668  0514  0773               	addwf	Get_CRC8@Data,w
  3669  0515  00F1               	movwf	??_Get_CRC8
  3670  0516  0871               	movf	??_Get_CRC8,w
  3671  0517  0084               	movwf	4
  3672  0518  1383               	bcf	3,7	;select IRP bank0
  3673  0519  0800               	movf	0,w
  3674  051A  00F2               	movwf	??_Get_CRC8+1
  3675  051B  0872               	movf	??_Get_CRC8+1,w
  3676  051C  06F6               	xorwf	Get_CRC8@CRC,f
  3677                           
  3678                           ;CRC8.c: 19: for(bitIndex = 0; bitIndex < 8; bitIndex++)
  3679  051D  01F5               	clrf	Get_CRC8@bitIndex
  3680  051E  3008               	movlw	8
  3681  051F  0275               	subwf	Get_CRC8@bitIndex,w
  3682  0520  1803               	btfsc	3,0
  3683  0521  2D36               	goto	i1l1320
  3684  0522                     i1l263:	
  3685                           
  3686                           ;CRC8.c: 20: {
  3687                           ;CRC8.c: 21: if((CRC & 0x80) != 0)
  3688  0522  1FF6               	btfss	Get_CRC8@CRC,7
  3689  0523  2D2C               	goto	i1l1314
  3690                           
  3691                           ;CRC8.c: 22: {
  3692                           ;CRC8.c: 23: CRC = (CRC << 1) ^ 0x1DU;
  3693  0524  0876               	movf	Get_CRC8@CRC,w
  3694  0525  00F1               	movwf	??_Get_CRC8
  3695  0526  0771               	addwf	??_Get_CRC8,w
  3696  0527  3A1D               	xorlw	29
  3697  0528  00F2               	movwf	??_Get_CRC8+1
  3698  0529  0872               	movf	??_Get_CRC8+1,w
  3699  052A  00F6               	movwf	Get_CRC8@CRC
  3700                           
  3701                           ;CRC8.c: 24: }
  3702  052B  2D2E               	goto	i1l1316
  3703  052C                     i1l1314:	
  3704                           
  3705                           ;CRC8.c: 25: else
  3706                           ;CRC8.c: 26: {
  3707                           ;CRC8.c: 27: CRC <<= 1;
  3708  052C  1003               	clrc
  3709  052D  0DF6               	rlf	Get_CRC8@CRC,f
  3710  052E                     i1l1316:	
  3711  052E  3001               	movlw	1
  3712  052F  00F1               	movwf	??_Get_CRC8
  3713  0530  0871               	movf	??_Get_CRC8,w
  3714  0531  07F5               	addwf	Get_CRC8@bitIndex,f
  3715  0532  3008               	movlw	8
  3716  0533  0275               	subwf	Get_CRC8@bitIndex,w
  3717  0534  1C03               	skipc
  3718  0535  2D22               	goto	i1l263
  3719  0536                     i1l1320:	
  3720  0536  3001               	movlw	1
  3721  0537  00F1               	movwf	??_Get_CRC8
  3722  0538  0871               	movf	??_Get_CRC8,w
  3723  0539  07F4               	addwf	Get_CRC8@DataIndex,f
  3724  053A  2D0F               	goto	i1l1322
  3725  053B                     i1l1324:	
  3726                           
  3727                           ;CRC8.c: 28: }
  3728                           ;CRC8.c: 29: }
  3729                           ;CRC8.c: 30: }
  3730                           ;CRC8.c: 32: return CRC;
  3731  053B  0876               	movf	Get_CRC8@CRC,w
  3732  053C  0008               	return
  3733  053D                     __end_of_Get_CRC8:	
  3734                           
  3735                           	psect	text27
  3736  0448                     __ptext27:	
  3737 ;; *************** function _FinishBuffer *****************
  3738 ;; Defined at:
  3739 ;;		line 82 in file "main.c"
  3740 ;; Parameters:    Size  Location     Type
  3741 ;;		None
  3742 ;; Auto vars:     Size  Location     Type
  3743 ;;		None
  3744 ;; Return value:  Size  Location     Type
  3745 ;;                  1    wreg      void 
  3746 ;; Registers used:
  3747 ;;		wreg, status,2
  3748 ;; Tracked objects:
  3749 ;;		On entry : 0/0
  3750 ;;		On exit  : 0/0
  3751 ;;		Unchanged: 0/0
  3752 ;; Data sizes:     COMMON   BANK0   BANK1
  3753 ;;      Params:         0       0       0
  3754 ;;      Locals:         0       0       0
  3755 ;;      Temps:          1       0       0
  3756 ;;      Totals:         1       0       0
  3757 ;;Total ram usage:        1 bytes
  3758 ;; Hardware stack levels used:    1
  3759 ;; This function calls:
  3760 ;;		Nothing
  3761 ;; This function is called by:
  3762 ;;		_UART_vidNewDataReceived
  3763 ;; This function uses a non-reentrant model
  3764 ;;
  3765                           
  3766                           
  3767                           ;psect for function _FinishBuffer
  3768  0448                     _FinishBuffer:	
  3769                           
  3770                           ;main.c: 85: Data_Buffer.HX = XAVG>>8; Data_Buffer.LX=XAVG;
  3771                           
  3772                           ;incstack = 0
  3773                           ; Regs used in _FinishBuffer: [wreg+status,2]
  3774  0448  1283               	bcf	3,5	;RP0=0, select bank0
  3775  0449  1303               	bcf	3,6	;RP1=0, select bank0
  3776  044A  0867               	movf	_XAVG+1,w
  3777  044B  00F0               	movwf	??_FinishBuffer
  3778  044C  0870               	movf	??_FinishBuffer,w
  3779  044D  1683               	bsf	3,5	;RP0=1, select bank1
  3780  044E  1303               	bcf	3,6	;RP1=0, select bank1
  3781  044F  00A2               	movwf	(_Data_Buffer^(0+128)+2)
  3782  0450  1283               	bcf	3,5	;RP0=0, select bank0
  3783  0451  1303               	bcf	3,6	;RP1=0, select bank0
  3784  0452  0866               	movf	_XAVG,w
  3785  0453  00F0               	movwf	??_FinishBuffer
  3786  0454  0870               	movf	??_FinishBuffer,w
  3787  0455  1683               	bsf	3,5	;RP0=1, select bank1
  3788  0456  1303               	bcf	3,6	;RP1=0, select bank1
  3789  0457  00A3               	movwf	(_Data_Buffer^(0+128)+3)
  3790                           
  3791                           ;main.c: 86: Data_Buffer.HY = YAVG>>8; Data_Buffer.LY=YAVG;
  3792  0458  1283               	bcf	3,5	;RP0=0, select bank0
  3793  0459  1303               	bcf	3,6	;RP1=0, select bank0
  3794  045A  0865               	movf	_YAVG+1,w
  3795  045B  00F0               	movwf	??_FinishBuffer
  3796  045C  0870               	movf	??_FinishBuffer,w
  3797  045D  1683               	bsf	3,5	;RP0=1, select bank1
  3798  045E  1303               	bcf	3,6	;RP1=0, select bank1
  3799  045F  00A4               	movwf	(_Data_Buffer^(0+128)+4)
  3800  0460  1283               	bcf	3,5	;RP0=0, select bank0
  3801  0461  1303               	bcf	3,6	;RP1=0, select bank0
  3802  0462  0864               	movf	_YAVG,w
  3803  0463  00F0               	movwf	??_FinishBuffer
  3804  0464  0870               	movf	??_FinishBuffer,w
  3805  0465  1683               	bsf	3,5	;RP0=1, select bank1
  3806  0466  1303               	bcf	3,6	;RP1=0, select bank1
  3807  0467  00A5               	movwf	(_Data_Buffer^(0+128)+5)
  3808                           
  3809                           ;main.c: 87: Data_Buffer.HZ = ZAVG>>8; Data_Buffer.LZ=ZAVG;
  3810  0468  1283               	bcf	3,5	;RP0=0, select bank0
  3811  0469  1303               	bcf	3,6	;RP1=0, select bank0
  3812  046A  0863               	movf	_ZAVG+1,w
  3813  046B  00F0               	movwf	??_FinishBuffer
  3814  046C  0870               	movf	??_FinishBuffer,w
  3815  046D  1683               	bsf	3,5	;RP0=1, select bank1
  3816  046E  1303               	bcf	3,6	;RP1=0, select bank1
  3817  046F  00A6               	movwf	(_Data_Buffer^(0+128)+6)
  3818  0470  1283               	bcf	3,5	;RP0=0, select bank0
  3819  0471  1303               	bcf	3,6	;RP1=0, select bank0
  3820  0472  0862               	movf	_ZAVG,w
  3821  0473  00F0               	movwf	??_FinishBuffer
  3822  0474  0870               	movf	??_FinishBuffer,w
  3823  0475  1683               	bsf	3,5	;RP0=1, select bank1
  3824  0476  1303               	bcf	3,6	;RP1=0, select bank1
  3825  0477  00A7               	movwf	(_Data_Buffer^(0+128)+7)
  3826                           
  3827                           ;main.c: 88: (Data_Buffer.T = 0x55);
  3828  0478  3055               	movlw	85
  3829  0479  00F0               	movwf	??_FinishBuffer
  3830  047A  0870               	movf	??_FinishBuffer,w
  3831  047B  00A1               	movwf	(_Data_Buffer^(0+128)+1)
  3832                           
  3833                           ;main.c: 89: Data_Buffer.AVG_VibrationH = AVG>>8; Data_Buffer.AVG_VibrationL = AVG;
  3834  047C  1283               	bcf	3,5	;RP0=0, select bank0
  3835  047D  1303               	bcf	3,6	;RP1=0, select bank0
  3836  047E  0861               	movf	_AVG+1,w
  3837  047F  00F0               	movwf	??_FinishBuffer
  3838  0480  0870               	movf	??_FinishBuffer,w
  3839  0481  1683               	bsf	3,5	;RP0=1, select bank1
  3840  0482  1303               	bcf	3,6	;RP1=0, select bank1
  3841  0483  00A8               	movwf	(_Data_Buffer^(0+128)+8)
  3842  0484  1283               	bcf	3,5	;RP0=0, select bank0
  3843  0485  1303               	bcf	3,6	;RP1=0, select bank0
  3844  0486  0860               	movf	_AVG,w
  3845  0487  00F0               	movwf	??_FinishBuffer
  3846  0488  0870               	movf	??_FinishBuffer,w
  3847  0489  1683               	bsf	3,5	;RP0=1, select bank1
  3848  048A  1303               	bcf	3,6	;RP1=0, select bank1
  3849  048B  00A9               	movwf	(_Data_Buffer^(0+128)+9)
  3850  048C  0008               	return
  3851  048D                     __end_of_FinishBuffer:	
  3852  0002                     
  3853                           	psect	functab
  3854  0100                     __pfunctab:	
  3855  0100                     fptable:	
  3856  0100  2900               	goto	fptable	;no entries
  3857  0101                     __i1fptable:	
  3858  0101                     i1fptable:	
  3859  0101  00FF               	movwf	(btemp+1)& (0+127)
  3860  0102  3001               	movlw	high i1fptable
  3861  0103  008A               	movwf	10
  3862  0104  087F               	movf	(btemp+1)& (0+127),w
  3863  0105  0782               	addwf	2,f
  3864  0106                     i1fpbase:	
  3865  0106  2906               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
  3866  0107                     fp__FinishBuffer:	
  3867  0107  2C48               	ljmp	_FinishBuffer
  3868  0108                     __end_of__i1fptable:	
  3869  007E                     btemp	set	126	;btemp
  3870  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         28
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      14
    BANK0            80     56      74
    BANK1            32      0      11

Pointer List with Targets:

    Get_CRC8@Data	PTR unsigned char  size(1) Largest target is 11
		 -> Data_Buffer(BANK1[11]), 

    UART_vidSend@data	const PTR unsigned char  size(1) Largest target is 11
		 -> Data_Buffer(BANK1[11]), 

    ptrFinishBuffer	PTR FTN()void  size(1) Largest target is 1
		 -> FinishBuffer(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _UART_vidNewDataReceived in COMMON

    _UART_vidNewDataReceived->_Get_CRC8
    _RS845_ManageState->_UART_vidSend

Critical Paths under _main in BANK0

    _main->_get_average
    _main->_get_averageX
    _main->_get_averageY
    _main->_get_averageZ
    _ini_adxl345->_E_Write
    _E_Write->_I2CSend
    _get_averageZ->___aldiv
    _get_averageY->___aldiv
    _get_averageX->___aldiv
    _get_average->___aldiv
    ___aldiv->___lmul
    _E_Read->_I2CRead

Critical Paths under _UART_vidNewDataReceived in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART_vidNewDataReceived in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0    7672
                                             34 BANK0     22    22      0
                             _E_Read
                             _I2CAck
                            _I2CInit
                             _I2CNak
                            _I2CRead
                         _I2CRestart
                            _I2CSend
                           _I2CStart
                            _I2CStop
                       _UART_vidInit
                            ___lwdiv
                        _get_average
                       _get_averageX
                       _get_averageY
                       _get_averageZ
                        _ini_adxl345
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ini_adxl345                                          2     2      0     578
                                              4 BANK0      2     2      0
                            _E_Write
 ---------------------------------------------------------------------------------
 (2) _E_Write                                              3     0      3     578
                                              1 BANK0      3     0      3
                            _I2CSend
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (1) _get_averageZ                                         6     4      2    1502
                                             28 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _get_averageY                                         6     4      2    1502
                                             28 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _get_averageX                                         6     4      2    1502
                                             28 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _get_average                                          6     4      2    1502
                                             28 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     604
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     812
                                             13 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     546
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_vidInit                                         1     1      0       0
                                              0 BANK0      1     1      0
                   _UART_u8GetNodeID
 ---------------------------------------------------------------------------------
 (2) _UART_u8GetNodeID                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CAck                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _E_Read                                               4     2      2     282
                                              2 BANK0      4     2      2
                             _I2CNak
                            _I2CRead
                         _I2CRestart
                            _I2CSend
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (3) _I2CStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2CSend                                              1     1      0      22
                                              0 BANK0      1     1      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (1) _I2CRestart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CRead                                              2     2      0      23
                                              0 BANK0      2     2      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (4) _I2CWait                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CNak                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _UART_vidNewDataReceived                              6     6      0     529
                                              7 COMMON     6     6      0
                       _FinishBuffer *
                           _Get_CRC8
                  _RS845_ManageState
 ---------------------------------------------------------------------------------
 (6) _RS845_ManageState                                    0     0      0     229
                       _UART_vidSend
 ---------------------------------------------------------------------------------
 (7) _UART_vidSend                                         6     4      2     229
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (6) _Get_CRC8                                             7     6      1     300
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (6) _FinishBuffer                                         1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _E_Read
     _I2CNak
     _I2CRead
       _I2CWait
     _I2CRestart
     _I2CSend
       _I2CWait
     _I2CStart
     _I2CStop
   _I2CAck
   _I2CInit
   _I2CNak
   _I2CRead
     _I2CWait
   _I2CRestart
   _I2CSend
     _I2CWait
   _I2CStart
   _I2CStop
   _UART_vidInit
     _UART_u8GetNodeID
   ___lwdiv
   _get_average
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _get_averageX
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _get_averageY
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _get_averageZ
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _ini_adxl345
     _E_Write
       _I2CSend
         _I2CWait
       _I2CStart
       _I2CStop
   _system_init

 _UART_vidNewDataReceived (ROOT)
   _FinishBuffer *
   _Get_CRC8 *
   _RS845_ManageState *
     _UART_vidSend

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20      0       B       6       34.4%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     38      4A       4       92.5%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      D       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      63       8        0.0%
ABS                  0      0      63       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Sat Jan 30 23:02:36 2021

       ??_UART_vidNewDataReceived 0077                                 pc 0002                       __CFG_CP$OFF 0000  
                              _BF 04A0                                fsr 0004               __size_of_I2CRestart 0006  
             __end_of_system_init 0604                               l211 0634                               l205 062D  
                             l223 0609                               l229 05D1                               l407 0228  
                             l193 063A                               l187 0640                               l199 0646  
                             _GIE 005F                               _AVG 0060                               _RC0 0038  
                             _PEN 048A                      __CFG_CPD$OFF 0000                               u705 025B  
                             u625 04AF                               u810 02DC                               u715 0270  
                             u635 04B7                               u811 02DD                               u812 02E2  
                             _SEN 0488                               u725 0282                               u813 02E3  
                             u805 02B9                               u830 03DE                               u831 03DF  
                             u832 03E4                               u905 04DB                               u833 03E5  
                             u825 03BB                               u770 0388                               u771 0389  
                             u772 038E                               u925 04E7                               u685 024D  
                             u773 038F                               u765 0365                               u790 0332  
                             u935 04F3                               u791 0333                               u792 0338  
                             u945 04FD                               u793 0339                               u785 030F  
                             u977 0120                               u987 0139                               u997 040E  
                 __end_of_I2CInit 05CE                   __end_of_I2CRead 05DE                   __end_of_I2CSend 060F  
                             fsr0 0004                   __end_of_I2CWait 0621                               indf 0000  
                 __end_of_I2CStop 063D                      __CFG_FOSC$HS 0000                      __CFG_LVP$OFF 0000  
                     main@bw_rate 004A                              l1142 0497                              l1146 04AD  
                            l1172 0249                              l1164 0239                              l1086 0618  
                            l1350 04FC                              l1342 04D8                              l1190 029C  
                            l1182 0281                              l1174 0259                              l1344 04E6  
                            l1354 0507                              l1186 028E                              l1366 014C  
                            _BRGH 04C2                              _CREN 00C4                              u1007 0423  
                            u1017 0438                      ?_ini_adxl345 0070                              _PEIE 005E  
                            _RCIE 0465                              _RCEN 048B                              _RCIF 0065  
                            _SPEN 00C7                              _RSEN 0489                              _XAVG 0066  
                            _YAVG 0064                              _ZAVG 0062                              _TXEN 04C5  
                  ??_get_averageX 003E                              _SYNC 04C4                    ??_get_averageY 003E  
                  ??_get_averageZ 003E                      __CFG_WRT$OFF 0000                              _main 0108  
                            btemp 007E                  __end_of_I2CStart 0643                   __end_of_E_Write 05EB  
                            start 0010                     __CFG_IESO$OFF 0000                       _Data_Buffer 00A0  
                 __end_of___aldiv 02A5                             ?_main 0070                             _ACKEN 048C  
                           _ACKDT 048D                     __CFG_WDTE$OFF 0000                             _ANSEL 0188  
                 __end_of___lwdiv 050C                             i1l124 057F                             i1l133 0564  
                           i1l134 054A                             i1l263 0522                             _RCREG 001A  
                           _SPBRG 0099                             _TRISA 0085                             u57_25 0548  
                           u59_25 0562                             _TXREG 0019               ___lmul@multiplicand 0024  
                  __CFG_FCMEN$OFF 0000                             main@X 004C                             main@Y 004E  
                           main@Z 0050                             fpbase 0000                    __CFG_BOREN$OFF 0000  
                           pclath 000A                             status 0003                             wtemp0 007E  
                __end_of_Get_CRC8 053D                    __CFG_MCLRE$OFF 0000                   __initialization 0011  
                     _system_init 05F8                      __end_of_main 0216                         ??_I2CInit 0020  
                       ??_I2CRead 0020                         ??_I2CSend 0020                         ??_I2CWait 0020  
                       ??_I2CStop 0020                            ??_main 0042              __end_of_FinishBuffer 048D  
                          _ADCON0 001F                            _I2CAck 0629                            _I2CNak 0630  
                       ??_E_Write 0024                            _ECU_ID 0069                      ??_I2CRestart 0020  
                          i1l1320 0536                            i1l1314 052C                            i1l1322 050F  
                          i1l1324 053B                            i1l1316 052E                        __i1fptable 0101  
                          _E_Read 05A5                            _SSPADD 0093                            _TRISC0 0438  
                          _TRISC6 043E                            _TRISC7 043F                            _SSPCON 0014  
                          _SSPBUF 0013                   _ptrFinishBuffer 007D                    __CFG_PWRTE$OFF 0000  
            __size_of_get_average 0056                            ___lmul 048D                         ??___aldiv 0035  
                       ??___lwdiv 0024              __end_of_get_averageX 03A7              __end_of_get_averageY 0351  
            __end_of_get_averageZ 02FB                            main@XH 0053                            main@YH 0054  
                          main@ZH 0056                            main@XL 0052                            main@YL 0055  
                          main@ZL 0057                            main@id 0046                __end_of_I2CRestart 0649  
                          fptable 0100                      __pdataCOMMON 007D                            fptotal 0000  
                       ?_I2CStart 0070                            saved_w 007E           __end_of__initialization 001C  
            __size_of_ini_adxl345 004B                 ?_UART_u8GetNodeID 0070                    __pcstackCOMMON 0070  
               get_average@OutPut 0058                ??_UART_u8GetNodeID 0020                        ??_I2CStart 0020  
                       ?_Get_CRC8 0070                           ?_I2CAck 0070                           ?_I2CNak 0070  
                      __pbssBANK0 0058                        __pbssBANK1 00A0                   get_average@Data 003C  
                         ?_E_Read 0022                        I2CSend@dat 0020                        __pmaintext 0108  
                         ?___lmul 0020                        __pintentry 0004                           _I2CInit 05BB  
                         _I2CRead 05CE                           _I2CSend 0604                           _I2CWait 0618  
                  ___lmul@product 0029                           _I2CStop 0637             __size_of_FinishBuffer 0045  
                 UART_vidSend@Len 0070                        ??_Get_CRC8 0071                           _SSPCON2 0091  
                 __size_of_I2CAck 0007                   __size_of_I2CNak 0007                           _SSPSTAT 0094  
                         _E_Write 05DE                           i1fpbase 0106                   __size_of_E_Read 0016  
        ?_UART_vidNewDataReceived 0070                         E_Write@ch 0023                      _FinishBuffer 0448  
                    ?_system_init 0070             __size_of_get_averageX 0056             __size_of_get_averageY 0056  
           __size_of_get_averageZ 0056                           ___aldiv 0216                   __size_of___lmul 0041  
                         ___lwdiv 04CE                           __ptext1 05F8                           __ptext2 03FD  
                         __ptext3 05DE                           __ptext4 02A5                           __ptext5 02FB  
                         __ptext6 0351                           __ptext7 03A7                           __ptext8 048D  
                         __ptext9 0216               __size_of__i1fptable 0007                     ?_UART_vidInit 0070  
                   ?_UART_vidSend 0070                  ___aldiv@dividend 0031                           clrloop0 0622  
                         main@pow 0048              end_of_initialization 001C                      _get_averageX 0351  
                    _get_averageY 02FB                      _get_averageZ 02A5                  Get_CRC8@DataSize 0070  
                 _RECEIVED_ECU_ID 0068                  ___aldiv@quotient 0038                    ??_UART_vidInit 0020  
                  ??_UART_vidSend 0072                         _TRISCbits 0087                 __size_of_I2CStart 0006  
 __end_of_UART_vidNewDataReceived 058A                    __end_of_I2CAck 0630                    __end_of_I2CNak 0637  
                   ??_get_average 003E                    __end_of_E_Read 05BB                  Get_CRC8@bitIndex 0075  
                  __end_of___lmul 04CE                     __pidataCOMMON 0649                get_averageX@OutPut 005E  
             start_initialization 0011         __size_of_UART_u8GetNodeID 0009                get_averageY@OutPut 005C  
              get_averageZ@OutPut 005A                          ??_I2CAck 0020                          ??_I2CNak 0020  
               __size_of_Get_CRC8 0031                     ??_ini_adxl345 0024                          ??_E_Read 0024  
                    Get_CRC8@Data 0073                       E_Write@addr 0021                          ??___lmul 0028  
             __end_of_get_average 03FD              __size_of_system_init 000C                          ?_I2CInit 0070  
                        ?_I2CRead 0070                          ?_I2CSend 0070                          ?_I2CWait 0070  
                        ?_I2CStop 0070         UART_vidSend@UART_u16Index 0074                __end_of__i1fptable 0108  
                       ___latbits 0000                     __pcstackBANK0 0020                  get_averageX@Data 003C  
                get_averageY@Data 003C                  get_averageZ@Data 003C                          ?_E_Write 0021  
                     I2CRead@temp 0021              __end_of_UART_vidInit 05A5              __end_of_UART_vidSend 0568  
               _RS845_ManageState 05EB                         __pnvBANK0 0069               __end_of_ini_adxl345 0448  
                ___lwdiv@dividend 0022                ?_RS845_ManageState 0070                         __pfunctab 0100  
                        ?___aldiv 002D                          ?___lwdiv 0020               ??_RS845_ManageState 0076  
                        E_Read@ch 0025  __size_of_UART_vidNewDataReceived 0022                          _I2CStart 063D  
                ___lwdiv@quotient 0025                  UART_vidSend@data 0073         __end_of_RS845_ManageState 05F8  
                 ___aldiv@divisor 002D                 interrupt_function 0004                   ___aldiv@counter 0036  
                       clear_ram0 0621                       _get_average 03A7                        E_Read@addr 0022  
                        _PIR1bits 000C                          _PIR2bits 000D                  __size_of_I2CInit 0013  
                __size_of_I2CRead 0010                  __size_of_I2CSend 000B                  __size_of_I2CWait 0009  
                __size_of_I2CStop 0006                  _UART_u8GetNodeID 060F                          _Get_CRC8 050C  
                        i1fptable 0101                 ___lmul@multiplier 0020                          i1fptotal 0002  
                      _I2CRestart 0643                       _ini_adxl345 03FD                  __size_of_E_Write 000D  
                     Get_CRC8@CRC 0076                  __size_of___aldiv 008F                  __size_of___lwdiv 003E  
                 ___lwdiv@divisor 0020                   ___lwdiv@counter 0027                          __ptext10 04CE  
                        __ptext11 058A                          __ptext20 05CE                          __ptext12 060F  
                        __ptext21 0618                          __ptext13 05BB                          __ptext22 0630  
                        __ptext14 0629                          __ptext23 0568                          __ptext15 05A5  
                        __ptext24 05EB                          __ptext16 0637                          __ptext25 053D  
                        __ptext17 063D                          __ptext26 050C                          __ptext18 0604  
                        __ptext27 0448                          __ptext19 0643                 __CFG_BOR4V$BOR40V 0000  
           __size_of_UART_vidInit 001B             __size_of_UART_vidSend 002B        __size_of_RS845_ManageState 000D  
                 fp__FinishBuffer 0107                     __size_of_main 010E           _UART_vidNewDataReceived 0568  
                    _UART_vidInit 058A                      _UART_vidSend 053D                       ?_I2CRestart 0070  
                        intlevel1 0100                 Get_CRC8@DataIndex 0074                     ?_FinishBuffer 0070  
                   ??_system_init 0020                      ___aldiv@sign 0037                     ?_get_averageX 003C  
                   ?_get_averageY 003C                     ?_get_averageZ 003C                      ?_get_average 003C  
                  ??_FinishBuffer 0070          __end_of_UART_u8GetNodeID 0618  
