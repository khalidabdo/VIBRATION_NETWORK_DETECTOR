

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Mon Feb 01 00:22:27 2021

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F882
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataCOMMON,global,class=CODE,delta=2
     5                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,split=1,delta=2
    16                           	psect	text1,local,class=CODE,merge=1,delta=2
    17                           	psect	text2,local,class=CODE,merge=1,delta=2
    18                           	psect	text3,local,class=CODE,merge=1,delta=2
    19                           	psect	text4,local,class=CODE,merge=1,delta=2
    20                           	psect	text5,local,class=CODE,merge=1,delta=2
    21                           	psect	text6,local,class=CODE,merge=1,delta=2
    22                           	psect	text7,local,class=CODE,merge=1,delta=2
    23                           	psect	text8,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text11,local,class=CODE,merge=1,delta=2
    27                           	psect	text12,local,class=CODE,merge=1,delta=2
    28                           	psect	text13,local,class=CODE,merge=1,delta=2
    29                           	psect	text14,local,class=CODE,merge=1,delta=2
    30                           	psect	text15,local,class=CODE,merge=1,delta=2
    31                           	psect	text16,local,class=CODE,merge=1,delta=2
    32                           	psect	text17,local,class=CODE,merge=1,delta=2
    33                           	psect	text18,local,class=CODE,merge=1,delta=2
    34                           	psect	text19,local,class=CODE,merge=1,delta=2
    35                           	psect	text20,local,class=CODE,merge=1,delta=2
    36                           	psect	text21,local,class=CODE,merge=1,delta=2
    37                           	psect	text22,local,class=CODE,merge=1,delta=2
    38                           	psect	text23,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text24,local,class=CODE,merge=1,delta=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2
    42                           	psect	text26,local,class=CODE,merge=1,delta=2
    43                           	psect	text27,local,class=CODE,merge=1,delta=2
    44                           	psect	text28,local,class=CODE,merge=1,delta=2
    45                           	psect	functab,global,reloc=256,class=CODE,delta=2
    46                           	dabs	1,0x7E,2
    47  0000                     
    48                           ; Version 1.41
    49                           ; Generated 25/01/2017 GMT
    50                           ; 
    51                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    52                           ; All rights reserved.
    53                           ; 
    54                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    55                           ; 
    56                           ; Redistribution and use in source and binary forms, with or without modification, are
    57                           ; permitted provided that the following conditions are met:
    58                           ; 
    59                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    60                           ;        conditions and the following disclaimer.
    61                           ; 
    62                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    63                           ;        of conditions and the following disclaimer in the documentation and/or other
    64                           ;        materials provided with the distribution.
    65                           ; 
    66                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    67                           ;        software without specific prior written permission.
    68                           ; 
    69                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    70                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    71                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    72                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    73                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    74                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    75                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    76                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    77                           ; 
    78                           ; 
    79                           ; Code-generator required, PIC16F882 Definitions
    80                           ; 
    81                           ; SFR Addresses
    82  0000                     	;# 
    83  0001                     	;# 
    84  0002                     	;# 
    85  0003                     	;# 
    86  0004                     	;# 
    87  0005                     	;# 
    88  0006                     	;# 
    89  0007                     	;# 
    90  0009                     	;# 
    91  000A                     	;# 
    92  000B                     	;# 
    93  000C                     	;# 
    94  000D                     	;# 
    95  000E                     	;# 
    96  000E                     	;# 
    97  000F                     	;# 
    98  0010                     	;# 
    99  0011                     	;# 
   100  0012                     	;# 
   101  0013                     	;# 
   102  0014                     	;# 
   103  0015                     	;# 
   104  0015                     	;# 
   105  0016                     	;# 
   106  0017                     	;# 
   107  0018                     	;# 
   108  0019                     	;# 
   109  001A                     	;# 
   110  001B                     	;# 
   111  001B                     	;# 
   112  001C                     	;# 
   113  001D                     	;# 
   114  001E                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  0087                     	;# 
   120  0089                     	;# 
   121  008C                     	;# 
   122  008D                     	;# 
   123  008E                     	;# 
   124  008F                     	;# 
   125  0090                     	;# 
   126  0091                     	;# 
   127  0092                     	;# 
   128  0093                     	;# 
   129  0093                     	;# 
   130  0093                     	;# 
   131  0094                     	;# 
   132  0095                     	;# 
   133  0096                     	;# 
   134  0097                     	;# 
   135  0098                     	;# 
   136  0099                     	;# 
   137  009A                     	;# 
   138  009B                     	;# 
   139  009C                     	;# 
   140  009D                     	;# 
   141  009E                     	;# 
   142  009F                     	;# 
   143  0105                     	;# 
   144  0107                     	;# 
   145  0108                     	;# 
   146  0109                     	;# 
   147  010C                     	;# 
   148  010C                     	;# 
   149  010D                     	;# 
   150  010E                     	;# 
   151  010F                     	;# 
   152  0185                     	;# 
   153  0187                     	;# 
   154  0188                     	;# 
   155  0189                     	;# 
   156  018C                     	;# 
   157  018D                     	;# 
   158  0000                     	;# 
   159  0001                     	;# 
   160  0002                     	;# 
   161  0003                     	;# 
   162  0004                     	;# 
   163  0005                     	;# 
   164  0006                     	;# 
   165  0007                     	;# 
   166  0009                     	;# 
   167  000A                     	;# 
   168  000B                     	;# 
   169  000C                     	;# 
   170  000D                     	;# 
   171  000E                     	;# 
   172  000E                     	;# 
   173  000F                     	;# 
   174  0010                     	;# 
   175  0011                     	;# 
   176  0012                     	;# 
   177  0013                     	;# 
   178  0014                     	;# 
   179  0015                     	;# 
   180  0015                     	;# 
   181  0016                     	;# 
   182  0017                     	;# 
   183  0018                     	;# 
   184  0019                     	;# 
   185  001A                     	;# 
   186  001B                     	;# 
   187  001B                     	;# 
   188  001C                     	;# 
   189  001D                     	;# 
   190  001E                     	;# 
   191  001F                     	;# 
   192  0081                     	;# 
   193  0085                     	;# 
   194  0086                     	;# 
   195  0087                     	;# 
   196  0089                     	;# 
   197  008C                     	;# 
   198  008D                     	;# 
   199  008E                     	;# 
   200  008F                     	;# 
   201  0090                     	;# 
   202  0091                     	;# 
   203  0092                     	;# 
   204  0093                     	;# 
   205  0093                     	;# 
   206  0093                     	;# 
   207  0094                     	;# 
   208  0095                     	;# 
   209  0096                     	;# 
   210  0097                     	;# 
   211  0098                     	;# 
   212  0099                     	;# 
   213  009A                     	;# 
   214  009B                     	;# 
   215  009C                     	;# 
   216  009D                     	;# 
   217  009E                     	;# 
   218  009F                     	;# 
   219  0105                     	;# 
   220  0107                     	;# 
   221  0108                     	;# 
   222  0109                     	;# 
   223  010C                     	;# 
   224  010C                     	;# 
   225  010D                     	;# 
   226  010E                     	;# 
   227  010F                     	;# 
   228  0185                     	;# 
   229  0187                     	;# 
   230  0188                     	;# 
   231  0189                     	;# 
   232  018C                     	;# 
   233  018D                     	;# 
   234  0000                     	;# 
   235  0001                     	;# 
   236  0002                     	;# 
   237  0003                     	;# 
   238  0004                     	;# 
   239  0005                     	;# 
   240  0006                     	;# 
   241  0007                     	;# 
   242  0009                     	;# 
   243  000A                     	;# 
   244  000B                     	;# 
   245  000C                     	;# 
   246  000D                     	;# 
   247  000E                     	;# 
   248  000E                     	;# 
   249  000F                     	;# 
   250  0010                     	;# 
   251  0011                     	;# 
   252  0012                     	;# 
   253  0013                     	;# 
   254  0014                     	;# 
   255  0015                     	;# 
   256  0015                     	;# 
   257  0016                     	;# 
   258  0017                     	;# 
   259  0018                     	;# 
   260  0019                     	;# 
   261  001A                     	;# 
   262  001B                     	;# 
   263  001B                     	;# 
   264  001C                     	;# 
   265  001D                     	;# 
   266  001E                     	;# 
   267  001F                     	;# 
   268  0081                     	;# 
   269  0085                     	;# 
   270  0086                     	;# 
   271  0087                     	;# 
   272  0089                     	;# 
   273  008C                     	;# 
   274  008D                     	;# 
   275  008E                     	;# 
   276  008F                     	;# 
   277  0090                     	;# 
   278  0091                     	;# 
   279  0092                     	;# 
   280  0093                     	;# 
   281  0093                     	;# 
   282  0093                     	;# 
   283  0094                     	;# 
   284  0095                     	;# 
   285  0096                     	;# 
   286  0097                     	;# 
   287  0098                     	;# 
   288  0099                     	;# 
   289  009A                     	;# 
   290  009B                     	;# 
   291  009C                     	;# 
   292  009D                     	;# 
   293  009E                     	;# 
   294  009F                     	;# 
   295  0105                     	;# 
   296  0107                     	;# 
   297  0108                     	;# 
   298  0109                     	;# 
   299  010C                     	;# 
   300  010C                     	;# 
   301  010D                     	;# 
   302  010E                     	;# 
   303  010F                     	;# 
   304  0185                     	;# 
   305  0187                     	;# 
   306  0188                     	;# 
   307  0189                     	;# 
   308  018C                     	;# 
   309  018D                     	;# 
   310  0000                     	;# 
   311  0001                     	;# 
   312  0002                     	;# 
   313  0003                     	;# 
   314  0004                     	;# 
   315  0005                     	;# 
   316  0006                     	;# 
   317  0007                     	;# 
   318  0009                     	;# 
   319  000A                     	;# 
   320  000B                     	;# 
   321  000C                     	;# 
   322  000D                     	;# 
   323  000E                     	;# 
   324  000E                     	;# 
   325  000F                     	;# 
   326  0010                     	;# 
   327  0011                     	;# 
   328  0012                     	;# 
   329  0013                     	;# 
   330  0014                     	;# 
   331  0015                     	;# 
   332  0015                     	;# 
   333  0016                     	;# 
   334  0017                     	;# 
   335  0018                     	;# 
   336  0019                     	;# 
   337  001A                     	;# 
   338  001B                     	;# 
   339  001B                     	;# 
   340  001C                     	;# 
   341  001D                     	;# 
   342  001E                     	;# 
   343  001F                     	;# 
   344  0081                     	;# 
   345  0085                     	;# 
   346  0086                     	;# 
   347  0087                     	;# 
   348  0089                     	;# 
   349  008C                     	;# 
   350  008D                     	;# 
   351  008E                     	;# 
   352  008F                     	;# 
   353  0090                     	;# 
   354  0091                     	;# 
   355  0092                     	;# 
   356  0093                     	;# 
   357  0093                     	;# 
   358  0093                     	;# 
   359  0094                     	;# 
   360  0095                     	;# 
   361  0096                     	;# 
   362  0097                     	;# 
   363  0098                     	;# 
   364  0099                     	;# 
   365  009A                     	;# 
   366  009B                     	;# 
   367  009C                     	;# 
   368  009D                     	;# 
   369  009E                     	;# 
   370  009F                     	;# 
   371  0105                     	;# 
   372  0107                     	;# 
   373  0108                     	;# 
   374  0109                     	;# 
   375  010C                     	;# 
   376  010C                     	;# 
   377  010D                     	;# 
   378  010E                     	;# 
   379  010F                     	;# 
   380  0185                     	;# 
   381  0187                     	;# 
   382  0188                     	;# 
   383  0189                     	;# 
   384  018C                     	;# 
   385  018D                     	;# 
   386  0000                     	;# 
   387  0001                     	;# 
   388  0002                     	;# 
   389  0003                     	;# 
   390  0004                     	;# 
   391  0005                     	;# 
   392  0006                     	;# 
   393  0007                     	;# 
   394  0009                     	;# 
   395  000A                     	;# 
   396  000B                     	;# 
   397  000C                     	;# 
   398  000D                     	;# 
   399  000E                     	;# 
   400  000E                     	;# 
   401  000F                     	;# 
   402  0010                     	;# 
   403  0011                     	;# 
   404  0012                     	;# 
   405  0013                     	;# 
   406  0014                     	;# 
   407  0015                     	;# 
   408  0015                     	;# 
   409  0016                     	;# 
   410  0017                     	;# 
   411  0018                     	;# 
   412  0019                     	;# 
   413  001A                     	;# 
   414  001B                     	;# 
   415  001B                     	;# 
   416  001C                     	;# 
   417  001D                     	;# 
   418  001E                     	;# 
   419  001F                     	;# 
   420  0081                     	;# 
   421  0085                     	;# 
   422  0086                     	;# 
   423  0087                     	;# 
   424  0089                     	;# 
   425  008C                     	;# 
   426  008D                     	;# 
   427  008E                     	;# 
   428  008F                     	;# 
   429  0090                     	;# 
   430  0091                     	;# 
   431  0092                     	;# 
   432  0093                     	;# 
   433  0093                     	;# 
   434  0093                     	;# 
   435  0094                     	;# 
   436  0095                     	;# 
   437  0096                     	;# 
   438  0097                     	;# 
   439  0098                     	;# 
   440  0099                     	;# 
   441  009A                     	;# 
   442  009B                     	;# 
   443  009C                     	;# 
   444  009D                     	;# 
   445  009E                     	;# 
   446  009F                     	;# 
   447  0105                     	;# 
   448  0107                     	;# 
   449  0108                     	;# 
   450  0109                     	;# 
   451  010C                     	;# 
   452  010C                     	;# 
   453  010D                     	;# 
   454  010E                     	;# 
   455  010F                     	;# 
   456  0185                     	;# 
   457  0187                     	;# 
   458  0188                     	;# 
   459  0189                     	;# 
   460  018C                     	;# 
   461  018D                     	;# 
   462                           
   463                           	psect	idataCOMMON
   464  06FD                     __pidataCOMMON:	
   465                           
   466                           ;initializer for _ptrFinishBuffer
   467  06FD  3401               	retlw	low (fp__FinishBuffer-i1fpbase)
   468                           
   469                           	psect	nvBANK0
   470  005C                     __pnvBANK0:	
   471  005C                     _ECU_ID:	
   472  005C                     	ds	1
   473  0013                     _SSPBUF	set	19
   474  000D                     _PIR2bits	set	13
   475  0014                     _SSPCON	set	20
   476  0006                     _PORTB	set	6
   477  0019                     _TXREG	set	25
   478  000C                     _PIR1bits	set	12
   479  001A                     _RCREG	set	26
   480  001E                     _ADRESH	set	30
   481  001F                     _ADCON0	set	31
   482  0038                     _RC0	set	56
   483  0065                     _RCIF	set	101
   484  00C4                     _CREN	set	196
   485  005F                     _GIE	set	95
   486  005E                     _PEIE	set	94
   487  00C7                     _SPEN	set	199
   488  0093                     _SSPADD	set	147
   489  0091                     _SSPCON2	set	145
   490  0094                     _SSPSTAT	set	148
   491  0087                     _TRISCbits	set	135
   492  0099                     _SPBRG	set	153
   493  009E                     _ADRESL	set	158
   494  0095                     _WPUB	set	149
   495  0086                     _TRISB	set	134
   496  0081                     _OPTION_REGbits	set	129
   497  048B                     _RCEN	set	1163
   498  04A0                     _BF	set	1184
   499  048C                     _ACKEN	set	1164
   500  048D                     _ACKDT	set	1165
   501  0489                     _RSEN	set	1161
   502  048A                     _PEN	set	1162
   503  0488                     _SEN	set	1160
   504  0465                     _RCIE	set	1125
   505  04C5                     _TXEN	set	1221
   506  043F                     _TRISC7	set	1087
   507  043E                     _TRISC6	set	1086
   508  04C4                     _SYNC	set	1220
   509  04C2                     _BRGH	set	1218
   510  042B                     _TRISA3	set	1067
   511  0189                     _ANSELH	set	393
   512  0188                     _ANSEL	set	392
   513  0C43                     _ANS3	set	3139
   514                           
   515                           ; #config settings
   516  0000                     
   517                           	psect	cinit
   518  0011                     start_initialization:	
   519  0011                     __initialization:	
   520                           
   521                           ; Initialize objects allocated to COMMON
   522  0011  26FD               	fcall	__pidataCOMMON	;fetch initializer
   523  0012  00FD               	movwf	__pdataCOMMON& (0+127)
   524                           
   525                           ; Clear objects allocated to BANK1
   526  0013  1383               	bcf	3,7	;select IRP bank0
   527  0014  30B2               	movlw	low __pbssBANK1
   528  0015  0084               	movwf	4
   529  0016  30BE               	movlw	low (__pbssBANK1+12)
   530  0017  26D5               	fcall	clear_ram0
   531                           
   532                           ; Clear objects allocated to BANK0
   533  0018  304C               	movlw	low __pbssBANK0
   534  0019  0084               	movwf	4
   535  001A  305C               	movlw	low (__pbssBANK0+16)
   536  001B  26D5               	fcall	clear_ram0
   537                           
   538                           ; Clear objects allocated to COMMON
   539  001C  01FC               	clrf	__pbssCOMMON& (0+127)
   540  001D                     end_of_initialization:	
   541                           ;End of C runtime variable initialization code
   542                           
   543  001D                     __end_of__initialization:	
   544  001D  0183               	clrf	3
   545  001E  2908               	ljmp	_main	;jump to C main() function
   546                           
   547                           	psect	bssCOMMON
   548  007C                     __pbssCOMMON:	
   549  007C                     _RECEIVED_ECU_ID:	
   550  007C                     	ds	1
   551                           
   552                           	psect	dataCOMMON
   553  007D                     __pdataCOMMON:	
   554  007D                     _ptrFinishBuffer:	
   555  007D                     	ds	1
   556                           
   557                           	psect	bssBANK0
   558  004C                     __pbssBANK0:	
   559  004C                     get_average@OutPut:	
   560  004C                     	ds	2
   561  004E                     get_averageZ@OutPut:	
   562  004E                     	ds	2
   563  0050                     get_averageY@OutPut:	
   564  0050                     	ds	2
   565  0052                     get_averageX@OutPut:	
   566  0052                     	ds	2
   567  0054                     _AVG:	
   568  0054                     	ds	2
   569  0056                     _ZAVG:	
   570  0056                     	ds	2
   571  0058                     _YAVG:	
   572  0058                     	ds	2
   573  005A                     _XAVG:	
   574  005A                     	ds	2
   575                           
   576                           	psect	bssBANK1
   577  00B2                     __pbssBANK1:	
   578  00B2                     _Data_Buffer:	
   579  00B2                     	ds	12
   580                           
   581                           	psect	clrtext
   582  06D5                     clear_ram0:	
   583                           ;	Called with FSR containing the base address, and
   584                           ;	W with the last address+1
   585                           
   586  06D5  0064               	clrwdt	;clear the watchdog before getting into this loop
   587  06D6                     clrloop0:	
   588  06D6  0180               	clrf	0	;clear RAM location pointed to by FSR
   589  06D7  0A84               	incf	4,f	;increment pointer
   590  06D8  0604               	xorwf	4,w	;XOR with final address
   591  06D9  1903               	btfsc	3,2	;have we reached the end yet?
   592  06DA  3400               	retlw	0	;all done for this memory range, return
   593  06DB  0604               	xorwf	4,w	;XOR again to restore value
   594  06DC  2ED6               	goto	clrloop0	;do the next byte
   595                           
   596                           	psect	cstackBANK1
   597  00A0                     __pcstackBANK1:	
   598  00A0                     main@id:	
   599                           
   600                           ; 2 bytes @ 0x0
   601  00A0                     	ds	2
   602  00A2                     main@pow:	
   603                           
   604                           ; 2 bytes @ 0x2
   605  00A2                     	ds	2
   606  00A4                     main@bw_rate:	
   607                           
   608                           ; 2 bytes @ 0x4
   609  00A4                     	ds	2
   610  00A6                     main@XL:	
   611                           
   612                           ; 1 bytes @ 0x6
   613  00A6                     	ds	1
   614  00A7                     main@XH:	
   615                           
   616                           ; 1 bytes @ 0x7
   617  00A7                     	ds	1
   618  00A8                     main@YH:	
   619                           
   620                           ; 1 bytes @ 0x8
   621  00A8                     	ds	1
   622  00A9                     main@YL:	
   623                           
   624                           ; 1 bytes @ 0x9
   625  00A9                     	ds	1
   626  00AA                     main@ZH:	
   627                           
   628                           ; 1 bytes @ 0xA
   629  00AA                     	ds	1
   630  00AB                     main@ZL:	
   631                           
   632                           ; 1 bytes @ 0xB
   633  00AB                     	ds	1
   634  00AC                     main@X:	
   635                           
   636                           ; 2 bytes @ 0xC
   637  00AC                     	ds	2
   638  00AE                     main@Y:	
   639                           
   640                           ; 2 bytes @ 0xE
   641  00AE                     	ds	2
   642  00B0                     main@Z:	
   643                           
   644                           ; 2 bytes @ 0x10
   645  00B0                     	ds	2
   646                           
   647                           	psect	cstackCOMMON
   648  0070                     __pcstackCOMMON:	
   649  0070                     ?_FinishBuffer:	
   650  0070                     ?_UART_vidInit:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ?_I2CInit:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_ini_adxl345:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_I2CStart:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ?_I2CSend:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_I2CRestart:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_I2CRead:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_I2CAck:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_I2CNak:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?_I2CStop:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_UART_u8GetNodeID:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ?_Get_CRC8:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_RS845_ManageState:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ?_UART_vidSend:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0070                     ?_system_init:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     ?_main:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0070                     ?_UART_vidNewDataReceived:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0070                     ?_I2CWait:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     ?_Get_Tempreture:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     Get_CRC8@DataSize:	
   708                           ; 2 bytes @ 0x0
   709                           
   710  0070                     UART_vidSend@Len:	
   711                           ; 1 bytes @ 0x0
   712                           
   713                           
   714                           ; 2 bytes @ 0x0
   715  0070                     	ds	1
   716  0071                     ??_Get_CRC8:	
   717                           
   718                           ; 1 bytes @ 0x1
   719  0071                     	ds	1
   720  0072                     ??_Get_Tempreture:	
   721  0072                     ??_UART_vidSend:	
   722                           ; 1 bytes @ 0x2
   723                           
   724                           
   725                           ; 1 bytes @ 0x2
   726  0072                     	ds	1
   727  0073                     UART_vidSend@data:	
   728  0073                     Get_CRC8@Data:	
   729                           ; 1 bytes @ 0x3
   730                           
   731                           
   732                           ; 1 bytes @ 0x3
   733  0073                     	ds	1
   734  0074                     Get_CRC8@DataIndex:	
   735  0074                     UART_vidSend@UART_u16Index:	
   736                           ; 1 bytes @ 0x4
   737                           
   738                           
   739                           ; 2 bytes @ 0x4
   740  0074                     	ds	1
   741  0075                     Get_CRC8@bitIndex:	
   742                           
   743                           ; 1 bytes @ 0x5
   744  0075                     	ds	1
   745  0076                     ??_RS845_ManageState:	
   746  0076                     Get_CRC8@CRC:	
   747                           ; 1 bytes @ 0x6
   748                           
   749                           
   750                           ; 1 bytes @ 0x6
   751  0076                     	ds	3
   752  0079                     Get_Tempreture@Result:	
   753                           
   754                           ; 2 bytes @ 0x9
   755  0079                     	ds	2
   756  007B                     ??_FinishBuffer:	
   757                           
   758                           ; 1 bytes @ 0xB
   759  007B                     	ds	1
   760                           
   761                           	psect	cstackBANK0
   762  0020                     __pcstackBANK0:	
   763  0020                     ??_UART_vidNewDataReceived:	
   764                           
   765                           ; 1 bytes @ 0x0
   766  0020                     	ds	6
   767  0026                     ??_I2CInit:	
   768  0026                     ??_I2CStart:	
   769                           ; 1 bytes @ 0x6
   770                           
   771  0026                     ??_I2CSend:	
   772                           ; 1 bytes @ 0x6
   773                           
   774  0026                     ??_I2CRestart:	
   775                           ; 1 bytes @ 0x6
   776                           
   777  0026                     ??_I2CRead:	
   778                           ; 1 bytes @ 0x6
   779                           
   780  0026                     ??_I2CAck:	
   781                           ; 1 bytes @ 0x6
   782                           
   783  0026                     ??_I2CNak:	
   784                           ; 1 bytes @ 0x6
   785                           
   786  0026                     ??_I2CStop:	
   787                           ; 1 bytes @ 0x6
   788                           
   789  0026                     ??_UART_u8GetNodeID:	
   790                           ; 1 bytes @ 0x6
   791                           
   792  0026                     ??_system_init:	
   793                           ; 1 bytes @ 0x6
   794                           
   795  0026                     ??_I2CWait:	
   796                           ; 1 bytes @ 0x6
   797                           
   798  0026                     ?___lwdiv:	
   799                           ; 1 bytes @ 0x6
   800                           
   801  0026                     ?___lmul:	
   802                           ; 2 bytes @ 0x6
   803                           
   804  0026                     I2CSend@dat:	
   805                           ; 4 bytes @ 0x6
   806                           
   807  0026                     ___lwdiv@divisor:	
   808                           ; 1 bytes @ 0x6
   809                           
   810  0026                     ___lmul@multiplier:	
   811                           ; 2 bytes @ 0x6
   812                           
   813                           
   814                           ; 4 bytes @ 0x6
   815  0026                     	ds	1
   816  0027                     ??_UART_vidInit:	
   817  0027                     ?_E_Write:	
   818                           ; 1 bytes @ 0x7
   819                           
   820  0027                     I2CRead@temp:	
   821                           ; 1 bytes @ 0x7
   822                           
   823  0027                     E_Write@addr:	
   824                           ; 1 bytes @ 0x7
   825                           
   826                           
   827                           ; 2 bytes @ 0x7
   828  0027                     	ds	1
   829  0028                     ?_E_Read:	
   830  0028                     E_Read@addr:	
   831                           ; 1 bytes @ 0x8
   832                           
   833  0028                     ___lwdiv@dividend:	
   834                           ; 2 bytes @ 0x8
   835                           
   836                           
   837                           ; 2 bytes @ 0x8
   838  0028                     	ds	1
   839  0029                     E_Write@ch:	
   840                           
   841                           ; 1 bytes @ 0x9
   842  0029                     	ds	1
   843  002A                     ??_ini_adxl345:	
   844  002A                     ??_E_Read:	
   845                           ; 1 bytes @ 0xA
   846                           
   847  002A                     ??_E_Write:	
   848                           ; 1 bytes @ 0xA
   849                           
   850  002A                     ??___lwdiv:	
   851                           ; 1 bytes @ 0xA
   852                           
   853  002A                     ___lmul@multiplicand:	
   854                           ; 1 bytes @ 0xA
   855                           
   856                           
   857                           ; 4 bytes @ 0xA
   858  002A                     	ds	1
   859  002B                     E_Read@ch:	
   860  002B                     ___lwdiv@counter:	
   861                           ; 1 bytes @ 0xB
   862                           
   863                           
   864                           ; 1 bytes @ 0xB
   865  002B                     	ds	1
   866  002C                     ___lwdiv@quotient:	
   867                           
   868                           ; 2 bytes @ 0xC
   869  002C                     	ds	2
   870  002E                     ??___lmul:	
   871                           
   872                           ; 1 bytes @ 0xE
   873  002E                     	ds	1
   874  002F                     ___lmul@product:	
   875                           
   876                           ; 4 bytes @ 0xF
   877  002F                     	ds	4
   878  0033                     ?___aldiv:	
   879  0033                     ___aldiv@divisor:	
   880                           ; 4 bytes @ 0x13
   881                           
   882                           
   883                           ; 4 bytes @ 0x13
   884  0033                     	ds	4
   885  0037                     ___aldiv@dividend:	
   886                           
   887                           ; 4 bytes @ 0x17
   888  0037                     	ds	4
   889  003B                     ??___aldiv:	
   890                           
   891                           ; 1 bytes @ 0x1B
   892  003B                     	ds	1
   893  003C                     ___aldiv@counter:	
   894                           
   895                           ; 1 bytes @ 0x1C
   896  003C                     	ds	1
   897  003D                     ___aldiv@sign:	
   898                           
   899                           ; 1 bytes @ 0x1D
   900  003D                     	ds	1
   901  003E                     ___aldiv@quotient:	
   902                           
   903                           ; 4 bytes @ 0x1E
   904  003E                     	ds	4
   905  0042                     ?_get_averageX:	
   906  0042                     ?_get_averageY:	
   907                           ; 2 bytes @ 0x22
   908                           
   909  0042                     ?_get_averageZ:	
   910                           ; 2 bytes @ 0x22
   911                           
   912  0042                     ?_get_average:	
   913                           ; 2 bytes @ 0x22
   914                           
   915  0042                     get_averageX@Data:	
   916                           ; 2 bytes @ 0x22
   917                           
   918  0042                     get_averageY@Data:	
   919                           ; 2 bytes @ 0x22
   920                           
   921  0042                     get_averageZ@Data:	
   922                           ; 2 bytes @ 0x22
   923                           
   924  0042                     get_average@Data:	
   925                           ; 2 bytes @ 0x22
   926                           
   927                           
   928                           ; 2 bytes @ 0x22
   929  0042                     	ds	2
   930  0044                     ??_get_averageX:	
   931  0044                     ??_get_averageY:	
   932                           ; 1 bytes @ 0x24
   933                           
   934  0044                     ??_get_averageZ:	
   935                           ; 1 bytes @ 0x24
   936                           
   937  0044                     ??_get_average:	
   938                           ; 1 bytes @ 0x24
   939                           
   940                           
   941                           ; 1 bytes @ 0x24
   942  0044                     	ds	4
   943  0048                     ??_main:	
   944                           
   945                           ; 1 bytes @ 0x28
   946  0048                     	ds	4
   947                           
   948                           	psect	maintext
   949  0108                     __pmaintext:	
   950 ;;
   951 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
   952 ;;
   953 ;; *************** function _main *****************
   954 ;; Defined at:
   955 ;;		line 31 in file "main.c"
   956 ;; Parameters:    Size  Location     Type
   957 ;;		None
   958 ;; Auto vars:     Size  Location     Type
   959 ;;  Z               2   16[BANK1 ] short 
   960 ;;  Y               2   14[BANK1 ] short 
   961 ;;  X               2   12[BANK1 ] short 
   962 ;;  bw_rate         2    4[BANK1 ] int 
   963 ;;  pow             2    2[BANK1 ] int 
   964 ;;  id              2    0[BANK1 ] int 
   965 ;;  ZL              1   11[BANK1 ] unsigned char 
   966 ;;  ZH              1   10[BANK1 ] unsigned char 
   967 ;;  YL              1    9[BANK1 ] unsigned char 
   968 ;;  YH              1    8[BANK1 ] unsigned char 
   969 ;;  XH              1    7[BANK1 ] unsigned char 
   970 ;;  XL              1    6[BANK1 ] unsigned char 
   971 ;; Return value:  Size  Location     Type
   972 ;;                  1    wreg      void 
   973 ;; Registers used:
   974 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   975 ;; Tracked objects:
   976 ;;		On entry : B00/0
   977 ;;		On exit  : 0/0
   978 ;;		Unchanged: 0/0
   979 ;; Data sizes:     COMMON   BANK0   BANK1
   980 ;;      Params:         0       0       0
   981 ;;      Locals:         0       0      18
   982 ;;      Temps:          0       4       0
   983 ;;      Totals:         0       4      18
   984 ;;Total ram usage:       22 bytes
   985 ;; Hardware stack levels required when called:    7
   986 ;; This function calls:
   987 ;;		_E_Read
   988 ;;		_I2CAck
   989 ;;		_I2CInit
   990 ;;		_I2CNak
   991 ;;		_I2CRead
   992 ;;		_I2CRestart
   993 ;;		_I2CSend
   994 ;;		_I2CStart
   995 ;;		_I2CStop
   996 ;;		_UART_vidInit
   997 ;;		___lwdiv
   998 ;;		_get_average
   999 ;;		_get_averageX
  1000 ;;		_get_averageY
  1001 ;;		_get_averageZ
  1002 ;;		_ini_adxl345
  1003 ;;		_system_init
  1004 ;; This function is called by:
  1005 ;;		Startup code after reset
  1006 ;; This function uses a non-reentrant model
  1007 ;;
  1008                           
  1009                           
  1010                           ;psect for function _main
  1011  0108                     _main:	
  1012                           
  1013                           ;main.c: 33: int id, pow, bw_rate;
  1014                           ;main.c: 34: char XL,XH,YH,YL,ZH,ZL;
  1015                           ;main.c: 35: short X, Y, Z;
  1016                           ;main.c: 37: system_init();
  1017                           
  1018                           ;incstack = 0
  1019                           ; Regs used in _main: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1020  0108  2642               	fcall	_system_init
  1021                           
  1022                           ;main.c: 38: UART_vidInit();
  1023  0109  2627               	fcall	_UART_vidInit
  1024                           
  1025                           ;main.c: 41: I2CInit();
  1026  010A  2684               	fcall	_I2CInit
  1027                           
  1028                           ;main.c: 43: ini_adxl345();
  1029  010B  24A6               	fcall	_ini_adxl345
  1030                           
  1031                           ;main.c: 45: id = E_Read(0);
  1032  010C  3000               	movlw	0
  1033  010D  1283               	bcf	3,5	;RP0=0, select bank0
  1034  010E  1303               	bcf	3,6	;RP1=0, select bank0
  1035  010F  00A8               	movwf	E_Read@addr
  1036  0110  00A9               	movwf	E_Read@addr+1
  1037  0111  265B               	fcall	_E_Read
  1038  0112  1283               	bcf	3,5	;RP0=0, select bank0
  1039  0113  1303               	bcf	3,6	;RP1=0, select bank0
  1040  0114  00C8               	movwf	??_main
  1041  0115  01C9               	clrf	??_main+1
  1042  0116  0848               	movf	??_main,w
  1043  0117  1683               	bsf	3,5	;RP0=1, select bank1
  1044  0118  1303               	bcf	3,6	;RP1=0, select bank1
  1045  0119  00A0               	movwf	main@id^(0+128)
  1046  011A  1283               	bcf	3,5	;RP0=0, select bank0
  1047  011B  1303               	bcf	3,6	;RP1=0, select bank0
  1048  011C  0849               	movf	??_main+1,w
  1049  011D  1683               	bsf	3,5	;RP0=1, select bank1
  1050  011E  1303               	bcf	3,6	;RP1=0, select bank1
  1051  011F  00A1               	movwf	(main@id+1)^(0+128)
  1052                           
  1053                           ;main.c: 46: _delay((unsigned long)((10)*(20000000/4000.0)));
  1054  0120  3041               	movlw	65
  1055  0121  1283               	bcf	3,5	;RP0=0, select bank0
  1056  0122  1303               	bcf	3,6	;RP1=0, select bank0
  1057  0123  00C9               	movwf	??_main+1
  1058  0124  30EE               	movlw	238
  1059  0125  00C8               	movwf	??_main
  1060  0126                     u1387:	
  1061  0126  0BC8               	decfsz	??_main,f
  1062  0127  2926               	goto	u1387
  1063  0128  0BC9               	decfsz	??_main+1,f
  1064  0129  2926               	goto	u1387
  1065                           
  1066                           ;main.c: 47: pow = E_Read(0x2D);
  1067  012A  302D               	movlw	45
  1068  012B  1283               	bcf	3,5	;RP0=0, select bank0
  1069  012C  1303               	bcf	3,6	;RP1=0, select bank0
  1070  012D  00A8               	movwf	E_Read@addr
  1071  012E  3000               	movlw	0
  1072  012F  00A9               	movwf	E_Read@addr+1
  1073  0130  265B               	fcall	_E_Read
  1074  0131  1283               	bcf	3,5	;RP0=0, select bank0
  1075  0132  1303               	bcf	3,6	;RP1=0, select bank0
  1076  0133  00C8               	movwf	??_main
  1077  0134  01C9               	clrf	??_main+1
  1078  0135  0848               	movf	??_main,w
  1079  0136  1683               	bsf	3,5	;RP0=1, select bank1
  1080  0137  1303               	bcf	3,6	;RP1=0, select bank1
  1081  0138  00A2               	movwf	main@pow^(0+128)
  1082  0139  1283               	bcf	3,5	;RP0=0, select bank0
  1083  013A  1303               	bcf	3,6	;RP1=0, select bank0
  1084  013B  0849               	movf	??_main+1,w
  1085  013C  1683               	bsf	3,5	;RP0=1, select bank1
  1086  013D  1303               	bcf	3,6	;RP1=0, select bank1
  1087  013E  00A3               	movwf	(main@pow+1)^(0+128)
  1088                           
  1089                           ;main.c: 48: _delay((unsigned long)((10)*(20000000/4000.0)));
  1090  013F  3041               	movlw	65
  1091  0140  1283               	bcf	3,5	;RP0=0, select bank0
  1092  0141  1303               	bcf	3,6	;RP1=0, select bank0
  1093  0142  00C9               	movwf	??_main+1
  1094  0143  30EE               	movlw	238
  1095  0144  00C8               	movwf	??_main
  1096  0145                     u1397:	
  1097  0145  0BC8               	decfsz	??_main,f
  1098  0146  2945               	goto	u1397
  1099  0147  0BC9               	decfsz	??_main+1,f
  1100  0148  2945               	goto	u1397
  1101                           
  1102                           ;main.c: 49: bw_rate = E_Read(0x2C);
  1103  0149  302C               	movlw	44
  1104  014A  1283               	bcf	3,5	;RP0=0, select bank0
  1105  014B  1303               	bcf	3,6	;RP1=0, select bank0
  1106  014C  00A8               	movwf	E_Read@addr
  1107  014D  3000               	movlw	0
  1108  014E  00A9               	movwf	E_Read@addr+1
  1109  014F  265B               	fcall	_E_Read
  1110  0150  1283               	bcf	3,5	;RP0=0, select bank0
  1111  0151  1303               	bcf	3,6	;RP1=0, select bank0
  1112  0152  00C8               	movwf	??_main
  1113  0153  01C9               	clrf	??_main+1
  1114  0154  0848               	movf	??_main,w
  1115  0155  1683               	bsf	3,5	;RP0=1, select bank1
  1116  0156  1303               	bcf	3,6	;RP1=0, select bank1
  1117  0157  00A4               	movwf	main@bw_rate^(0+128)
  1118  0158  1283               	bcf	3,5	;RP0=0, select bank0
  1119  0159  1303               	bcf	3,6	;RP1=0, select bank0
  1120  015A  0849               	movf	??_main+1,w
  1121  015B  1683               	bsf	3,5	;RP0=1, select bank1
  1122  015C  1303               	bcf	3,6	;RP1=0, select bank1
  1123  015D  00A5               	movwf	(main@bw_rate+1)^(0+128)
  1124  015E                     l1727:	
  1125                           ;main.c: 51: while(1)
  1126                           
  1127                           
  1128                           ;main.c: 52: {
  1129                           ;main.c: 53: X = Y = Z = 0;
  1130  015E  1683               	bsf	3,5	;RP0=1, select bank1
  1131  015F  1303               	bcf	3,6	;RP1=0, select bank1
  1132  0160  01B0               	clrf	main@Z^(0+128)
  1133  0161  01B1               	clrf	(main@Z+1)^(0+128)
  1134  0162  01AE               	clrf	main@Y^(0+128)
  1135  0163  01AF               	clrf	(main@Y+1)^(0+128)
  1136  0164  01AC               	clrf	main@X^(0+128)
  1137  0165  01AD               	clrf	(main@X+1)^(0+128)
  1138                           
  1139                           ;main.c: 55: I2CStart();
  1140  0166  26F1               	fcall	_I2CStart
  1141                           
  1142                           ;main.c: 56: I2CSend(0xA6);
  1143  0167  30A6               	movlw	166
  1144  0168  26C1               	fcall	_I2CSend
  1145                           
  1146                           ;main.c: 57: I2CSend(50);
  1147  0169  3032               	movlw	50
  1148  016A  26C1               	fcall	_I2CSend
  1149                           
  1150                           ;main.c: 58: I2CRestart();
  1151  016B  26F7               	fcall	_I2CRestart
  1152                           
  1153                           ;main.c: 59: I2CSend(0xA7);
  1154  016C  30A7               	movlw	167
  1155  016D  26C1               	fcall	_I2CSend
  1156                           
  1157                           ;main.c: 60: XL = I2CRead();
  1158  016E  2697               	fcall	_I2CRead
  1159  016F  1283               	bcf	3,5	;RP0=0, select bank0
  1160  0170  1303               	bcf	3,6	;RP1=0, select bank0
  1161  0171  00C8               	movwf	??_main
  1162  0172  0848               	movf	??_main,w
  1163  0173  1683               	bsf	3,5	;RP0=1, select bank1
  1164  0174  1303               	bcf	3,6	;RP1=0, select bank1
  1165  0175  00A6               	movwf	main@XL^(0+128)
  1166                           
  1167                           ;main.c: 61: I2CAck();
  1168  0176  26DD               	fcall	_I2CAck
  1169                           
  1170                           ;main.c: 62: XH = I2CRead();
  1171  0177  2697               	fcall	_I2CRead
  1172  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1173  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1174  017A  00C8               	movwf	??_main
  1175  017B  0848               	movf	??_main,w
  1176  017C  1683               	bsf	3,5	;RP0=1, select bank1
  1177  017D  1303               	bcf	3,6	;RP1=0, select bank1
  1178  017E  00A7               	movwf	main@XH^(0+128)
  1179                           
  1180                           ;main.c: 63: I2CAck();
  1181  017F  26DD               	fcall	_I2CAck
  1182                           
  1183                           ;main.c: 64: YL = I2CRead();
  1184  0180  2697               	fcall	_I2CRead
  1185  0181  1283               	bcf	3,5	;RP0=0, select bank0
  1186  0182  1303               	bcf	3,6	;RP1=0, select bank0
  1187  0183  00C8               	movwf	??_main
  1188  0184  0848               	movf	??_main,w
  1189  0185  1683               	bsf	3,5	;RP0=1, select bank1
  1190  0186  1303               	bcf	3,6	;RP1=0, select bank1
  1191  0187  00A9               	movwf	main@YL^(0+128)
  1192                           
  1193                           ;main.c: 65: I2CAck();
  1194  0188  26DD               	fcall	_I2CAck
  1195                           
  1196                           ;main.c: 66: YH = I2CRead();
  1197  0189  2697               	fcall	_I2CRead
  1198  018A  1283               	bcf	3,5	;RP0=0, select bank0
  1199  018B  1303               	bcf	3,6	;RP1=0, select bank0
  1200  018C  00C8               	movwf	??_main
  1201  018D  0848               	movf	??_main,w
  1202  018E  1683               	bsf	3,5	;RP0=1, select bank1
  1203  018F  1303               	bcf	3,6	;RP1=0, select bank1
  1204  0190  00A8               	movwf	main@YH^(0+128)
  1205                           
  1206                           ;main.c: 67: I2CAck();
  1207  0191  26DD               	fcall	_I2CAck
  1208                           
  1209                           ;main.c: 68: ZL = I2CRead();
  1210  0192  2697               	fcall	_I2CRead
  1211  0193  1283               	bcf	3,5	;RP0=0, select bank0
  1212  0194  1303               	bcf	3,6	;RP1=0, select bank0
  1213  0195  00C8               	movwf	??_main
  1214  0196  0848               	movf	??_main,w
  1215  0197  1683               	bsf	3,5	;RP0=1, select bank1
  1216  0198  1303               	bcf	3,6	;RP1=0, select bank1
  1217  0199  00AB               	movwf	main@ZL^(0+128)
  1218                           
  1219                           ;main.c: 69: I2CAck();
  1220  019A  26DD               	fcall	_I2CAck
  1221                           
  1222                           ;main.c: 70: ZH = I2CRead();
  1223  019B  2697               	fcall	_I2CRead
  1224  019C  1283               	bcf	3,5	;RP0=0, select bank0
  1225  019D  1303               	bcf	3,6	;RP1=0, select bank0
  1226  019E  00C8               	movwf	??_main
  1227  019F  0848               	movf	??_main,w
  1228  01A0  1683               	bsf	3,5	;RP0=1, select bank1
  1229  01A1  1303               	bcf	3,6	;RP1=0, select bank1
  1230  01A2  00AA               	movwf	main@ZH^(0+128)
  1231                           
  1232                           ;main.c: 71: I2CNak();
  1233  01A3  26E4               	fcall	_I2CNak
  1234                           
  1235                           ;main.c: 72: I2CStop();
  1236  01A4  26EB               	fcall	_I2CStop
  1237                           
  1238                           ;main.c: 74: X = ((XH<<8) | XL);
  1239  01A5  1683               	bsf	3,5	;RP0=1, select bank1
  1240  01A6  1303               	bcf	3,6	;RP1=0, select bank1
  1241  01A7  0826               	movf	main@XL^(0+128),w
  1242  01A8  1283               	bcf	3,5	;RP0=0, select bank0
  1243  01A9  1303               	bcf	3,6	;RP1=0, select bank0
  1244  01AA  00C8               	movwf	??_main
  1245  01AB  01C9               	clrf	??_main+1
  1246  01AC  1683               	bsf	3,5	;RP0=1, select bank1
  1247  01AD  1303               	bcf	3,6	;RP1=0, select bank1
  1248  01AE  0827               	movf	main@XH^(0+128),w
  1249  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  1250  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  1251  01B1  00CA               	movwf	??_main+2
  1252  01B2  01CB               	clrf	??_main+3
  1253  01B3  084A               	movf	??_main+2,w
  1254  01B4  00CB               	movwf	??_main+3
  1255  01B5  01CA               	clrf	??_main+2
  1256  01B6  0848               	movf	??_main,w
  1257  01B7  044A               	iorwf	??_main+2,w
  1258  01B8  1683               	bsf	3,5	;RP0=1, select bank1
  1259  01B9  1303               	bcf	3,6	;RP1=0, select bank1
  1260  01BA  00AC               	movwf	main@X^(0+128)
  1261  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  1262  01BC  1303               	bcf	3,6	;RP1=0, select bank0
  1263  01BD  0849               	movf	??_main+1,w
  1264  01BE  044B               	iorwf	??_main+3,w
  1265  01BF  1683               	bsf	3,5	;RP0=1, select bank1
  1266  01C0  1303               	bcf	3,6	;RP1=0, select bank1
  1267  01C1  00AD               	movwf	(main@X+1)^(0+128)
  1268                           
  1269                           ;main.c: 75: Y = ((YH<<8) | YL);
  1270  01C2  0829               	movf	main@YL^(0+128),w
  1271  01C3  1283               	bcf	3,5	;RP0=0, select bank0
  1272  01C4  1303               	bcf	3,6	;RP1=0, select bank0
  1273  01C5  00C8               	movwf	??_main
  1274  01C6  01C9               	clrf	??_main+1
  1275  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  1276  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  1277  01C9  0828               	movf	main@YH^(0+128),w
  1278  01CA  1283               	bcf	3,5	;RP0=0, select bank0
  1279  01CB  1303               	bcf	3,6	;RP1=0, select bank0
  1280  01CC  00CA               	movwf	??_main+2
  1281  01CD  01CB               	clrf	??_main+3
  1282  01CE  084A               	movf	??_main+2,w
  1283  01CF  00CB               	movwf	??_main+3
  1284  01D0  01CA               	clrf	??_main+2
  1285  01D1  0848               	movf	??_main,w
  1286  01D2  044A               	iorwf	??_main+2,w
  1287  01D3  1683               	bsf	3,5	;RP0=1, select bank1
  1288  01D4  1303               	bcf	3,6	;RP1=0, select bank1
  1289  01D5  00AE               	movwf	main@Y^(0+128)
  1290  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  1291  01D7  1303               	bcf	3,6	;RP1=0, select bank0
  1292  01D8  0849               	movf	??_main+1,w
  1293  01D9  044B               	iorwf	??_main+3,w
  1294  01DA  1683               	bsf	3,5	;RP0=1, select bank1
  1295  01DB  1303               	bcf	3,6	;RP1=0, select bank1
  1296  01DC  00AF               	movwf	(main@Y+1)^(0+128)
  1297                           
  1298                           ;main.c: 76: Z = ((ZH<<8) | ZL);
  1299  01DD  082B               	movf	main@ZL^(0+128),w
  1300  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  1301  01DF  1303               	bcf	3,6	;RP1=0, select bank0
  1302  01E0  00C8               	movwf	??_main
  1303  01E1  01C9               	clrf	??_main+1
  1304  01E2  1683               	bsf	3,5	;RP0=1, select bank1
  1305  01E3  1303               	bcf	3,6	;RP1=0, select bank1
  1306  01E4  082A               	movf	main@ZH^(0+128),w
  1307  01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1308  01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1309  01E7  00CA               	movwf	??_main+2
  1310  01E8  01CB               	clrf	??_main+3
  1311  01E9  084A               	movf	??_main+2,w
  1312  01EA  00CB               	movwf	??_main+3
  1313  01EB  01CA               	clrf	??_main+2
  1314  01EC  0848               	movf	??_main,w
  1315  01ED  044A               	iorwf	??_main+2,w
  1316  01EE  1683               	bsf	3,5	;RP0=1, select bank1
  1317  01EF  1303               	bcf	3,6	;RP1=0, select bank1
  1318  01F0  00B0               	movwf	main@Z^(0+128)
  1319  01F1  1283               	bcf	3,5	;RP0=0, select bank0
  1320  01F2  1303               	bcf	3,6	;RP1=0, select bank0
  1321  01F3  0849               	movf	??_main+1,w
  1322  01F4  044B               	iorwf	??_main+3,w
  1323  01F5  1683               	bsf	3,5	;RP0=1, select bank1
  1324  01F6  1303               	bcf	3,6	;RP1=0, select bank1
  1325  01F7  00B1               	movwf	(main@Z+1)^(0+128)
  1326                           
  1327                           ;main.c: 79: XAVG = get_averageX(X);
  1328  01F8  082D               	movf	(main@X+1)^(0+128),w
  1329  01F9  1283               	bcf	3,5	;RP0=0, select bank0
  1330  01FA  1303               	bcf	3,6	;RP1=0, select bank0
  1331  01FB  00C3               	movwf	get_averageX@Data+1
  1332  01FC  1683               	bsf	3,5	;RP0=1, select bank1
  1333  01FD  1303               	bcf	3,6	;RP1=0, select bank1
  1334  01FE  082C               	movf	main@X^(0+128),w
  1335  01FF  1283               	bcf	3,5	;RP0=0, select bank0
  1336  0200  1303               	bcf	3,6	;RP1=0, select bank0
  1337  0201  00C2               	movwf	get_averageX@Data
  1338  0202  23AB               	fcall	_get_averageX
  1339  0203  1283               	bcf	3,5	;RP0=0, select bank0
  1340  0204  1303               	bcf	3,6	;RP1=0, select bank0
  1341  0205  0843               	movf	?_get_averageX+1,w
  1342  0206  00DB               	movwf	_XAVG+1
  1343  0207  0842               	movf	?_get_averageX,w
  1344  0208  00DA               	movwf	_XAVG
  1345                           
  1346                           ;main.c: 80: YAVG = get_averageY(Y);
  1347  0209  1683               	bsf	3,5	;RP0=1, select bank1
  1348  020A  1303               	bcf	3,6	;RP1=0, select bank1
  1349  020B  082F               	movf	(main@Y+1)^(0+128),w
  1350  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1351  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1352  020E  00C3               	movwf	get_averageY@Data+1
  1353  020F  1683               	bsf	3,5	;RP0=1, select bank1
  1354  0210  1303               	bcf	3,6	;RP1=0, select bank1
  1355  0211  082E               	movf	main@Y^(0+128),w
  1356  0212  1283               	bcf	3,5	;RP0=0, select bank0
  1357  0213  1303               	bcf	3,6	;RP1=0, select bank0
  1358  0214  00C2               	movwf	get_averageY@Data
  1359  0215  2355               	fcall	_get_averageY
  1360  0216  1283               	bcf	3,5	;RP0=0, select bank0
  1361  0217  1303               	bcf	3,6	;RP1=0, select bank0
  1362  0218  0843               	movf	?_get_averageY+1,w
  1363  0219  00D9               	movwf	_YAVG+1
  1364  021A  0842               	movf	?_get_averageY,w
  1365  021B  00D8               	movwf	_YAVG
  1366                           
  1367                           ;main.c: 81: ZAVG = get_averageZ(Z);
  1368  021C  1683               	bsf	3,5	;RP0=1, select bank1
  1369  021D  1303               	bcf	3,6	;RP1=0, select bank1
  1370  021E  0831               	movf	(main@Z+1)^(0+128),w
  1371  021F  1283               	bcf	3,5	;RP0=0, select bank0
  1372  0220  1303               	bcf	3,6	;RP1=0, select bank0
  1373  0221  00C3               	movwf	get_averageZ@Data+1
  1374  0222  1683               	bsf	3,5	;RP0=1, select bank1
  1375  0223  1303               	bcf	3,6	;RP1=0, select bank1
  1376  0224  0830               	movf	main@Z^(0+128),w
  1377  0225  1283               	bcf	3,5	;RP0=0, select bank0
  1378  0226  1303               	bcf	3,6	;RP1=0, select bank0
  1379  0227  00C2               	movwf	get_averageZ@Data
  1380  0228  22FF               	fcall	_get_averageZ
  1381  0229  1283               	bcf	3,5	;RP0=0, select bank0
  1382  022A  1303               	bcf	3,6	;RP1=0, select bank0
  1383  022B  0843               	movf	?_get_averageZ+1,w
  1384  022C  00D7               	movwf	_ZAVG+1
  1385  022D  0842               	movf	?_get_averageZ,w
  1386  022E  00D6               	movwf	_ZAVG
  1387                           
  1388                           ;main.c: 83: AVG = (XAVG/3) + (YAVG/3)+ (ZAVG/3);
  1389  022F  3003               	movlw	3
  1390  0230  00A6               	movwf	___lwdiv@divisor
  1391  0231  3000               	movlw	0
  1392  0232  00A7               	movwf	___lwdiv@divisor+1
  1393  0233  085B               	movf	_XAVG+1,w
  1394  0234  00A9               	movwf	___lwdiv@dividend+1
  1395  0235  085A               	movf	_XAVG,w
  1396  0236  00A8               	movwf	___lwdiv@dividend
  1397  0237  2532               	fcall	___lwdiv
  1398  0238  1283               	bcf	3,5	;RP0=0, select bank0
  1399  0239  1303               	bcf	3,6	;RP1=0, select bank0
  1400  023A  0826               	movf	?___lwdiv,w
  1401  023B  00C8               	movwf	??_main
  1402  023C  0827               	movf	?___lwdiv+1,w
  1403  023D  00C9               	movwf	??_main+1
  1404  023E  3003               	movlw	3
  1405  023F  00A6               	movwf	___lwdiv@divisor
  1406  0240  3000               	movlw	0
  1407  0241  00A7               	movwf	___lwdiv@divisor+1
  1408  0242  0859               	movf	_YAVG+1,w
  1409  0243  00A9               	movwf	___lwdiv@dividend+1
  1410  0244  0858               	movf	_YAVG,w
  1411  0245  00A8               	movwf	___lwdiv@dividend
  1412  0246  2532               	fcall	___lwdiv
  1413  0247  1283               	bcf	3,5	;RP0=0, select bank0
  1414  0248  1303               	bcf	3,6	;RP1=0, select bank0
  1415  0249  0826               	movf	?___lwdiv,w
  1416  024A  0748               	addwf	??_main,w
  1417  024B  00CA               	movwf	??_main+2
  1418  024C  0827               	movf	?___lwdiv+1,w
  1419  024D  1803               	skipnc
  1420  024E  0A27               	incf	?___lwdiv+1,w
  1421  024F  0749               	addwf	??_main+1,w
  1422  0250  00CB               	movwf	??_main+3
  1423  0251  3003               	movlw	3
  1424  0252  00A6               	movwf	___lwdiv@divisor
  1425  0253  3000               	movlw	0
  1426  0254  00A7               	movwf	___lwdiv@divisor+1
  1427  0255  0857               	movf	_ZAVG+1,w
  1428  0256  00A9               	movwf	___lwdiv@dividend+1
  1429  0257  0856               	movf	_ZAVG,w
  1430  0258  00A8               	movwf	___lwdiv@dividend
  1431  0259  2532               	fcall	___lwdiv
  1432  025A  1283               	bcf	3,5	;RP0=0, select bank0
  1433  025B  1303               	bcf	3,6	;RP1=0, select bank0
  1434  025C  0826               	movf	?___lwdiv,w
  1435  025D  074A               	addwf	??_main+2,w
  1436  025E  00D4               	movwf	_AVG
  1437  025F  0827               	movf	?___lwdiv+1,w
  1438  0260  1803               	skipnc
  1439  0261  0A27               	incf	?___lwdiv+1,w
  1440  0262  074B               	addwf	??_main+3,w
  1441  0263  00D5               	movwf	_AVG+1
  1442                           
  1443                           ;main.c: 85: AVG = get_average(AVG);
  1444  0264  0855               	movf	_AVG+1,w
  1445  0265  00C3               	movwf	get_average@Data+1
  1446  0266  0854               	movf	_AVG,w
  1447  0267  00C2               	movwf	get_average@Data
  1448  0268  2401               	fcall	_get_average
  1449  0269  1283               	bcf	3,5	;RP0=0, select bank0
  1450  026A  1303               	bcf	3,6	;RP1=0, select bank0
  1451  026B  0843               	movf	?_get_average+1,w
  1452  026C  00D5               	movwf	_AVG+1
  1453  026D  0842               	movf	?_get_average,w
  1454  026E  00D4               	movwf	_AVG
  1455  026F  295E               	goto	l1727
  1456  0270                     __end_of_main:	
  1457                           
  1458                           	psect	text1
  1459  0642                     __ptext1:	
  1460 ;; *************** function _system_init *****************
  1461 ;; Defined at:
  1462 ;;		line 17 in file "main.c"
  1463 ;; Parameters:    Size  Location     Type
  1464 ;;		None
  1465 ;; Auto vars:     Size  Location     Type
  1466 ;;		None
  1467 ;; Return value:  Size  Location     Type
  1468 ;;                  1    wreg      void 
  1469 ;; Registers used:
  1470 ;;		wreg, status,2
  1471 ;; Tracked objects:
  1472 ;;		On entry : 0/0
  1473 ;;		On exit  : 0/0
  1474 ;;		Unchanged: 0/0
  1475 ;; Data sizes:     COMMON   BANK0   BANK1
  1476 ;;      Params:         0       0       0
  1477 ;;      Locals:         0       0       0
  1478 ;;      Temps:          0       0       0
  1479 ;;      Totals:         0       0       0
  1480 ;;Total ram usage:        0 bytes
  1481 ;; Hardware stack levels used:    1
  1482 ;; Hardware stack levels required when called:    3
  1483 ;; This function calls:
  1484 ;;		Nothing
  1485 ;; This function is called by:
  1486 ;;		_main
  1487 ;; This function uses a non-reentrant model
  1488 ;;
  1489                           
  1490                           
  1491                           ;psect for function _system_init
  1492  0642                     _system_init:	
  1493                           
  1494                           ;main.c: 19: OPTION_REGbits.nRBPU = 0;
  1495                           
  1496                           ;incstack = 0
  1497                           ; Regs used in _system_init: [wreg+status,2]
  1498  0642  1683               	bsf	3,5	;RP0=1, select bank1
  1499  0643  1303               	bcf	3,6	;RP1=0, select bank1
  1500  0644  1381               	bcf	1,7	;volatile
  1501                           
  1502                           ;main.c: 20: TRISB = 0xFF;
  1503  0645  30FF               	movlw	255
  1504  0646  0086               	movwf	6	;volatile
  1505                           
  1506                           ;main.c: 21: WPUB = 0xFF;
  1507  0647  30FF               	movlw	255
  1508  0648  0095               	movwf	21	;volatile
  1509                           
  1510                           ;main.c: 22: ADCON0 = 0x00;
  1511  0649  1283               	bcf	3,5	;RP0=0, select bank0
  1512  064A  1303               	bcf	3,6	;RP1=0, select bank0
  1513  064B  019F               	clrf	31	;volatile
  1514                           
  1515                           ;main.c: 23: ANSEL = 0x00;
  1516  064C  1683               	bsf	3,5	;RP0=1, select bank3
  1517  064D  1703               	bsf	3,6	;RP1=1, select bank3
  1518  064E  0188               	clrf	8	;volatile
  1519                           
  1520                           ;main.c: 24: ANS3 = 1;
  1521  064F  1588               	bsf	8,3	;volatile
  1522                           
  1523                           ;main.c: 25: TRISA3 = 1;
  1524  0650  1683               	bsf	3,5	;RP0=1, select bank1
  1525  0651  1303               	bcf	3,6	;RP1=0, select bank1
  1526  0652  1585               	bsf	5,3	;volatile
  1527                           
  1528                           ;main.c: 26: ADCON0 = 0x0D;
  1529  0653  300D               	movlw	13
  1530  0654  1283               	bcf	3,5	;RP0=0, select bank0
  1531  0655  1303               	bcf	3,6	;RP1=0, select bank0
  1532  0656  009F               	movwf	31	;volatile
  1533                           
  1534                           ;main.c: 27: ANSELH = 0x00;
  1535  0657  1683               	bsf	3,5	;RP0=1, select bank3
  1536  0658  1703               	bsf	3,6	;RP1=1, select bank3
  1537  0659  0189               	clrf	9	;volatile
  1538  065A  0008               	return
  1539  065B                     __end_of_system_init:	
  1540                           
  1541                           	psect	text2
  1542  04A6                     __ptext2:	
  1543 ;; *************** function _ini_adxl345 *****************
  1544 ;; Defined at:
  1545 ;;		line 6 in file "ADXL_m.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;		None
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      void 
  1552 ;; Registers used:
  1553 ;;		wreg, status,2, status,0, pclath, cstack
  1554 ;; Tracked objects:
  1555 ;;		On entry : 0/0
  1556 ;;		On exit  : 0/0
  1557 ;;		Unchanged: 0/0
  1558 ;; Data sizes:     COMMON   BANK0   BANK1
  1559 ;;      Params:         0       0       0
  1560 ;;      Locals:         0       0       0
  1561 ;;      Temps:          0       2       0
  1562 ;;      Totals:         0       2       0
  1563 ;;Total ram usage:        2 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:    6
  1566 ;; This function calls:
  1567 ;;		_E_Write
  1568 ;; This function is called by:
  1569 ;;		_main
  1570 ;; This function uses a non-reentrant model
  1571 ;;
  1572                           
  1573                           
  1574                           ;psect for function _ini_adxl345
  1575  04A6                     _ini_adxl345:	
  1576                           
  1577                           ;ADXL_m.c: 8: E_Write(56,0x9f);
  1578                           
  1579                           ;incstack = 0
  1580                           ; Regs used in _ini_adxl345: [wreg+status,2+status,0+pclath+cstack]
  1581  04A6  3038               	movlw	56
  1582  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  1583  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  1584  04A9  00A7               	movwf	E_Write@addr
  1585  04AA  3000               	movlw	0
  1586  04AB  00A8               	movwf	E_Write@addr+1
  1587  04AC  309F               	movlw	159
  1588  04AD  00AA               	movwf	??_ini_adxl345
  1589  04AE  082A               	movf	??_ini_adxl345,w
  1590  04AF  00A9               	movwf	E_Write@ch
  1591  04B0  26A7               	fcall	_E_Write
  1592                           
  1593                           ;ADXL_m.c: 9: _delay((unsigned long)((10)*(20000000/4000.0)));
  1594  04B1  3041               	movlw	65
  1595  04B2  1283               	bcf	3,5	;RP0=0, select bank0
  1596  04B3  1303               	bcf	3,6	;RP1=0, select bank0
  1597  04B4  00AB               	movwf	??_ini_adxl345+1
  1598  04B5  30EE               	movlw	238
  1599  04B6  00AA               	movwf	??_ini_adxl345
  1600  04B7                     u1407:	
  1601  04B7  0BAA               	decfsz	??_ini_adxl345,f
  1602  04B8  2CB7               	goto	u1407
  1603  04B9  0BAB               	decfsz	??_ini_adxl345+1,f
  1604  04BA  2CB7               	goto	u1407
  1605                           
  1606                           ;ADXL_m.c: 10: E_Write(49,0x09);
  1607  04BB  3031               	movlw	49
  1608  04BC  1283               	bcf	3,5	;RP0=0, select bank0
  1609  04BD  1303               	bcf	3,6	;RP1=0, select bank0
  1610  04BE  00A7               	movwf	E_Write@addr
  1611  04BF  3000               	movlw	0
  1612  04C0  00A8               	movwf	E_Write@addr+1
  1613  04C1  3009               	movlw	9
  1614  04C2  00AA               	movwf	??_ini_adxl345
  1615  04C3  082A               	movf	??_ini_adxl345,w
  1616  04C4  00A9               	movwf	E_Write@ch
  1617  04C5  26A7               	fcall	_E_Write
  1618                           
  1619                           ;ADXL_m.c: 11: _delay((unsigned long)((10)*(20000000/4000.0)));
  1620  04C6  3041               	movlw	65
  1621  04C7  1283               	bcf	3,5	;RP0=0, select bank0
  1622  04C8  1303               	bcf	3,6	;RP1=0, select bank0
  1623  04C9  00AB               	movwf	??_ini_adxl345+1
  1624  04CA  30EE               	movlw	238
  1625  04CB  00AA               	movwf	??_ini_adxl345
  1626  04CC                     u1417:	
  1627  04CC  0BAA               	decfsz	??_ini_adxl345,f
  1628  04CD  2CCC               	goto	u1417
  1629  04CE  0BAB               	decfsz	??_ini_adxl345+1,f
  1630  04CF  2CCC               	goto	u1417
  1631                           
  1632                           ;ADXL_m.c: 12: E_Write(44,0x0d);
  1633  04D0  302C               	movlw	44
  1634  04D1  1283               	bcf	3,5	;RP0=0, select bank0
  1635  04D2  1303               	bcf	3,6	;RP1=0, select bank0
  1636  04D3  00A7               	movwf	E_Write@addr
  1637  04D4  3000               	movlw	0
  1638  04D5  00A8               	movwf	E_Write@addr+1
  1639  04D6  300D               	movlw	13
  1640  04D7  00AA               	movwf	??_ini_adxl345
  1641  04D8  082A               	movf	??_ini_adxl345,w
  1642  04D9  00A9               	movwf	E_Write@ch
  1643  04DA  26A7               	fcall	_E_Write
  1644                           
  1645                           ;ADXL_m.c: 13: _delay((unsigned long)((10)*(20000000/4000.0)));
  1646  04DB  3041               	movlw	65
  1647  04DC  1283               	bcf	3,5	;RP0=0, select bank0
  1648  04DD  1303               	bcf	3,6	;RP1=0, select bank0
  1649  04DE  00AB               	movwf	??_ini_adxl345+1
  1650  04DF  30EE               	movlw	238
  1651  04E0  00AA               	movwf	??_ini_adxl345
  1652  04E1                     u1427:	
  1653  04E1  0BAA               	decfsz	??_ini_adxl345,f
  1654  04E2  2CE1               	goto	u1427
  1655  04E3  0BAB               	decfsz	??_ini_adxl345+1,f
  1656  04E4  2CE1               	goto	u1427
  1657                           
  1658                           ;ADXL_m.c: 14: E_Write(45,0x08);
  1659  04E5  302D               	movlw	45
  1660  04E6  1283               	bcf	3,5	;RP0=0, select bank0
  1661  04E7  1303               	bcf	3,6	;RP1=0, select bank0
  1662  04E8  00A7               	movwf	E_Write@addr
  1663  04E9  3000               	movlw	0
  1664  04EA  00A8               	movwf	E_Write@addr+1
  1665  04EB  3008               	movlw	8
  1666  04EC  00AA               	movwf	??_ini_adxl345
  1667  04ED  082A               	movf	??_ini_adxl345,w
  1668  04EE  00A9               	movwf	E_Write@ch
  1669  04EF  26A7               	fcall	_E_Write
  1670  04F0  0008               	return
  1671  04F1                     __end_of_ini_adxl345:	
  1672                           
  1673                           	psect	text3
  1674  06A7                     __ptext3:	
  1675 ;; *************** function _E_Write *****************
  1676 ;; Defined at:
  1677 ;;		line 154 in file "ADXL_m.c"
  1678 ;; Parameters:    Size  Location     Type
  1679 ;;  addr            2    7[BANK0 ] int 
  1680 ;;  ch              1    9[BANK0 ] unsigned char 
  1681 ;; Auto vars:     Size  Location     Type
  1682 ;;		None
  1683 ;; Return value:  Size  Location     Type
  1684 ;;                  1    wreg      unsigned char 
  1685 ;; Registers used:
  1686 ;;		wreg, status,2, status,0, pclath, cstack
  1687 ;; Tracked objects:
  1688 ;;		On entry : 0/0
  1689 ;;		On exit  : 0/0
  1690 ;;		Unchanged: 0/0
  1691 ;; Data sizes:     COMMON   BANK0   BANK1
  1692 ;;      Params:         0       3       0
  1693 ;;      Locals:         0       0       0
  1694 ;;      Temps:          0       0       0
  1695 ;;      Totals:         0       3       0
  1696 ;;Total ram usage:        3 bytes
  1697 ;; Hardware stack levels used:    1
  1698 ;; Hardware stack levels required when called:    5
  1699 ;; This function calls:
  1700 ;;		_I2CSend
  1701 ;;		_I2CStart
  1702 ;;		_I2CStop
  1703 ;; This function is called by:
  1704 ;;		_ini_adxl345
  1705 ;; This function uses a non-reentrant model
  1706 ;;
  1707                           
  1708                           
  1709                           ;psect for function _E_Write
  1710  06A7                     _E_Write:	
  1711                           
  1712                           ;ADXL_m.c: 157: I2CStart();
  1713                           
  1714                           ;incstack = 0
  1715                           ; Regs used in _E_Write: [wreg+status,2+status,0+pclath+cstack]
  1716  06A7  26F1               	fcall	_I2CStart
  1717                           
  1718                           ;ADXL_m.c: 159: I2CSend(0xA6);
  1719  06A8  30A6               	movlw	166
  1720  06A9  26C1               	fcall	_I2CSend
  1721                           
  1722                           ;ADXL_m.c: 161: I2CSend(addr);
  1723  06AA  1283               	bcf	3,5	;RP0=0, select bank0
  1724  06AB  1303               	bcf	3,6	;RP1=0, select bank0
  1725  06AC  0827               	movf	E_Write@addr,w
  1726  06AD  26C1               	fcall	_I2CSend
  1727                           
  1728                           ;ADXL_m.c: 163: I2CSend(ch);
  1729  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  1730  06AF  1303               	bcf	3,6	;RP1=0, select bank0
  1731  06B0  0829               	movf	E_Write@ch,w
  1732  06B1  26C1               	fcall	_I2CSend
  1733                           
  1734                           ;ADXL_m.c: 165: I2CStop();
  1735  06B2  26EB               	fcall	_I2CStop
  1736  06B3  0008               	return
  1737  06B4                     __end_of_E_Write:	
  1738                           ;ADXL_m.c: 166: return 1;
  1739                           ;	Return value of _E_Write is never used
  1740                           
  1741                           
  1742                           	psect	text4
  1743  02FF                     __ptext4:	
  1744 ;; *************** function _get_averageZ *****************
  1745 ;; Defined at:
  1746 ;;		line 25 in file "average_calculations.c"
  1747 ;; Parameters:    Size  Location     Type
  1748 ;;  Data            2   34[BANK0 ] short 
  1749 ;; Auto vars:     Size  Location     Type
  1750 ;;		None
  1751 ;; Return value:  Size  Location     Type
  1752 ;;                  2   34[BANK0 ] short 
  1753 ;; Registers used:
  1754 ;;		wreg, status,2, status,0, pclath, cstack
  1755 ;; Tracked objects:
  1756 ;;		On entry : 0/0
  1757 ;;		On exit  : 0/0
  1758 ;;		Unchanged: 0/0
  1759 ;; Data sizes:     COMMON   BANK0   BANK1
  1760 ;;      Params:         0       2       0
  1761 ;;      Locals:         0       0       0
  1762 ;;      Temps:          0       4       0
  1763 ;;      Totals:         0       6       0
  1764 ;;Total ram usage:        6 bytes
  1765 ;; Hardware stack levels used:    1
  1766 ;; Hardware stack levels required when called:    4
  1767 ;; This function calls:
  1768 ;;		___aldiv
  1769 ;;		___lmul
  1770 ;; This function is called by:
  1771 ;;		_main
  1772 ;; This function uses a non-reentrant model
  1773 ;;
  1774                           
  1775                           
  1776                           ;psect for function _get_averageZ
  1777  02FF                     _get_averageZ:	
  1778                           
  1779                           ;average_calculations.c: 27: static short OutPut = 0;
  1780                           ;average_calculations.c: 28: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  1781                           
  1782                           ;incstack = 0
  1783                           ; Regs used in _get_averageZ: [wreg+status,2+status,0+pclath+cstack]
  1784  02FF  3000               	movlw	0
  1785  0300  1283               	bcf	3,5	;RP0=0, select bank0
  1786  0301  1303               	bcf	3,6	;RP1=0, select bank0
  1787  0302  00B6               	movwf	___aldiv@divisor+3
  1788  0303  3000               	movlw	0
  1789  0304  00B5               	movwf	___aldiv@divisor+2
  1790  0305  3000               	movlw	0
  1791  0306  00B4               	movwf	___aldiv@divisor+1
  1792  0307  3064               	movlw	100
  1793  0308  00B3               	movwf	___aldiv@divisor
  1794  0309  084E               	movf	get_averageZ@OutPut,w
  1795  030A  00C4               	movwf	??_get_averageZ
  1796  030B  084F               	movf	get_averageZ@OutPut+1,w
  1797  030C  00C5               	movwf	??_get_averageZ+1
  1798  030D  3000               	movlw	0
  1799  030E  1BC5               	btfsc	??_get_averageZ+1,7
  1800  030F  30FF               	movlw	255
  1801  0310  00C6               	movwf	??_get_averageZ+2
  1802  0311  00C7               	movwf	??_get_averageZ+3
  1803  0312  3003               	movlw	3
  1804  0313                     u1275:	
  1805  0313  1003               	clrc
  1806  0314  0DC4               	rlf	??_get_averageZ,f
  1807  0315  0DC5               	rlf	??_get_averageZ+1,f
  1808  0316  0DC6               	rlf	??_get_averageZ+2,f
  1809  0317  0DC7               	rlf	??_get_averageZ+3,f
  1810  0318  3EFF               	addlw	-1
  1811  0319  1D03               	skipz
  1812  031A  2B13               	goto	u1275
  1813  031B  0842               	movf	get_averageZ@Data,w
  1814  031C  00A6               	movwf	___lmul@multiplier
  1815  031D  0843               	movf	get_averageZ@Data+1,w
  1816  031E  00A7               	movwf	___lmul@multiplier+1
  1817  031F  3000               	movlw	0
  1818  0320  1BA7               	btfsc	___lmul@multiplier+1,7
  1819  0321  30FF               	movlw	255
  1820  0322  00A8               	movwf	___lmul@multiplier+2
  1821  0323  00A9               	movwf	___lmul@multiplier+3
  1822  0324  3000               	movlw	0
  1823  0325  00AD               	movwf	___lmul@multiplicand+3
  1824  0326  3000               	movlw	0
  1825  0327  00AC               	movwf	___lmul@multiplicand+2
  1826  0328  3000               	movlw	0
  1827  0329  00AB               	movwf	___lmul@multiplicand+1
  1828  032A  305C               	movlw	92
  1829  032B  00AA               	movwf	___lmul@multiplicand
  1830  032C  24F1               	fcall	___lmul
  1831  032D  1283               	bcf	3,5	;RP0=0, select bank0
  1832  032E  1303               	bcf	3,6	;RP1=0, select bank0
  1833  032F  0826               	movf	?___lmul,w
  1834  0330  07C4               	addwf	??_get_averageZ,f
  1835  0331  0827               	movf	?___lmul+1,w
  1836  0332  1803               	skipnc
  1837  0333  0F27               	incfsz	?___lmul+1,w
  1838  0334  2B36               	goto	u1280
  1839  0335  2B37               	goto	u1281
  1840  0336                     u1280:	
  1841  0336  07C5               	addwf	??_get_averageZ+1,f
  1842  0337                     u1281:	
  1843  0337  0828               	movf	?___lmul+2,w
  1844  0338  1803               	skipnc
  1845  0339  0F28               	incfsz	?___lmul+2,w
  1846  033A  2B3C               	goto	u1282
  1847  033B  2B3D               	goto	u1283
  1848  033C                     u1282:	
  1849  033C  07C6               	addwf	??_get_averageZ+2,f
  1850  033D                     u1283:	
  1851  033D  0829               	movf	?___lmul+3,w
  1852  033E  1803               	skipnc
  1853  033F  0A29               	incf	?___lmul+3,w
  1854  0340  07C7               	addwf	??_get_averageZ+3,f
  1855  0341  0847               	movf	??_get_averageZ+3,w
  1856  0342  00BA               	movwf	___aldiv@dividend+3
  1857  0343  0846               	movf	??_get_averageZ+2,w
  1858  0344  00B9               	movwf	___aldiv@dividend+2
  1859  0345  0845               	movf	??_get_averageZ+1,w
  1860  0346  00B8               	movwf	___aldiv@dividend+1
  1861  0347  0844               	movf	??_get_averageZ,w
  1862  0348  00B7               	movwf	___aldiv@dividend
  1863  0349  2270               	fcall	___aldiv
  1864  034A  1283               	bcf	3,5	;RP0=0, select bank0
  1865  034B  1303               	bcf	3,6	;RP1=0, select bank0
  1866  034C  0834               	movf	?___aldiv+1,w
  1867  034D  00CF               	movwf	get_averageZ@OutPut+1
  1868  034E  0833               	movf	?___aldiv,w
  1869  034F  00CE               	movwf	get_averageZ@OutPut
  1870                           
  1871                           ;average_calculations.c: 29: return OutPut;
  1872  0350  084F               	movf	get_averageZ@OutPut+1,w
  1873  0351  00C3               	movwf	?_get_averageZ+1
  1874  0352  084E               	movf	get_averageZ@OutPut,w
  1875  0353  00C2               	movwf	?_get_averageZ
  1876  0354  0008               	return
  1877  0355                     __end_of_get_averageZ:	
  1878                           
  1879                           	psect	text5
  1880  0355                     __ptext5:	
  1881 ;; *************** function _get_averageY *****************
  1882 ;; Defined at:
  1883 ;;		line 19 in file "average_calculations.c"
  1884 ;; Parameters:    Size  Location     Type
  1885 ;;  Data            2   34[BANK0 ] short 
  1886 ;; Auto vars:     Size  Location     Type
  1887 ;;		None
  1888 ;; Return value:  Size  Location     Type
  1889 ;;                  2   34[BANK0 ] short 
  1890 ;; Registers used:
  1891 ;;		wreg, status,2, status,0, pclath, cstack
  1892 ;; Tracked objects:
  1893 ;;		On entry : 0/0
  1894 ;;		On exit  : 0/0
  1895 ;;		Unchanged: 0/0
  1896 ;; Data sizes:     COMMON   BANK0   BANK1
  1897 ;;      Params:         0       2       0
  1898 ;;      Locals:         0       0       0
  1899 ;;      Temps:          0       4       0
  1900 ;;      Totals:         0       6       0
  1901 ;;Total ram usage:        6 bytes
  1902 ;; Hardware stack levels used:    1
  1903 ;; Hardware stack levels required when called:    4
  1904 ;; This function calls:
  1905 ;;		___aldiv
  1906 ;;		___lmul
  1907 ;; This function is called by:
  1908 ;;		_main
  1909 ;; This function uses a non-reentrant model
  1910 ;;
  1911                           
  1912                           
  1913                           ;psect for function _get_averageY
  1914  0355                     _get_averageY:	
  1915                           
  1916                           ;average_calculations.c: 21: static short OutPut = 0;
  1917                           ;average_calculations.c: 22: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  1918                           
  1919                           ;incstack = 0
  1920                           ; Regs used in _get_averageY: [wreg+status,2+status,0+pclath+cstack]
  1921  0355  3000               	movlw	0
  1922  0356  1283               	bcf	3,5	;RP0=0, select bank0
  1923  0357  1303               	bcf	3,6	;RP1=0, select bank0
  1924  0358  00B6               	movwf	___aldiv@divisor+3
  1925  0359  3000               	movlw	0
  1926  035A  00B5               	movwf	___aldiv@divisor+2
  1927  035B  3000               	movlw	0
  1928  035C  00B4               	movwf	___aldiv@divisor+1
  1929  035D  3064               	movlw	100
  1930  035E  00B3               	movwf	___aldiv@divisor
  1931  035F  0850               	movf	get_averageY@OutPut,w
  1932  0360  00C4               	movwf	??_get_averageY
  1933  0361  0851               	movf	get_averageY@OutPut+1,w
  1934  0362  00C5               	movwf	??_get_averageY+1
  1935  0363  3000               	movlw	0
  1936  0364  1BC5               	btfsc	??_get_averageY+1,7
  1937  0365  30FF               	movlw	255
  1938  0366  00C6               	movwf	??_get_averageY+2
  1939  0367  00C7               	movwf	??_get_averageY+3
  1940  0368  3003               	movlw	3
  1941  0369                     u1255:	
  1942  0369  1003               	clrc
  1943  036A  0DC4               	rlf	??_get_averageY,f
  1944  036B  0DC5               	rlf	??_get_averageY+1,f
  1945  036C  0DC6               	rlf	??_get_averageY+2,f
  1946  036D  0DC7               	rlf	??_get_averageY+3,f
  1947  036E  3EFF               	addlw	-1
  1948  036F  1D03               	skipz
  1949  0370  2B69               	goto	u1255
  1950  0371  0842               	movf	get_averageY@Data,w
  1951  0372  00A6               	movwf	___lmul@multiplier
  1952  0373  0843               	movf	get_averageY@Data+1,w
  1953  0374  00A7               	movwf	___lmul@multiplier+1
  1954  0375  3000               	movlw	0
  1955  0376  1BA7               	btfsc	___lmul@multiplier+1,7
  1956  0377  30FF               	movlw	255
  1957  0378  00A8               	movwf	___lmul@multiplier+2
  1958  0379  00A9               	movwf	___lmul@multiplier+3
  1959  037A  3000               	movlw	0
  1960  037B  00AD               	movwf	___lmul@multiplicand+3
  1961  037C  3000               	movlw	0
  1962  037D  00AC               	movwf	___lmul@multiplicand+2
  1963  037E  3000               	movlw	0
  1964  037F  00AB               	movwf	___lmul@multiplicand+1
  1965  0380  305C               	movlw	92
  1966  0381  00AA               	movwf	___lmul@multiplicand
  1967  0382  24F1               	fcall	___lmul
  1968  0383  1283               	bcf	3,5	;RP0=0, select bank0
  1969  0384  1303               	bcf	3,6	;RP1=0, select bank0
  1970  0385  0826               	movf	?___lmul,w
  1971  0386  07C4               	addwf	??_get_averageY,f
  1972  0387  0827               	movf	?___lmul+1,w
  1973  0388  1803               	skipnc
  1974  0389  0F27               	incfsz	?___lmul+1,w
  1975  038A  2B8C               	goto	u1260
  1976  038B  2B8D               	goto	u1261
  1977  038C                     u1260:	
  1978  038C  07C5               	addwf	??_get_averageY+1,f
  1979  038D                     u1261:	
  1980  038D  0828               	movf	?___lmul+2,w
  1981  038E  1803               	skipnc
  1982  038F  0F28               	incfsz	?___lmul+2,w
  1983  0390  2B92               	goto	u1262
  1984  0391  2B93               	goto	u1263
  1985  0392                     u1262:	
  1986  0392  07C6               	addwf	??_get_averageY+2,f
  1987  0393                     u1263:	
  1988  0393  0829               	movf	?___lmul+3,w
  1989  0394  1803               	skipnc
  1990  0395  0A29               	incf	?___lmul+3,w
  1991  0396  07C7               	addwf	??_get_averageY+3,f
  1992  0397  0847               	movf	??_get_averageY+3,w
  1993  0398  00BA               	movwf	___aldiv@dividend+3
  1994  0399  0846               	movf	??_get_averageY+2,w
  1995  039A  00B9               	movwf	___aldiv@dividend+2
  1996  039B  0845               	movf	??_get_averageY+1,w
  1997  039C  00B8               	movwf	___aldiv@dividend+1
  1998  039D  0844               	movf	??_get_averageY,w
  1999  039E  00B7               	movwf	___aldiv@dividend
  2000  039F  2270               	fcall	___aldiv
  2001  03A0  1283               	bcf	3,5	;RP0=0, select bank0
  2002  03A1  1303               	bcf	3,6	;RP1=0, select bank0
  2003  03A2  0834               	movf	?___aldiv+1,w
  2004  03A3  00D1               	movwf	get_averageY@OutPut+1
  2005  03A4  0833               	movf	?___aldiv,w
  2006  03A5  00D0               	movwf	get_averageY@OutPut
  2007                           
  2008                           ;average_calculations.c: 23: return OutPut;
  2009  03A6  0851               	movf	get_averageY@OutPut+1,w
  2010  03A7  00C3               	movwf	?_get_averageY+1
  2011  03A8  0850               	movf	get_averageY@OutPut,w
  2012  03A9  00C2               	movwf	?_get_averageY
  2013  03AA  0008               	return
  2014  03AB                     __end_of_get_averageY:	
  2015                           
  2016                           	psect	text6
  2017  03AB                     __ptext6:	
  2018 ;; *************** function _get_averageX *****************
  2019 ;; Defined at:
  2020 ;;		line 13 in file "average_calculations.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;  Data            2   34[BANK0 ] short 
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;		None
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  2   34[BANK0 ] short 
  2027 ;; Registers used:
  2028 ;;		wreg, status,2, status,0, pclath, cstack
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMMON   BANK0   BANK1
  2034 ;;      Params:         0       2       0
  2035 ;;      Locals:         0       0       0
  2036 ;;      Temps:          0       4       0
  2037 ;;      Totals:         0       6       0
  2038 ;;Total ram usage:        6 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; Hardware stack levels required when called:    4
  2041 ;; This function calls:
  2042 ;;		___aldiv
  2043 ;;		___lmul
  2044 ;; This function is called by:
  2045 ;;		_main
  2046 ;; This function uses a non-reentrant model
  2047 ;;
  2048                           
  2049                           
  2050                           ;psect for function _get_averageX
  2051  03AB                     _get_averageX:	
  2052                           
  2053                           ;average_calculations.c: 15: static short OutPut = 0;
  2054                           ;average_calculations.c: 16: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  2055                           
  2056                           ;incstack = 0
  2057                           ; Regs used in _get_averageX: [wreg+status,2+status,0+pclath+cstack]
  2058  03AB  3000               	movlw	0
  2059  03AC  1283               	bcf	3,5	;RP0=0, select bank0
  2060  03AD  1303               	bcf	3,6	;RP1=0, select bank0
  2061  03AE  00B6               	movwf	___aldiv@divisor+3
  2062  03AF  3000               	movlw	0
  2063  03B0  00B5               	movwf	___aldiv@divisor+2
  2064  03B1  3000               	movlw	0
  2065  03B2  00B4               	movwf	___aldiv@divisor+1
  2066  03B3  3064               	movlw	100
  2067  03B4  00B3               	movwf	___aldiv@divisor
  2068  03B5  0852               	movf	get_averageX@OutPut,w
  2069  03B6  00C4               	movwf	??_get_averageX
  2070  03B7  0853               	movf	get_averageX@OutPut+1,w
  2071  03B8  00C5               	movwf	??_get_averageX+1
  2072  03B9  3000               	movlw	0
  2073  03BA  1BC5               	btfsc	??_get_averageX+1,7
  2074  03BB  30FF               	movlw	255
  2075  03BC  00C6               	movwf	??_get_averageX+2
  2076  03BD  00C7               	movwf	??_get_averageX+3
  2077  03BE  3003               	movlw	3
  2078  03BF                     u1235:	
  2079  03BF  1003               	clrc
  2080  03C0  0DC4               	rlf	??_get_averageX,f
  2081  03C1  0DC5               	rlf	??_get_averageX+1,f
  2082  03C2  0DC6               	rlf	??_get_averageX+2,f
  2083  03C3  0DC7               	rlf	??_get_averageX+3,f
  2084  03C4  3EFF               	addlw	-1
  2085  03C5  1D03               	skipz
  2086  03C6  2BBF               	goto	u1235
  2087  03C7  0842               	movf	get_averageX@Data,w
  2088  03C8  00A6               	movwf	___lmul@multiplier
  2089  03C9  0843               	movf	get_averageX@Data+1,w
  2090  03CA  00A7               	movwf	___lmul@multiplier+1
  2091  03CB  3000               	movlw	0
  2092  03CC  1BA7               	btfsc	___lmul@multiplier+1,7
  2093  03CD  30FF               	movlw	255
  2094  03CE  00A8               	movwf	___lmul@multiplier+2
  2095  03CF  00A9               	movwf	___lmul@multiplier+3
  2096  03D0  3000               	movlw	0
  2097  03D1  00AD               	movwf	___lmul@multiplicand+3
  2098  03D2  3000               	movlw	0
  2099  03D3  00AC               	movwf	___lmul@multiplicand+2
  2100  03D4  3000               	movlw	0
  2101  03D5  00AB               	movwf	___lmul@multiplicand+1
  2102  03D6  305C               	movlw	92
  2103  03D7  00AA               	movwf	___lmul@multiplicand
  2104  03D8  24F1               	fcall	___lmul
  2105  03D9  1283               	bcf	3,5	;RP0=0, select bank0
  2106  03DA  1303               	bcf	3,6	;RP1=0, select bank0
  2107  03DB  0826               	movf	?___lmul,w
  2108  03DC  07C4               	addwf	??_get_averageX,f
  2109  03DD  0827               	movf	?___lmul+1,w
  2110  03DE  1803               	skipnc
  2111  03DF  0F27               	incfsz	?___lmul+1,w
  2112  03E0  2BE2               	goto	u1240
  2113  03E1  2BE3               	goto	u1241
  2114  03E2                     u1240:	
  2115  03E2  07C5               	addwf	??_get_averageX+1,f
  2116  03E3                     u1241:	
  2117  03E3  0828               	movf	?___lmul+2,w
  2118  03E4  1803               	skipnc
  2119  03E5  0F28               	incfsz	?___lmul+2,w
  2120  03E6  2BE8               	goto	u1242
  2121  03E7  2BE9               	goto	u1243
  2122  03E8                     u1242:	
  2123  03E8  07C6               	addwf	??_get_averageX+2,f
  2124  03E9                     u1243:	
  2125  03E9  0829               	movf	?___lmul+3,w
  2126  03EA  1803               	skipnc
  2127  03EB  0A29               	incf	?___lmul+3,w
  2128  03EC  07C7               	addwf	??_get_averageX+3,f
  2129  03ED  0847               	movf	??_get_averageX+3,w
  2130  03EE  00BA               	movwf	___aldiv@dividend+3
  2131  03EF  0846               	movf	??_get_averageX+2,w
  2132  03F0  00B9               	movwf	___aldiv@dividend+2
  2133  03F1  0845               	movf	??_get_averageX+1,w
  2134  03F2  00B8               	movwf	___aldiv@dividend+1
  2135  03F3  0844               	movf	??_get_averageX,w
  2136  03F4  00B7               	movwf	___aldiv@dividend
  2137  03F5  2270               	fcall	___aldiv
  2138  03F6  1283               	bcf	3,5	;RP0=0, select bank0
  2139  03F7  1303               	bcf	3,6	;RP1=0, select bank0
  2140  03F8  0834               	movf	?___aldiv+1,w
  2141  03F9  00D3               	movwf	get_averageX@OutPut+1
  2142  03FA  0833               	movf	?___aldiv,w
  2143  03FB  00D2               	movwf	get_averageX@OutPut
  2144                           
  2145                           ;average_calculations.c: 17: return OutPut;
  2146  03FC  0853               	movf	get_averageX@OutPut+1,w
  2147  03FD  00C3               	movwf	?_get_averageX+1
  2148  03FE  0852               	movf	get_averageX@OutPut,w
  2149  03FF  00C2               	movwf	?_get_averageX
  2150  0400  0008               	return
  2151  0401                     __end_of_get_averageX:	
  2152                           
  2153                           	psect	text7
  2154  0401                     __ptext7:	
  2155 ;; *************** function _get_average *****************
  2156 ;; Defined at:
  2157 ;;		line 32 in file "average_calculations.c"
  2158 ;; Parameters:    Size  Location     Type
  2159 ;;  Data            2   34[BANK0 ] short 
  2160 ;; Auto vars:     Size  Location     Type
  2161 ;;		None
  2162 ;; Return value:  Size  Location     Type
  2163 ;;                  2   34[BANK0 ] short 
  2164 ;; Registers used:
  2165 ;;		wreg, status,2, status,0, pclath, cstack
  2166 ;; Tracked objects:
  2167 ;;		On entry : 0/0
  2168 ;;		On exit  : 0/0
  2169 ;;		Unchanged: 0/0
  2170 ;; Data sizes:     COMMON   BANK0   BANK1
  2171 ;;      Params:         0       2       0
  2172 ;;      Locals:         0       0       0
  2173 ;;      Temps:          0       4       0
  2174 ;;      Totals:         0       6       0
  2175 ;;Total ram usage:        6 bytes
  2176 ;; Hardware stack levels used:    1
  2177 ;; Hardware stack levels required when called:    4
  2178 ;; This function calls:
  2179 ;;		___aldiv
  2180 ;;		___lmul
  2181 ;; This function is called by:
  2182 ;;		_main
  2183 ;; This function uses a non-reentrant model
  2184 ;;
  2185                           
  2186                           
  2187                           ;psect for function _get_average
  2188  0401                     _get_average:	
  2189                           
  2190                           ;average_calculations.c: 34: static short OutPut = 0;
  2191                           ;average_calculations.c: 35: OutPut = (short)((92 * (long)Data + 8 * (long)OutPut)/100);
  2192                           
  2193                           ;incstack = 0
  2194                           ; Regs used in _get_average: [wreg+status,2+status,0+pclath+cstack]
  2195  0401  3000               	movlw	0
  2196  0402  1283               	bcf	3,5	;RP0=0, select bank0
  2197  0403  1303               	bcf	3,6	;RP1=0, select bank0
  2198  0404  00B6               	movwf	___aldiv@divisor+3
  2199  0405  3000               	movlw	0
  2200  0406  00B5               	movwf	___aldiv@divisor+2
  2201  0407  3000               	movlw	0
  2202  0408  00B4               	movwf	___aldiv@divisor+1
  2203  0409  3064               	movlw	100
  2204  040A  00B3               	movwf	___aldiv@divisor
  2205  040B  084C               	movf	get_average@OutPut,w
  2206  040C  00C4               	movwf	??_get_average
  2207  040D  084D               	movf	get_average@OutPut+1,w
  2208  040E  00C5               	movwf	??_get_average+1
  2209  040F  3000               	movlw	0
  2210  0410  1BC5               	btfsc	??_get_average+1,7
  2211  0411  30FF               	movlw	255
  2212  0412  00C6               	movwf	??_get_average+2
  2213  0413  00C7               	movwf	??_get_average+3
  2214  0414  3003               	movlw	3
  2215  0415                     u1295:	
  2216  0415  1003               	clrc
  2217  0416  0DC4               	rlf	??_get_average,f
  2218  0417  0DC5               	rlf	??_get_average+1,f
  2219  0418  0DC6               	rlf	??_get_average+2,f
  2220  0419  0DC7               	rlf	??_get_average+3,f
  2221  041A  3EFF               	addlw	-1
  2222  041B  1D03               	skipz
  2223  041C  2C15               	goto	u1295
  2224  041D  0842               	movf	get_average@Data,w
  2225  041E  00A6               	movwf	___lmul@multiplier
  2226  041F  0843               	movf	get_average@Data+1,w
  2227  0420  00A7               	movwf	___lmul@multiplier+1
  2228  0421  3000               	movlw	0
  2229  0422  1BA7               	btfsc	___lmul@multiplier+1,7
  2230  0423  30FF               	movlw	255
  2231  0424  00A8               	movwf	___lmul@multiplier+2
  2232  0425  00A9               	movwf	___lmul@multiplier+3
  2233  0426  3000               	movlw	0
  2234  0427  00AD               	movwf	___lmul@multiplicand+3
  2235  0428  3000               	movlw	0
  2236  0429  00AC               	movwf	___lmul@multiplicand+2
  2237  042A  3000               	movlw	0
  2238  042B  00AB               	movwf	___lmul@multiplicand+1
  2239  042C  305C               	movlw	92
  2240  042D  00AA               	movwf	___lmul@multiplicand
  2241  042E  24F1               	fcall	___lmul
  2242  042F  1283               	bcf	3,5	;RP0=0, select bank0
  2243  0430  1303               	bcf	3,6	;RP1=0, select bank0
  2244  0431  0826               	movf	?___lmul,w
  2245  0432  07C4               	addwf	??_get_average,f
  2246  0433  0827               	movf	?___lmul+1,w
  2247  0434  1803               	skipnc
  2248  0435  0F27               	incfsz	?___lmul+1,w
  2249  0436  2C38               	goto	u1300
  2250  0437  2C39               	goto	u1301
  2251  0438                     u1300:	
  2252  0438  07C5               	addwf	??_get_average+1,f
  2253  0439                     u1301:	
  2254  0439  0828               	movf	?___lmul+2,w
  2255  043A  1803               	skipnc
  2256  043B  0F28               	incfsz	?___lmul+2,w
  2257  043C  2C3E               	goto	u1302
  2258  043D  2C3F               	goto	u1303
  2259  043E                     u1302:	
  2260  043E  07C6               	addwf	??_get_average+2,f
  2261  043F                     u1303:	
  2262  043F  0829               	movf	?___lmul+3,w
  2263  0440  1803               	skipnc
  2264  0441  0A29               	incf	?___lmul+3,w
  2265  0442  07C7               	addwf	??_get_average+3,f
  2266  0443  0847               	movf	??_get_average+3,w
  2267  0444  00BA               	movwf	___aldiv@dividend+3
  2268  0445  0846               	movf	??_get_average+2,w
  2269  0446  00B9               	movwf	___aldiv@dividend+2
  2270  0447  0845               	movf	??_get_average+1,w
  2271  0448  00B8               	movwf	___aldiv@dividend+1
  2272  0449  0844               	movf	??_get_average,w
  2273  044A  00B7               	movwf	___aldiv@dividend
  2274  044B  2270               	fcall	___aldiv
  2275  044C  1283               	bcf	3,5	;RP0=0, select bank0
  2276  044D  1303               	bcf	3,6	;RP1=0, select bank0
  2277  044E  0834               	movf	?___aldiv+1,w
  2278  044F  00CD               	movwf	get_average@OutPut+1
  2279  0450  0833               	movf	?___aldiv,w
  2280  0451  00CC               	movwf	get_average@OutPut
  2281                           
  2282                           ;average_calculations.c: 36: return OutPut;
  2283  0452  084D               	movf	get_average@OutPut+1,w
  2284  0453  00C3               	movwf	?_get_average+1
  2285  0454  084C               	movf	get_average@OutPut,w
  2286  0455  00C2               	movwf	?_get_average
  2287  0456  0008               	return
  2288  0457                     __end_of_get_average:	
  2289                           
  2290                           	psect	text8
  2291  04F1                     __ptext8:	
  2292 ;; *************** function ___lmul *****************
  2293 ;; Defined at:
  2294 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul32.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;  multiplier      4    6[BANK0 ] unsigned long 
  2297 ;;  multiplicand    4   10[BANK0 ] unsigned long 
  2298 ;; Auto vars:     Size  Location     Type
  2299 ;;  product         4   15[BANK0 ] unsigned long 
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  4    6[BANK0 ] unsigned long 
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMMON   BANK0   BANK1
  2309 ;;      Params:         0       8       0
  2310 ;;      Locals:         0       4       0
  2311 ;;      Temps:          0       1       0
  2312 ;;      Totals:         0      13       0
  2313 ;;Total ram usage:       13 bytes
  2314 ;; Hardware stack levels used:    1
  2315 ;; Hardware stack levels required when called:    3
  2316 ;; This function calls:
  2317 ;;		Nothing
  2318 ;; This function is called by:
  2319 ;;		_get_averageX
  2320 ;;		_get_averageY
  2321 ;;		_get_averageZ
  2322 ;;		_get_average
  2323 ;; This function uses a non-reentrant model
  2324 ;;
  2325                           
  2326                           
  2327                           ;psect for function ___lmul
  2328  04F1                     ___lmul:	
  2329                           
  2330                           ;incstack = 0
  2331                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  2332  04F1  3000               	movlw	0
  2333  04F2  1283               	bcf	3,5	;RP0=0, select bank0
  2334  04F3  1303               	bcf	3,6	;RP1=0, select bank0
  2335  04F4  00B2               	movwf	___lmul@product+3
  2336  04F5  3000               	movlw	0
  2337  04F6  00B1               	movwf	___lmul@product+2
  2338  04F7  3000               	movlw	0
  2339  04F8  00B0               	movwf	___lmul@product+1
  2340  04F9  3000               	movlw	0
  2341  04FA  00AF               	movwf	___lmul@product
  2342  04FB                     l1541:	
  2343  04FB  1C26               	btfss	___lmul@multiplier,0
  2344  04FC  2D11               	goto	l1545
  2345  04FD  082A               	movf	___lmul@multiplicand,w
  2346  04FE  07AF               	addwf	___lmul@product,f
  2347  04FF  082B               	movf	___lmul@multiplicand+1,w
  2348  0500  1103               	clrz
  2349  0501  1803               	skipnc
  2350  0502  3E01               	addlw	1
  2351  0503  1D03               	btfss	3,2
  2352  0504  07B0               	addwf	___lmul@product+1,f
  2353  0505  082C               	movf	___lmul@multiplicand+2,w
  2354  0506  1103               	clrz
  2355  0507  1803               	skipnc
  2356  0508  3E01               	addlw	1
  2357  0509  1D03               	btfss	3,2
  2358  050A  07B1               	addwf	___lmul@product+2,f
  2359  050B  082D               	movf	___lmul@multiplicand+3,w
  2360  050C  1103               	clrz
  2361  050D  1803               	skipnc
  2362  050E  3E01               	addlw	1
  2363  050F  1D03               	btfss	3,2
  2364  0510  07B2               	addwf	___lmul@product+3,f
  2365  0511                     l1545:	
  2366  0511  3001               	movlw	1
  2367  0512  00AE               	movwf	??___lmul
  2368  0513                     u1095:	
  2369  0513  1003               	clrc
  2370  0514  0DAA               	rlf	___lmul@multiplicand,f
  2371  0515  0DAB               	rlf	___lmul@multiplicand+1,f
  2372  0516  0DAC               	rlf	___lmul@multiplicand+2,f
  2373  0517  0DAD               	rlf	___lmul@multiplicand+3,f
  2374  0518  0BAE               	decfsz	??___lmul,f
  2375  0519  2D13               	goto	u1095
  2376  051A  3001               	movlw	1
  2377  051B                     u1105:	
  2378  051B  1003               	clrc
  2379  051C  0CA9               	rrf	___lmul@multiplier+3,f
  2380  051D  0CA8               	rrf	___lmul@multiplier+2,f
  2381  051E  0CA7               	rrf	___lmul@multiplier+1,f
  2382  051F  0CA6               	rrf	___lmul@multiplier,f
  2383  0520  3EFF               	addlw	-1
  2384  0521  1D03               	skipz
  2385  0522  2D1B               	goto	u1105
  2386  0523  0829               	movf	___lmul@multiplier+3,w
  2387  0524  0428               	iorwf	___lmul@multiplier+2,w
  2388  0525  0427               	iorwf	___lmul@multiplier+1,w
  2389  0526  0426               	iorwf	___lmul@multiplier,w
  2390  0527  1D03               	skipz
  2391  0528  2CFB               	goto	l1541
  2392  0529  0832               	movf	___lmul@product+3,w
  2393  052A  00A9               	movwf	?___lmul+3
  2394  052B  0831               	movf	___lmul@product+2,w
  2395  052C  00A8               	movwf	?___lmul+2
  2396  052D  0830               	movf	___lmul@product+1,w
  2397  052E  00A7               	movwf	?___lmul+1
  2398  052F  082F               	movf	___lmul@product,w
  2399  0530  00A6               	movwf	?___lmul
  2400  0531  0008               	return
  2401  0532                     __end_of___lmul:	
  2402                           
  2403                           	psect	text9
  2404  0270                     __ptext9:	
  2405 ;; *************** function ___aldiv *****************
  2406 ;; Defined at:
  2407 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\aldiv.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;  divisor         4   19[BANK0 ] long 
  2410 ;;  dividend        4   23[BANK0 ] long 
  2411 ;; Auto vars:     Size  Location     Type
  2412 ;;  quotient        4   30[BANK0 ] long 
  2413 ;;  sign            1   29[BANK0 ] unsigned char 
  2414 ;;  counter         1   28[BANK0 ] unsigned char 
  2415 ;; Return value:  Size  Location     Type
  2416 ;;                  4   19[BANK0 ] long 
  2417 ;; Registers used:
  2418 ;;		wreg, status,2, status,0
  2419 ;; Tracked objects:
  2420 ;;		On entry : 0/0
  2421 ;;		On exit  : 0/0
  2422 ;;		Unchanged: 0/0
  2423 ;; Data sizes:     COMMON   BANK0   BANK1
  2424 ;;      Params:         0       8       0
  2425 ;;      Locals:         0       6       0
  2426 ;;      Temps:          0       1       0
  2427 ;;      Totals:         0      15       0
  2428 ;;Total ram usage:       15 bytes
  2429 ;; Hardware stack levels used:    1
  2430 ;; Hardware stack levels required when called:    3
  2431 ;; This function calls:
  2432 ;;		Nothing
  2433 ;; This function is called by:
  2434 ;;		_get_averageX
  2435 ;;		_get_averageY
  2436 ;;		_get_averageZ
  2437 ;;		_get_average
  2438 ;; This function uses a non-reentrant model
  2439 ;;
  2440                           
  2441                           
  2442                           ;psect for function ___aldiv
  2443  0270                     ___aldiv:	
  2444                           
  2445                           ;incstack = 0
  2446                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  2447  0270  1283               	bcf	3,5	;RP0=0, select bank0
  2448  0271  1303               	bcf	3,6	;RP1=0, select bank0
  2449  0272  01BD               	clrf	___aldiv@sign
  2450  0273  1FB6               	btfss	___aldiv@divisor+3,7
  2451  0274  2A82               	goto	l426
  2452  0275  09B3               	comf	___aldiv@divisor,f
  2453  0276  09B4               	comf	___aldiv@divisor+1,f
  2454  0277  09B5               	comf	___aldiv@divisor+2,f
  2455  0278  09B6               	comf	___aldiv@divisor+3,f
  2456  0279  0AB3               	incf	___aldiv@divisor,f
  2457  027A  1903               	skipnz
  2458  027B  0AB4               	incf	___aldiv@divisor+1,f
  2459  027C  1903               	skipnz
  2460  027D  0AB5               	incf	___aldiv@divisor+2,f
  2461  027E  1903               	skipnz
  2462  027F  0AB6               	incf	___aldiv@divisor+3,f
  2463  0280  01BD               	clrf	___aldiv@sign
  2464  0281  0ABD               	incf	___aldiv@sign,f
  2465  0282                     l426:	
  2466  0282  1FBA               	btfss	___aldiv@dividend+3,7
  2467  0283  2A93               	goto	l1563
  2468  0284  09B7               	comf	___aldiv@dividend,f
  2469  0285  09B8               	comf	___aldiv@dividend+1,f
  2470  0286  09B9               	comf	___aldiv@dividend+2,f
  2471  0287  09BA               	comf	___aldiv@dividend+3,f
  2472  0288  0AB7               	incf	___aldiv@dividend,f
  2473  0289  1903               	skipnz
  2474  028A  0AB8               	incf	___aldiv@dividend+1,f
  2475  028B  1903               	skipnz
  2476  028C  0AB9               	incf	___aldiv@dividend+2,f
  2477  028D  1903               	skipnz
  2478  028E  0ABA               	incf	___aldiv@dividend+3,f
  2479  028F  3001               	movlw	1
  2480  0290  00BB               	movwf	??___aldiv
  2481  0291  083B               	movf	??___aldiv,w
  2482  0292  06BD               	xorwf	___aldiv@sign,f
  2483  0293                     l1563:	
  2484  0293  3000               	movlw	0
  2485  0294  00C1               	movwf	___aldiv@quotient+3
  2486  0295  3000               	movlw	0
  2487  0296  00C0               	movwf	___aldiv@quotient+2
  2488  0297  3000               	movlw	0
  2489  0298  00BF               	movwf	___aldiv@quotient+1
  2490  0299  3000               	movlw	0
  2491  029A  00BE               	movwf	___aldiv@quotient
  2492  029B  0836               	movf	___aldiv@divisor+3,w
  2493  029C  0435               	iorwf	___aldiv@divisor+2,w
  2494  029D  0434               	iorwf	___aldiv@divisor+1,w
  2495  029E  0433               	iorwf	___aldiv@divisor,w
  2496  029F  1903               	skipnz
  2497  02A0  2AE8               	goto	l1585
  2498  02A1  01BC               	clrf	___aldiv@counter
  2499  02A2  0ABC               	incf	___aldiv@counter,f
  2500  02A3                     l1571:	
  2501  02A3  1BB6               	btfsc	___aldiv@divisor+3,7
  2502  02A4  2AB3               	goto	l1573
  2503  02A5  3001               	movlw	1
  2504  02A6  00BB               	movwf	??___aldiv
  2505  02A7                     u1155:	
  2506  02A7  1003               	clrc
  2507  02A8  0DB3               	rlf	___aldiv@divisor,f
  2508  02A9  0DB4               	rlf	___aldiv@divisor+1,f
  2509  02AA  0DB5               	rlf	___aldiv@divisor+2,f
  2510  02AB  0DB6               	rlf	___aldiv@divisor+3,f
  2511  02AC  0BBB               	decfsz	??___aldiv,f
  2512  02AD  2AA7               	goto	u1155
  2513  02AE  3001               	movlw	1
  2514  02AF  00BB               	movwf	??___aldiv
  2515  02B0  083B               	movf	??___aldiv,w
  2516  02B1  07BC               	addwf	___aldiv@counter,f
  2517  02B2  2AA3               	goto	l1571
  2518  02B3                     l1573:	
  2519  02B3  3001               	movlw	1
  2520  02B4  00BB               	movwf	??___aldiv
  2521  02B5                     u1175:	
  2522  02B5  1003               	clrc
  2523  02B6  0DBE               	rlf	___aldiv@quotient,f
  2524  02B7  0DBF               	rlf	___aldiv@quotient+1,f
  2525  02B8  0DC0               	rlf	___aldiv@quotient+2,f
  2526  02B9  0DC1               	rlf	___aldiv@quotient+3,f
  2527  02BA  0BBB               	decfsz	??___aldiv,f
  2528  02BB  2AB5               	goto	u1175
  2529  02BC  0836               	movf	___aldiv@divisor+3,w
  2530  02BD  023A               	subwf	___aldiv@dividend+3,w
  2531  02BE  1D03               	skipz
  2532  02BF  2ACA               	goto	u1185
  2533  02C0  0835               	movf	___aldiv@divisor+2,w
  2534  02C1  0239               	subwf	___aldiv@dividend+2,w
  2535  02C2  1D03               	skipz
  2536  02C3  2ACA               	goto	u1185
  2537  02C4  0834               	movf	___aldiv@divisor+1,w
  2538  02C5  0238               	subwf	___aldiv@dividend+1,w
  2539  02C6  1D03               	skipz
  2540  02C7  2ACA               	goto	u1185
  2541  02C8  0833               	movf	___aldiv@divisor,w
  2542  02C9  0237               	subwf	___aldiv@dividend,w
  2543  02CA                     u1185:	
  2544  02CA  1C03               	skipc
  2545  02CB  2ADB               	goto	l1581
  2546  02CC  0833               	movf	___aldiv@divisor,w
  2547  02CD  02B7               	subwf	___aldiv@dividend,f
  2548  02CE  0834               	movf	___aldiv@divisor+1,w
  2549  02CF  1C03               	skipc
  2550  02D0  0F34               	incfsz	___aldiv@divisor+1,w
  2551  02D1  02B8               	subwf	___aldiv@dividend+1,f
  2552  02D2  0835               	movf	___aldiv@divisor+2,w
  2553  02D3  1C03               	skipc
  2554  02D4  0F35               	incfsz	___aldiv@divisor+2,w
  2555  02D5  02B9               	subwf	___aldiv@dividend+2,f
  2556  02D6  0836               	movf	___aldiv@divisor+3,w
  2557  02D7  1C03               	skipc
  2558  02D8  0F36               	incfsz	___aldiv@divisor+3,w
  2559  02D9  02BA               	subwf	___aldiv@dividend+3,f
  2560  02DA  143E               	bsf	___aldiv@quotient,0
  2561  02DB                     l1581:	
  2562  02DB  3001               	movlw	1
  2563  02DC                     u1195:	
  2564  02DC  1003               	clrc
  2565  02DD  0CB6               	rrf	___aldiv@divisor+3,f
  2566  02DE  0CB5               	rrf	___aldiv@divisor+2,f
  2567  02DF  0CB4               	rrf	___aldiv@divisor+1,f
  2568  02E0  0CB3               	rrf	___aldiv@divisor,f
  2569  02E1  3EFF               	addlw	-1
  2570  02E2  1D03               	skipz
  2571  02E3  2ADC               	goto	u1195
  2572  02E4  3001               	movlw	1
  2573  02E5  02BC               	subwf	___aldiv@counter,f
  2574  02E6  1D03               	btfss	3,2
  2575  02E7  2AB3               	goto	l1573
  2576  02E8                     l1585:	
  2577  02E8  083D               	movf	___aldiv@sign,w
  2578  02E9  1903               	btfsc	3,2
  2579  02EA  2AF6               	goto	l1589
  2580  02EB  09BE               	comf	___aldiv@quotient,f
  2581  02EC  09BF               	comf	___aldiv@quotient+1,f
  2582  02ED  09C0               	comf	___aldiv@quotient+2,f
  2583  02EE  09C1               	comf	___aldiv@quotient+3,f
  2584  02EF  0ABE               	incf	___aldiv@quotient,f
  2585  02F0  1903               	skipnz
  2586  02F1  0ABF               	incf	___aldiv@quotient+1,f
  2587  02F2  1903               	skipnz
  2588  02F3  0AC0               	incf	___aldiv@quotient+2,f
  2589  02F4  1903               	skipnz
  2590  02F5  0AC1               	incf	___aldiv@quotient+3,f
  2591  02F6                     l1589:	
  2592  02F6  0841               	movf	___aldiv@quotient+3,w
  2593  02F7  00B6               	movwf	?___aldiv+3
  2594  02F8  0840               	movf	___aldiv@quotient+2,w
  2595  02F9  00B5               	movwf	?___aldiv+2
  2596  02FA  083F               	movf	___aldiv@quotient+1,w
  2597  02FB  00B4               	movwf	?___aldiv+1
  2598  02FC  083E               	movf	___aldiv@quotient,w
  2599  02FD  00B3               	movwf	?___aldiv
  2600  02FE  0008               	return
  2601  02FF                     __end_of___aldiv:	
  2602                           
  2603                           	psect	text10
  2604  0532                     __ptext10:	
  2605 ;; *************** function ___lwdiv *****************
  2606 ;; Defined at:
  2607 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  2608 ;; Parameters:    Size  Location     Type
  2609 ;;  divisor         2    6[BANK0 ] unsigned int 
  2610 ;;  dividend        2    8[BANK0 ] unsigned int 
  2611 ;; Auto vars:     Size  Location     Type
  2612 ;;  quotient        2   12[BANK0 ] unsigned int 
  2613 ;;  counter         1   11[BANK0 ] unsigned char 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;                  2    6[BANK0 ] unsigned int 
  2616 ;; Registers used:
  2617 ;;		wreg, status,2, status,0
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1
  2623 ;;      Params:         0       4       0
  2624 ;;      Locals:         0       3       0
  2625 ;;      Temps:          0       1       0
  2626 ;;      Totals:         0       8       0
  2627 ;;Total ram usage:        8 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    3
  2630 ;; This function calls:
  2631 ;;		Nothing
  2632 ;; This function is called by:
  2633 ;;		_main
  2634 ;; This function uses a non-reentrant model
  2635 ;;
  2636                           
  2637                           
  2638                           ;psect for function ___lwdiv
  2639  0532                     ___lwdiv:	
  2640                           
  2641                           ;incstack = 0
  2642                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2643  0532  1283               	bcf	3,5	;RP0=0, select bank0
  2644  0533  1303               	bcf	3,6	;RP1=0, select bank0
  2645  0534  01AC               	clrf	___lwdiv@quotient
  2646  0535  01AD               	clrf	___lwdiv@quotient+1
  2647  0536  0826               	movf	___lwdiv@divisor,w
  2648  0537  0427               	iorwf	___lwdiv@divisor+1,w
  2649  0538  1903               	btfsc	3,2
  2650  0539  2D6B               	goto	l1715
  2651  053A  01AB               	clrf	___lwdiv@counter
  2652  053B  0AAB               	incf	___lwdiv@counter,f
  2653  053C                     l1703:	
  2654  053C  1BA7               	btfsc	___lwdiv@divisor+1,7
  2655  053D  2D4A               	goto	l1705
  2656  053E  3001               	movlw	1
  2657  053F                     u1325:	
  2658  053F  1003               	clrc
  2659  0540  0DA6               	rlf	___lwdiv@divisor,f
  2660  0541  0DA7               	rlf	___lwdiv@divisor+1,f
  2661  0542  3EFF               	addlw	-1
  2662  0543  1D03               	skipz
  2663  0544  2D3F               	goto	u1325
  2664  0545  3001               	movlw	1
  2665  0546  00AA               	movwf	??___lwdiv
  2666  0547  082A               	movf	??___lwdiv,w
  2667  0548  07AB               	addwf	___lwdiv@counter,f
  2668  0549  2D3C               	goto	l1703
  2669  054A                     l1705:	
  2670  054A  3001               	movlw	1
  2671  054B                     u1345:	
  2672  054B  1003               	clrc
  2673  054C  0DAC               	rlf	___lwdiv@quotient,f
  2674  054D  0DAD               	rlf	___lwdiv@quotient+1,f
  2675  054E  3EFF               	addlw	-1
  2676  054F  1D03               	skipz
  2677  0550  2D4B               	goto	u1345
  2678  0551  0827               	movf	___lwdiv@divisor+1,w
  2679  0552  0229               	subwf	___lwdiv@dividend+1,w
  2680  0553  1D03               	skipz
  2681  0554  2D57               	goto	u1355
  2682  0555  0826               	movf	___lwdiv@divisor,w
  2683  0556  0228               	subwf	___lwdiv@dividend,w
  2684  0557                     u1355:	
  2685  0557  1C03               	skipc
  2686  0558  2D60               	goto	l1711
  2687  0559  0826               	movf	___lwdiv@divisor,w
  2688  055A  02A8               	subwf	___lwdiv@dividend,f
  2689  055B  0827               	movf	___lwdiv@divisor+1,w
  2690  055C  1C03               	skipc
  2691  055D  03A9               	decf	___lwdiv@dividend+1,f
  2692  055E  02A9               	subwf	___lwdiv@dividend+1,f
  2693  055F  142C               	bsf	___lwdiv@quotient,0
  2694  0560                     l1711:	
  2695  0560  3001               	movlw	1
  2696  0561                     u1365:	
  2697  0561  1003               	clrc
  2698  0562  0CA7               	rrf	___lwdiv@divisor+1,f
  2699  0563  0CA6               	rrf	___lwdiv@divisor,f
  2700  0564  3EFF               	addlw	-1
  2701  0565  1D03               	skipz
  2702  0566  2D61               	goto	u1365
  2703  0567  3001               	movlw	1
  2704  0568  02AB               	subwf	___lwdiv@counter,f
  2705  0569  1D03               	btfss	3,2
  2706  056A  2D4A               	goto	l1705
  2707  056B                     l1715:	
  2708  056B  082D               	movf	___lwdiv@quotient+1,w
  2709  056C  00A7               	movwf	?___lwdiv+1
  2710  056D  082C               	movf	___lwdiv@quotient,w
  2711  056E  00A6               	movwf	?___lwdiv
  2712  056F  0008               	return
  2713  0570                     __end_of___lwdiv:	
  2714                           
  2715                           	psect	text11
  2716  0627                     __ptext11:	
  2717 ;; *************** function _UART_vidInit *****************
  2718 ;; Defined at:
  2719 ;;		line 18 in file "UART_m.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;		None
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;		None
  2724 ;; Return value:  Size  Location     Type
  2725 ;;                  1    wreg      void 
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0, pclath, cstack
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMMON   BANK0   BANK1
  2733 ;;      Params:         0       0       0
  2734 ;;      Locals:         0       0       0
  2735 ;;      Temps:          0       1       0
  2736 ;;      Totals:         0       1       0
  2737 ;;Total ram usage:        1 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; Hardware stack levels required when called:    4
  2740 ;; This function calls:
  2741 ;;		_UART_u8GetNodeID
  2742 ;; This function is called by:
  2743 ;;		_main
  2744 ;; This function uses a non-reentrant model
  2745 ;;
  2746                           
  2747                           
  2748                           ;psect for function _UART_vidInit
  2749  0627                     _UART_vidInit:	
  2750                           
  2751                           ;UART_m.c: 20: BRGH = 0;
  2752                           
  2753                           ;incstack = 0
  2754                           ; Regs used in _UART_vidInit: [wreg+status,2+status,0+pclath+cstack]
  2755  0627  1683               	bsf	3,5	;RP0=1, select bank1
  2756  0628  1303               	bcf	3,6	;RP1=0, select bank1
  2757  0629  1118               	bcf	24,2	;volatile
  2758                           
  2759                           ;UART_m.c: 21: SPBRG = (unsigned char)((((unsigned long)20000000 / 9600)/64) - 1);
  2760  062A  301F               	movlw	31
  2761  062B  0099               	movwf	25	;volatile
  2762                           
  2763                           ;UART_m.c: 22: SYNC = 0;
  2764  062C  1218               	bcf	24,4	;volatile
  2765                           
  2766                           ;UART_m.c: 23: SPEN = 1;
  2767  062D  1283               	bcf	3,5	;RP0=0, select bank0
  2768  062E  1303               	bcf	3,6	;RP1=0, select bank0
  2769  062F  1798               	bsf	24,7	;volatile
  2770                           
  2771                           ;UART_m.c: 24: TRISC6 = 1;
  2772  0630  1683               	bsf	3,5	;RP0=1, select bank1
  2773  0631  1303               	bcf	3,6	;RP1=0, select bank1
  2774  0632  1707               	bsf	7,6	;volatile
  2775                           
  2776                           ;UART_m.c: 25: TRISC7 = 1;
  2777  0633  1787               	bsf	7,7	;volatile
  2778                           
  2779                           ;UART_m.c: 26: TXEN = 1;
  2780  0634  1698               	bsf	24,5	;volatile
  2781                           
  2782                           ;UART_m.c: 27: RCIE = 1;
  2783  0635  168C               	bsf	12,5	;volatile
  2784                           
  2785                           ;UART_m.c: 28: PEIE = 1;
  2786  0636  170B               	bsf	11,6	;volatile
  2787                           
  2788                           ;UART_m.c: 29: GIE = 1;
  2789  0637  178B               	bsf	11,7	;volatile
  2790                           
  2791                           ;UART_m.c: 30: CREN = 1;
  2792  0638  1283               	bcf	3,5	;RP0=0, select bank0
  2793  0639  1303               	bcf	3,6	;RP1=0, select bank0
  2794  063A  1618               	bsf	24,4	;volatile
  2795                           
  2796                           ;UART_m.c: 32: ECU_ID = UART_u8GetNodeID();
  2797  063B  2671               	fcall	_UART_u8GetNodeID
  2798  063C  1283               	bcf	3,5	;RP0=0, select bank0
  2799  063D  1303               	bcf	3,6	;RP1=0, select bank0
  2800  063E  00A7               	movwf	??_UART_vidInit
  2801  063F  0827               	movf	??_UART_vidInit,w
  2802  0640  00DC               	movwf	_ECU_ID
  2803  0641  0008               	return
  2804  0642                     __end_of_UART_vidInit:	
  2805                           
  2806                           	psect	text12
  2807  0671                     __ptext12:	
  2808 ;; *************** function _UART_u8GetNodeID *****************
  2809 ;; Defined at:
  2810 ;;		line 76 in file "UART_m.c"
  2811 ;; Parameters:    Size  Location     Type
  2812 ;;		None
  2813 ;; Auto vars:     Size  Location     Type
  2814 ;;		None
  2815 ;; Return value:  Size  Location     Type
  2816 ;;                  1    wreg      unsigned char 
  2817 ;; Registers used:
  2818 ;;		wreg, status,2, status,0
  2819 ;; Tracked objects:
  2820 ;;		On entry : 0/0
  2821 ;;		On exit  : 0/0
  2822 ;;		Unchanged: 0/0
  2823 ;; Data sizes:     COMMON   BANK0   BANK1
  2824 ;;      Params:         0       0       0
  2825 ;;      Locals:         0       0       0
  2826 ;;      Temps:          0       1       0
  2827 ;;      Totals:         0       1       0
  2828 ;;Total ram usage:        1 bytes
  2829 ;; Hardware stack levels used:    1
  2830 ;; Hardware stack levels required when called:    3
  2831 ;; This function calls:
  2832 ;;		Nothing
  2833 ;; This function is called by:
  2834 ;;		_UART_vidInit
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           
  2839                           ;psect for function _UART_u8GetNodeID
  2840  0671                     _UART_u8GetNodeID:	
  2841                           
  2842                           ;UART_m.c: 78: return Data_Buffer.ID = (PORTB & 0x3F);
  2843                           
  2844                           ;incstack = 0
  2845                           ; Regs used in _UART_u8GetNodeID: [wreg+status,2+status,0]
  2846  0671  303F               	movlw	63
  2847  0672  1283               	bcf	3,5	;RP0=0, select bank0
  2848  0673  1303               	bcf	3,6	;RP1=0, select bank0
  2849  0674  0506               	andwf	6,w	;volatile
  2850  0675  00A6               	movwf	??_UART_u8GetNodeID
  2851  0676  1683               	bsf	3,5	;RP0=1, select bank1
  2852  0677  1303               	bcf	3,6	;RP1=0, select bank1
  2853  0678  0832               	movf	_Data_Buffer^(0+128),w
  2854  0679  1283               	bcf	3,5	;RP0=0, select bank0
  2855  067A  1303               	bcf	3,6	;RP1=0, select bank0
  2856  067B  0626               	xorwf	??_UART_u8GetNodeID,w
  2857  067C  3980               	andlw	-128
  2858  067D  0626               	xorwf	??_UART_u8GetNodeID,w
  2859  067E  1683               	bsf	3,5	;RP0=1, select bank1
  2860  067F  1303               	bcf	3,6	;RP1=0, select bank1
  2861  0680  00B2               	movwf	_Data_Buffer^(0+128)
  2862  0681  0832               	movf	_Data_Buffer^(0+128),w
  2863  0682  397F               	andlw	127
  2864  0683  0008               	return
  2865  0684                     __end_of_UART_u8GetNodeID:	
  2866                           
  2867                           	psect	text13
  2868  0684                     __ptext13:	
  2869 ;; *************** function _I2CInit *****************
  2870 ;; Defined at:
  2871 ;;		line 23 in file "ADXL_m.c"
  2872 ;; Parameters:    Size  Location     Type
  2873 ;;		None
  2874 ;; Auto vars:     Size  Location     Type
  2875 ;;		None
  2876 ;; Return value:  Size  Location     Type
  2877 ;;                  1    wreg      void 
  2878 ;; Registers used:
  2879 ;;		wreg, status,2
  2880 ;; Tracked objects:
  2881 ;;		On entry : 0/0
  2882 ;;		On exit  : 0/0
  2883 ;;		Unchanged: 0/0
  2884 ;; Data sizes:     COMMON   BANK0   BANK1
  2885 ;;      Params:         0       0       0
  2886 ;;      Locals:         0       0       0
  2887 ;;      Temps:          0       0       0
  2888 ;;      Totals:         0       0       0
  2889 ;;Total ram usage:        0 bytes
  2890 ;; Hardware stack levels used:    1
  2891 ;; Hardware stack levels required when called:    3
  2892 ;; This function calls:
  2893 ;;		Nothing
  2894 ;; This function is called by:
  2895 ;;		_main
  2896 ;; This function uses a non-reentrant model
  2897 ;;
  2898                           
  2899                           
  2900                           ;psect for function _I2CInit
  2901  0684                     _I2CInit:	
  2902                           
  2903                           ;ADXL_m.c: 25: TRISCbits.TRISC3 = 1;
  2904                           
  2905                           ;incstack = 0
  2906                           ; Regs used in _I2CInit: [wreg+status,2]
  2907  0684  1683               	bsf	3,5	;RP0=1, select bank1
  2908  0685  1303               	bcf	3,6	;RP1=0, select bank1
  2909  0686  1587               	bsf	7,3	;volatile
  2910                           
  2911                           ;ADXL_m.c: 26: TRISCbits.TRISC4 = 1;
  2912  0687  1607               	bsf	7,4	;volatile
  2913                           
  2914                           ;ADXL_m.c: 27: SSPSTAT |= 0x80;
  2915  0688  1794               	bsf	20,7	;volatile
  2916                           
  2917                           ;ADXL_m.c: 28: SSPCON = 0x28;
  2918  0689  3028               	movlw	40
  2919  068A  1283               	bcf	3,5	;RP0=0, select bank0
  2920  068B  1303               	bcf	3,6	;RP1=0, select bank0
  2921  068C  0094               	movwf	20	;volatile
  2922                           
  2923                           ;ADXL_m.c: 30: SSPCON2 = 0x00;
  2924  068D  1683               	bsf	3,5	;RP0=1, select bank1
  2925  068E  1303               	bcf	3,6	;RP1=0, select bank1
  2926  068F  0191               	clrf	17	;volatile
  2927                           
  2928                           ;ADXL_m.c: 31: SSPADD = 49;
  2929  0690  3031               	movlw	49
  2930  0691  0093               	movwf	19	;volatile
  2931                           
  2932                           ;ADXL_m.c: 32: PIR1bits.SSPIF = 0;
  2933  0692  1283               	bcf	3,5	;RP0=0, select bank0
  2934  0693  1303               	bcf	3,6	;RP1=0, select bank0
  2935  0694  118C               	bcf	12,3	;volatile
  2936                           
  2937                           ;ADXL_m.c: 33: PIR2bits.BCLIF = 0;
  2938  0695  118D               	bcf	13,3	;volatile
  2939  0696  0008               	return
  2940  0697                     __end_of_I2CInit:	
  2941                           
  2942                           	psect	text14
  2943  06DD                     __ptext14:	
  2944 ;; *************** function _I2CAck *****************
  2945 ;; Defined at:
  2946 ;;		line 89 in file "ADXL_m.c"
  2947 ;; Parameters:    Size  Location     Type
  2948 ;;		None
  2949 ;; Auto vars:     Size  Location     Type
  2950 ;;		None
  2951 ;; Return value:  Size  Location     Type
  2952 ;;                  1    wreg      void 
  2953 ;; Registers used:
  2954 ;;		None
  2955 ;; Tracked objects:
  2956 ;;		On entry : 0/0
  2957 ;;		On exit  : 0/0
  2958 ;;		Unchanged: 0/0
  2959 ;; Data sizes:     COMMON   BANK0   BANK1
  2960 ;;      Params:         0       0       0
  2961 ;;      Locals:         0       0       0
  2962 ;;      Temps:          0       0       0
  2963 ;;      Totals:         0       0       0
  2964 ;;Total ram usage:        0 bytes
  2965 ;; Hardware stack levels used:    1
  2966 ;; Hardware stack levels required when called:    3
  2967 ;; This function calls:
  2968 ;;		Nothing
  2969 ;; This function is called by:
  2970 ;;		_main
  2971 ;; This function uses a non-reentrant model
  2972 ;;
  2973                           
  2974                           
  2975                           ;psect for function _I2CAck
  2976  06DD                     _I2CAck:	
  2977                           
  2978                           ;ADXL_m.c: 91: ACKDT = 0;
  2979                           
  2980                           ;incstack = 0
  2981                           ; Regs used in _I2CAck: []
  2982  06DD  1683               	bsf	3,5	;RP0=1, select bank1
  2983  06DE  1303               	bcf	3,6	;RP1=0, select bank1
  2984  06DF  1291               	bcf	17,5	;volatile
  2985                           
  2986                           ;ADXL_m.c: 92: ACKEN = 1;
  2987  06E0  1611               	bsf	17,4	;volatile
  2988  06E1                     l224:	
  2989                           ;ADXL_m.c: 93: while(ACKEN);
  2990                           
  2991  06E1  1E11               	btfss	17,4	;volatile
  2992  06E2  0008               	return
  2993  06E3  2EE1               	goto	l224
  2994  06E4                     __end_of_I2CAck:	
  2995                           
  2996                           	psect	text15
  2997  065B                     __ptext15:	
  2998 ;; *************** function _E_Read *****************
  2999 ;; Defined at:
  3000 ;;		line 171 in file "ADXL_m.c"
  3001 ;; Parameters:    Size  Location     Type
  3002 ;;  addr            2    8[BANK0 ] int 
  3003 ;; Auto vars:     Size  Location     Type
  3004 ;;  ch              1   11[BANK0 ] unsigned char 
  3005 ;; Return value:  Size  Location     Type
  3006 ;;                  1    wreg      unsigned char 
  3007 ;; Registers used:
  3008 ;;		wreg, status,2, status,0, pclath, cstack
  3009 ;; Tracked objects:
  3010 ;;		On entry : 0/0
  3011 ;;		On exit  : 0/0
  3012 ;;		Unchanged: 0/0
  3013 ;; Data sizes:     COMMON   BANK0   BANK1
  3014 ;;      Params:         0       2       0
  3015 ;;      Locals:         0       1       0
  3016 ;;      Temps:          0       1       0
  3017 ;;      Totals:         0       4       0
  3018 ;;Total ram usage:        4 bytes
  3019 ;; Hardware stack levels used:    1
  3020 ;; Hardware stack levels required when called:    5
  3021 ;; This function calls:
  3022 ;;		_I2CNak
  3023 ;;		_I2CRead
  3024 ;;		_I2CRestart
  3025 ;;		_I2CSend
  3026 ;;		_I2CStart
  3027 ;;		_I2CStop
  3028 ;; This function is called by:
  3029 ;;		_main
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           
  3034                           ;psect for function _E_Read
  3035  065B                     _E_Read:	
  3036                           
  3037                           ;ADXL_m.c: 173: unsigned char ch;
  3038                           ;ADXL_m.c: 175: I2CStart();
  3039                           
  3040                           ;incstack = 0
  3041                           ; Regs used in _E_Read: [wreg+status,2+status,0+pclath+cstack]
  3042  065B  26F1               	fcall	_I2CStart
  3043                           
  3044                           ;ADXL_m.c: 177: I2CSend(0xA6);
  3045  065C  30A6               	movlw	166
  3046  065D  26C1               	fcall	_I2CSend
  3047                           
  3048                           ;ADXL_m.c: 179: I2CSend(addr);
  3049  065E  1283               	bcf	3,5	;RP0=0, select bank0
  3050  065F  1303               	bcf	3,6	;RP1=0, select bank0
  3051  0660  0828               	movf	E_Read@addr,w
  3052  0661  26C1               	fcall	_I2CSend
  3053                           
  3054                           ;ADXL_m.c: 181: I2CRestart();
  3055  0662  26F7               	fcall	_I2CRestart
  3056                           
  3057                           ;ADXL_m.c: 183: I2CSend(0xA7);
  3058  0663  30A7               	movlw	167
  3059  0664  26C1               	fcall	_I2CSend
  3060                           
  3061                           ;ADXL_m.c: 185: ch = I2CRead();
  3062  0665  2697               	fcall	_I2CRead
  3063  0666  1283               	bcf	3,5	;RP0=0, select bank0
  3064  0667  1303               	bcf	3,6	;RP1=0, select bank0
  3065  0668  00AA               	movwf	??_E_Read
  3066  0669  082A               	movf	??_E_Read,w
  3067  066A  00AB               	movwf	E_Read@ch
  3068                           
  3069                           ;ADXL_m.c: 186: I2CNak();
  3070  066B  26E4               	fcall	_I2CNak
  3071                           
  3072                           ;ADXL_m.c: 187: I2CStop();
  3073  066C  26EB               	fcall	_I2CStop
  3074                           
  3075                           ;ADXL_m.c: 188: return ch;
  3076  066D  1283               	bcf	3,5	;RP0=0, select bank0
  3077  066E  1303               	bcf	3,6	;RP1=0, select bank0
  3078  066F  082B               	movf	E_Read@ch,w
  3079  0670  0008               	return
  3080  0671                     __end_of_E_Read:	
  3081                           
  3082                           	psect	text16
  3083  06EB                     __ptext16:	
  3084 ;; *************** function _I2CStop *****************
  3085 ;; Defined at:
  3086 ;;		line 64 in file "ADXL_m.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;		None
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;		None
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		None
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMMON   BANK0   BANK1
  3100 ;;      Params:         0       0       0
  3101 ;;      Locals:         0       0       0
  3102 ;;      Temps:          0       0       0
  3103 ;;      Totals:         0       0       0
  3104 ;;Total ram usage:        0 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    3
  3107 ;; This function calls:
  3108 ;;		Nothing
  3109 ;; This function is called by:
  3110 ;;		_main
  3111 ;;		_E_Write
  3112 ;;		_E_Read
  3113 ;; This function uses a non-reentrant model
  3114 ;;
  3115                           
  3116                           
  3117                           ;psect for function _I2CStop
  3118  06EB                     _I2CStop:	
  3119                           
  3120                           ;ADXL_m.c: 66: PEN = 1;
  3121                           
  3122                           ;incstack = 0
  3123                           ; Regs used in _I2CStop: []
  3124  06EB  1683               	bsf	3,5	;RP0=1, select bank1
  3125  06EC  1303               	bcf	3,6	;RP1=0, select bank1
  3126  06ED  1511               	bsf	17,2	;volatile
  3127  06EE                     l212:	
  3128                           ;ADXL_m.c: 67: while(PEN);
  3129                           
  3130  06EE  1D11               	btfss	17,2	;volatile
  3131  06EF  0008               	return
  3132  06F0  2EEE               	goto	l212
  3133  06F1                     __end_of_I2CStop:	
  3134                           
  3135                           	psect	text17
  3136  06F1                     __ptext17:	
  3137 ;; *************** function _I2CStart *****************
  3138 ;; Defined at:
  3139 ;;		line 51 in file "ADXL_m.c"
  3140 ;; Parameters:    Size  Location     Type
  3141 ;;		None
  3142 ;; Auto vars:     Size  Location     Type
  3143 ;;		None
  3144 ;; Return value:  Size  Location     Type
  3145 ;;                  1    wreg      void 
  3146 ;; Registers used:
  3147 ;;		None
  3148 ;; Tracked objects:
  3149 ;;		On entry : 0/0
  3150 ;;		On exit  : 0/0
  3151 ;;		Unchanged: 0/0
  3152 ;; Data sizes:     COMMON   BANK0   BANK1
  3153 ;;      Params:         0       0       0
  3154 ;;      Locals:         0       0       0
  3155 ;;      Temps:          0       0       0
  3156 ;;      Totals:         0       0       0
  3157 ;;Total ram usage:        0 bytes
  3158 ;; Hardware stack levels used:    1
  3159 ;; Hardware stack levels required when called:    3
  3160 ;; This function calls:
  3161 ;;		Nothing
  3162 ;; This function is called by:
  3163 ;;		_main
  3164 ;;		_E_Write
  3165 ;;		_E_Read
  3166 ;; This function uses a non-reentrant model
  3167 ;;
  3168                           
  3169                           
  3170                           ;psect for function _I2CStart
  3171  06F1                     _I2CStart:	
  3172                           
  3173                           ;ADXL_m.c: 53: SEN = 1;
  3174                           
  3175                           ;incstack = 0
  3176                           ; Regs used in _I2CStart: []
  3177  06F1  1683               	bsf	3,5	;RP0=1, select bank1
  3178  06F2  1303               	bcf	3,6	;RP1=0, select bank1
  3179  06F3  1411               	bsf	17,0	;volatile
  3180  06F4                     l206:	
  3181                           ;ADXL_m.c: 54: while(SEN);
  3182                           
  3183  06F4  1C11               	btfss	17,0	;volatile
  3184  06F5  0008               	return
  3185  06F6  2EF4               	goto	l206
  3186  06F7                     __end_of_I2CStart:	
  3187                           
  3188                           	psect	text18
  3189  06C1                     __ptext18:	
  3190 ;; *************** function _I2CSend *****************
  3191 ;; Defined at:
  3192 ;;		line 128 in file "ADXL_m.c"
  3193 ;; Parameters:    Size  Location     Type
  3194 ;;  dat             1    wreg     unsigned char 
  3195 ;; Auto vars:     Size  Location     Type
  3196 ;;  dat             1    6[BANK0 ] unsigned char 
  3197 ;; Return value:  Size  Location     Type
  3198 ;;                  1    wreg      void 
  3199 ;; Registers used:
  3200 ;;		wreg, status,2, status,0, pclath, cstack
  3201 ;; Tracked objects:
  3202 ;;		On entry : 0/0
  3203 ;;		On exit  : 0/0
  3204 ;;		Unchanged: 0/0
  3205 ;; Data sizes:     COMMON   BANK0   BANK1
  3206 ;;      Params:         0       0       0
  3207 ;;      Locals:         0       1       0
  3208 ;;      Temps:          0       0       0
  3209 ;;      Totals:         0       1       0
  3210 ;;Total ram usage:        1 bytes
  3211 ;; Hardware stack levels used:    1
  3212 ;; Hardware stack levels required when called:    4
  3213 ;; This function calls:
  3214 ;;		_I2CWait
  3215 ;; This function is called by:
  3216 ;;		_main
  3217 ;;		_E_Write
  3218 ;;		_E_Read
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222                           
  3223                           ;psect for function _I2CSend
  3224  06C1                     _I2CSend:	
  3225                           
  3226                           ;incstack = 0
  3227                           ; Regs used in _I2CSend: [wreg+status,2+status,0+pclath+cstack]
  3228                           ;I2CSend@dat stored from wreg
  3229  06C1  1283               	bcf	3,5	;RP0=0, select bank0
  3230  06C2  1303               	bcf	3,6	;RP1=0, select bank0
  3231  06C3  00A6               	movwf	I2CSend@dat
  3232                           
  3233                           ;ADXL_m.c: 130: SSPBUF = dat;
  3234  06C4  0826               	movf	I2CSend@dat,w
  3235  06C5  0093               	movwf	19	;volatile
  3236  06C6                     l242:	
  3237                           ;ADXL_m.c: 131: while(BF);
  3238                           
  3239  06C6  1683               	bsf	3,5	;RP0=1, select bank1
  3240  06C7  1303               	bcf	3,6	;RP1=0, select bank1
  3241  06C8  1814               	btfsc	20,0	;volatile
  3242  06C9  2EC6               	goto	l242
  3243                           
  3244                           ;ADXL_m.c: 132: I2CWait();
  3245  06CA  26CC               	fcall	_I2CWait
  3246  06CB  0008               	return
  3247  06CC                     __end_of_I2CSend:	
  3248                           
  3249                           	psect	text19
  3250  06F7                     __ptext19:	
  3251 ;; *************** function _I2CRestart *****************
  3252 ;; Defined at:
  3253 ;;		line 77 in file "ADXL_m.c"
  3254 ;; Parameters:    Size  Location     Type
  3255 ;;		None
  3256 ;; Auto vars:     Size  Location     Type
  3257 ;;		None
  3258 ;; Return value:  Size  Location     Type
  3259 ;;                  1    wreg      void 
  3260 ;; Registers used:
  3261 ;;		None
  3262 ;; Tracked objects:
  3263 ;;		On entry : 0/0
  3264 ;;		On exit  : 0/0
  3265 ;;		Unchanged: 0/0
  3266 ;; Data sizes:     COMMON   BANK0   BANK1
  3267 ;;      Params:         0       0       0
  3268 ;;      Locals:         0       0       0
  3269 ;;      Temps:          0       0       0
  3270 ;;      Totals:         0       0       0
  3271 ;;Total ram usage:        0 bytes
  3272 ;; Hardware stack levels used:    1
  3273 ;; Hardware stack levels required when called:    3
  3274 ;; This function calls:
  3275 ;;		Nothing
  3276 ;; This function is called by:
  3277 ;;		_main
  3278 ;;		_E_Read
  3279 ;; This function uses a non-reentrant model
  3280 ;;
  3281                           
  3282                           
  3283                           ;psect for function _I2CRestart
  3284  06F7                     _I2CRestart:	
  3285                           
  3286                           ;ADXL_m.c: 79: RSEN = 1;
  3287                           
  3288                           ;incstack = 0
  3289                           ; Regs used in _I2CRestart: []
  3290  06F7  1683               	bsf	3,5	;RP0=1, select bank1
  3291  06F8  1303               	bcf	3,6	;RP1=0, select bank1
  3292  06F9  1491               	bsf	17,1	;volatile
  3293  06FA                     l218:	
  3294                           ;ADXL_m.c: 80: while(RSEN);
  3295                           
  3296  06FA  1C91               	btfss	17,1	;volatile
  3297  06FB  0008               	return
  3298  06FC  2EFA               	goto	l218
  3299  06FD                     __end_of_I2CRestart:	
  3300                           
  3301                           	psect	text20
  3302  0697                     __ptext20:	
  3303 ;; *************** function _I2CRead *****************
  3304 ;; Defined at:
  3305 ;;		line 141 in file "ADXL_m.c"
  3306 ;; Parameters:    Size  Location     Type
  3307 ;;		None
  3308 ;; Auto vars:     Size  Location     Type
  3309 ;;  temp            1    7[BANK0 ] unsigned char 
  3310 ;; Return value:  Size  Location     Type
  3311 ;;                  1    wreg      unsigned char 
  3312 ;; Registers used:
  3313 ;;		wreg, status,2, status,0, pclath, cstack
  3314 ;; Tracked objects:
  3315 ;;		On entry : 0/0
  3316 ;;		On exit  : 0/0
  3317 ;;		Unchanged: 0/0
  3318 ;; Data sizes:     COMMON   BANK0   BANK1
  3319 ;;      Params:         0       0       0
  3320 ;;      Locals:         0       1       0
  3321 ;;      Temps:          0       1       0
  3322 ;;      Totals:         0       2       0
  3323 ;;Total ram usage:        2 bytes
  3324 ;; Hardware stack levels used:    1
  3325 ;; Hardware stack levels required when called:    4
  3326 ;; This function calls:
  3327 ;;		_I2CWait
  3328 ;; This function is called by:
  3329 ;;		_main
  3330 ;;		_E_Read
  3331 ;; This function uses a non-reentrant model
  3332 ;;
  3333                           
  3334                           
  3335                           ;psect for function _I2CRead
  3336  0697                     _I2CRead:	
  3337                           
  3338                           ;ADXL_m.c: 143: unsigned char temp;
  3339                           ;ADXL_m.c: 145: RCEN = 1;
  3340                           
  3341                           ;incstack = 0
  3342                           ; Regs used in _I2CRead: [wreg+status,2+status,0+pclath+cstack]
  3343  0697  1683               	bsf	3,5	;RP0=1, select bank1
  3344  0698  1303               	bcf	3,6	;RP1=0, select bank1
  3345  0699  1591               	bsf	17,3	;volatile
  3346  069A                     l248:	
  3347                           ;ADXL_m.c: 146: while(!BF);
  3348                           
  3349  069A  1C14               	btfss	20,0	;volatile
  3350  069B  2E9A               	goto	l248
  3351                           
  3352                           ;ADXL_m.c: 147: temp = SSPBUF;
  3353  069C  1283               	bcf	3,5	;RP0=0, select bank0
  3354  069D  1303               	bcf	3,6	;RP1=0, select bank0
  3355  069E  0813               	movf	19,w	;volatile
  3356  069F  00A6               	movwf	??_I2CRead
  3357  06A0  0826               	movf	??_I2CRead,w
  3358  06A1  00A7               	movwf	I2CRead@temp
  3359                           
  3360                           ;ADXL_m.c: 148: I2CWait();
  3361  06A2  26CC               	fcall	_I2CWait
  3362                           
  3363                           ;ADXL_m.c: 149: return temp;
  3364  06A3  1283               	bcf	3,5	;RP0=0, select bank0
  3365  06A4  1303               	bcf	3,6	;RP1=0, select bank0
  3366  06A5  0827               	movf	I2CRead@temp,w
  3367  06A6  0008               	return
  3368  06A7                     __end_of_I2CRead:	
  3369                           
  3370                           	psect	text21
  3371  06CC                     __ptext21:	
  3372 ;; *************** function _I2CWait *****************
  3373 ;; Defined at:
  3374 ;;		line 115 in file "ADXL_m.c"
  3375 ;; Parameters:    Size  Location     Type
  3376 ;;		None
  3377 ;; Auto vars:     Size  Location     Type
  3378 ;;		None
  3379 ;; Return value:  Size  Location     Type
  3380 ;;                  1    wreg      void 
  3381 ;; Registers used:
  3382 ;;		wreg, status,2
  3383 ;; Tracked objects:
  3384 ;;		On entry : 0/0
  3385 ;;		On exit  : 0/0
  3386 ;;		Unchanged: 0/0
  3387 ;; Data sizes:     COMMON   BANK0   BANK1
  3388 ;;      Params:         0       0       0
  3389 ;;      Locals:         0       0       0
  3390 ;;      Temps:          0       0       0
  3391 ;;      Totals:         0       0       0
  3392 ;;Total ram usage:        0 bytes
  3393 ;; Hardware stack levels used:    1
  3394 ;; Hardware stack levels required when called:    3
  3395 ;; This function calls:
  3396 ;;		Nothing
  3397 ;; This function is called by:
  3398 ;;		_I2CSend
  3399 ;;		_I2CRead
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           
  3404                           ;psect for function _I2CWait
  3405  06CC                     _I2CWait:	
  3406  06CC                     l1497:	
  3407                           ;ADXL_m.c: 117: while ((SSPCON2 & 0x1F ) || ( SSPSTAT & 0x04 ) );
  3408                           
  3409                           ;incstack = 0
  3410                           ; Regs used in _I2CWait: [wreg+status,2]
  3411                           
  3412  06CC  1683               	bsf	3,5	;RP0=1, select bank1
  3413  06CD  1303               	bcf	3,6	;RP1=0, select bank1
  3414  06CE  0811               	movf	17,w	;volatile
  3415  06CF  391F               	andlw	31
  3416  06D0  1D03               	btfss	3,2
  3417  06D1  2ECC               	goto	l1497
  3418  06D2  1D14               	btfss	20,2	;volatile
  3419  06D3  0008               	return
  3420  06D4  2ECC               	goto	l1497
  3421  06D5                     __end_of_I2CWait:	
  3422                           
  3423                           	psect	text22
  3424  06E4                     __ptext22:	
  3425 ;; *************** function _I2CNak *****************
  3426 ;; Defined at:
  3427 ;;		line 102 in file "ADXL_m.c"
  3428 ;; Parameters:    Size  Location     Type
  3429 ;;		None
  3430 ;; Auto vars:     Size  Location     Type
  3431 ;;		None
  3432 ;; Return value:  Size  Location     Type
  3433 ;;                  1    wreg      void 
  3434 ;; Registers used:
  3435 ;;		None
  3436 ;; Tracked objects:
  3437 ;;		On entry : 0/0
  3438 ;;		On exit  : 0/0
  3439 ;;		Unchanged: 0/0
  3440 ;; Data sizes:     COMMON   BANK0   BANK1
  3441 ;;      Params:         0       0       0
  3442 ;;      Locals:         0       0       0
  3443 ;;      Temps:          0       0       0
  3444 ;;      Totals:         0       0       0
  3445 ;;Total ram usage:        0 bytes
  3446 ;; Hardware stack levels used:    1
  3447 ;; Hardware stack levels required when called:    3
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_main
  3452 ;;		_E_Read
  3453 ;; This function uses a non-reentrant model
  3454 ;;
  3455                           
  3456                           
  3457                           ;psect for function _I2CNak
  3458  06E4                     _I2CNak:	
  3459                           
  3460                           ;ADXL_m.c: 104: ACKDT = 1;
  3461                           
  3462                           ;incstack = 0
  3463                           ; Regs used in _I2CNak: []
  3464  06E4  1683               	bsf	3,5	;RP0=1, select bank1
  3465  06E5  1303               	bcf	3,6	;RP1=0, select bank1
  3466  06E6  1691               	bsf	17,5	;volatile
  3467                           
  3468                           ;ADXL_m.c: 105: ACKEN = 1;
  3469  06E7  1611               	bsf	17,4	;volatile
  3470  06E8                     l230:	
  3471                           ;ADXL_m.c: 106: while(ACKEN);
  3472                           
  3473  06E8  1E11               	btfss	17,4	;volatile
  3474  06E9  0008               	return
  3475  06EA  2EE8               	goto	l230
  3476  06EB                     __end_of_I2CNak:	
  3477                           
  3478                           	psect	text23
  3479  0601                     __ptext23:	
  3480 ;; *************** function _UART_vidNewDataReceived *****************
  3481 ;; Defined at:
  3482 ;;		line 35 in file "UART_m.c"
  3483 ;; Parameters:    Size  Location     Type
  3484 ;;		None
  3485 ;; Auto vars:     Size  Location     Type
  3486 ;;		None
  3487 ;; Return value:  Size  Location     Type
  3488 ;;                  1    wreg      void 
  3489 ;; Registers used:
  3490 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3491 ;; Tracked objects:
  3492 ;;		On entry : 0/0
  3493 ;;		On exit  : 0/0
  3494 ;;		Unchanged: 0/0
  3495 ;; Data sizes:     COMMON   BANK0   BANK1
  3496 ;;      Params:         0       0       0
  3497 ;;      Locals:         0       0       0
  3498 ;;      Temps:          0       6       0
  3499 ;;      Totals:         0       6       0
  3500 ;;Total ram usage:        6 bytes
  3501 ;; Hardware stack levels used:    1
  3502 ;; Hardware stack levels required when called:    2
  3503 ;; This function calls:
  3504 ;;		_FinishBuffer
  3505 ;;		_Get_CRC8
  3506 ;;		_RS845_ManageState
  3507 ;; This function is called by:
  3508 ;;		Interrupt level 1
  3509 ;; This function uses a non-reentrant model
  3510 ;;
  3511                           
  3512                           
  3513                           ;psect for function _UART_vidNewDataReceived
  3514  0601                     _UART_vidNewDataReceived:	
  3515                           
  3516                           ;UART_m.c: 37: if(RCIF == 1)
  3517  0601  1E8C               	btfss	12,5	;volatile
  3518  0602  2E1C               	goto	i1l143
  3519                           
  3520                           ;UART_m.c: 38: {
  3521                           ;UART_m.c: 39: GIE = 0;
  3522  0603  138B               	bcf	11,7	;volatile
  3523                           
  3524                           ;UART_m.c: 40: ptrFinishBuffer();
  3525  0604  087D               	movf	_ptrFinishBuffer,w
  3526  0605  2101               	fcall	i1fptable
  3527                           
  3528                           ;UART_m.c: 41: Data_Buffer.CRC = Get_CRC8(&Data_Buffer.DATA_BUFFER[0],((unsigned char)12
      +                          ) - 1);
  3529  0606  300B               	movlw	11
  3530  0607  1283               	bcf	3,5	;RP0=0, select bank0
  3531  0608  1303               	bcf	3,6	;RP1=0, select bank0
  3532  0609  00A0               	movwf	??_UART_vidNewDataReceived
  3533  060A  0820               	movf	??_UART_vidNewDataReceived,w
  3534  060B  00F0               	movwf	Get_CRC8@DataSize
  3535  060C  30B2               	movlw	(low (_Data_Buffer| 0))& (0+255)
  3536  060D  25A5               	fcall	_Get_CRC8
  3537  060E  1283               	bcf	3,5	;RP0=0, select bank0
  3538  060F  1303               	bcf	3,6	;RP1=0, select bank0
  3539  0610  00A1               	movwf	??_UART_vidNewDataReceived+1
  3540  0611  0821               	movf	??_UART_vidNewDataReceived+1,w
  3541  0612  1683               	bsf	3,5	;RP0=1, select bank1
  3542  0613  1303               	bcf	3,6	;RP1=0, select bank1
  3543  0614  00BD               	movwf	(_Data_Buffer^(0+128)+11)
  3544                           
  3545                           ;UART_m.c: 42: RS845_ManageState();
  3546  0615  26B4               	fcall	_RS845_ManageState
  3547                           
  3548                           ;UART_m.c: 43: GIE = 1;
  3549  0616  178B               	bsf	11,7	;volatile
  3550                           
  3551                           ;UART_m.c: 44: RCIF = 0;
  3552  0617  1283               	bcf	3,5	;RP0=0, select bank0
  3553  0618  1303               	bcf	3,6	;RP1=0, select bank0
  3554  0619  128C               	bcf	12,5	;volatile
  3555                           
  3556                           ;UART_m.c: 45: RC0 ^= 1;
  3557  061A  3001               	movlw	1
  3558  061B  0687               	xorwf	7,f
  3559  061C                     i1l143:	
  3560                           ;UART_m.c: 47: else
  3561                           ;UART_m.c: 48: {
  3562                           
  3563                           ;UART_m.c: 46: }
  3564                           
  3565  061C  0825               	movf	??_UART_vidNewDataReceived+5,w
  3566  061D  00FF               	movwf	127
  3567  061E  0824               	movf	??_UART_vidNewDataReceived+4,w
  3568  061F  008A               	movwf	10
  3569  0620  0823               	movf	??_UART_vidNewDataReceived+3,w
  3570  0621  0084               	movwf	4
  3571  0622  0E22               	swapf	(??_UART_vidNewDataReceived+2)^0,w
  3572  0623  0083               	movwf	3
  3573  0624  0EFE               	swapf	126,f
  3574  0625  0E7E               	swapf	126,w
  3575  0626  0009               	retfie
  3576  0627                     __end_of_UART_vidNewDataReceived:	
  3577                           
  3578                           	psect	intentry
  3579  0004                     __pintentry:	
  3580                           ;incstack = 0
  3581                           ; Regs used in _UART_vidNewDataReceived: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3582                           
  3583  0004                     interrupt_function:	
  3584  007E                     saved_w	set	btemp
  3585  0004  00FE               	movwf	btemp
  3586  0005  0E03               	swapf	3,w
  3587  0006  1283               	bcf	3,5	;RP0=0, select bank0
  3588  0007  1303               	bcf	3,6	;RP1=0, select bank0
  3589  0008  00A2               	movwf	??_UART_vidNewDataReceived+2
  3590  0009  0804               	movf	4,w
  3591  000A  00A3               	movwf	??_UART_vidNewDataReceived+3
  3592  000B  080A               	movf	10,w
  3593  000C  00A4               	movwf	??_UART_vidNewDataReceived+4
  3594  000D  087F               	movf	btemp+1,w
  3595  000E  00A5               	movwf	??_UART_vidNewDataReceived+5
  3596  000F  2E01               	ljmp	_UART_vidNewDataReceived
  3597                           
  3598                           	psect	text24
  3599  06B4                     __ptext24:	
  3600 ;; *************** function _RS845_ManageState *****************
  3601 ;; Defined at:
  3602 ;;		line 53 in file "UART_m.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;		None
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;		None
  3607 ;; Return value:  Size  Location     Type
  3608 ;;                  1    wreg      void 
  3609 ;; Registers used:
  3610 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMMON   BANK0   BANK1
  3616 ;;      Params:         0       0       0
  3617 ;;      Locals:         0       0       0
  3618 ;;      Temps:          0       0       0
  3619 ;;      Totals:         0       0       0
  3620 ;;Total ram usage:        0 bytes
  3621 ;; Hardware stack levels used:    1
  3622 ;; Hardware stack levels required when called:    1
  3623 ;; This function calls:
  3624 ;;		_UART_vidSend
  3625 ;; This function is called by:
  3626 ;;		_UART_vidNewDataReceived
  3627 ;; This function uses a non-reentrant model
  3628 ;;
  3629                           
  3630                           
  3631                           ;psect for function _RS845_ManageState
  3632  06B4                     _RS845_ManageState:	
  3633                           
  3634                           ;UART_m.c: 55: if(RCREG == (unsigned char)ECU_ID)
  3635                           
  3636                           ;incstack = 0
  3637                           ; Regs used in _RS845_ManageState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3638  06B4  1283               	bcf	3,5	;RP0=0, select bank0
  3639  06B5  1303               	bcf	3,6	;RP1=0, select bank0
  3640  06B6  081A               	movf	26,w	;volatile
  3641  06B7  065C               	xorwf	_ECU_ID,w
  3642  06B8  1D03               	skipz
  3643  06B9  0008               	return
  3644                           
  3645                           ;UART_m.c: 56: {
  3646                           ;UART_m.c: 57: UART_vidSend(&Data_Buffer.DATA_BUFFER[0],((unsigned char)12));
  3647  06BA  300C               	movlw	12
  3648  06BB  00F0               	movwf	UART_vidSend@Len
  3649  06BC  3000               	movlw	0
  3650  06BD  00F1               	movwf	UART_vidSend@Len+1
  3651  06BE  30B2               	movlw	(low (_Data_Buffer| 0))& (0+255)
  3652  06BF  25D6               	fcall	_UART_vidSend
  3653                           
  3654                           ;UART_m.c: 58: }
  3655  06C0  0008               	return
  3656  06C1                     __end_of_RS845_ManageState:	
  3657                           ;UART_m.c: 59: else
  3658                           ;UART_m.c: 60: {
  3659                           
  3660                           
  3661                           	psect	text25
  3662  05D6                     __ptext25:	
  3663 ;; *************** function _UART_vidSend *****************
  3664 ;; Defined at:
  3665 ;;		line 64 in file "UART_m.c"
  3666 ;; Parameters:    Size  Location     Type
  3667 ;;  data            1    wreg     const PTR unsigned char 
  3668 ;;		 -> Data_Buffer(12), 
  3669 ;;  Len             2    0[COMMON] const unsigned short 
  3670 ;; Auto vars:     Size  Location     Type
  3671 ;;  data            1    3[COMMON] const PTR unsigned char 
  3672 ;;		 -> Data_Buffer(12), 
  3673 ;;  UART_u16Inde    2    4[COMMON] unsigned short 
  3674 ;; Return value:  Size  Location     Type
  3675 ;;                  1    wreg      void 
  3676 ;; Registers used:
  3677 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3678 ;; Tracked objects:
  3679 ;;		On entry : 0/0
  3680 ;;		On exit  : 0/0
  3681 ;;		Unchanged: 0/0
  3682 ;; Data sizes:     COMMON   BANK0   BANK1
  3683 ;;      Params:         2       0       0
  3684 ;;      Locals:         3       0       0
  3685 ;;      Temps:          1       0       0
  3686 ;;      Totals:         6       0       0
  3687 ;;Total ram usage:        6 bytes
  3688 ;; Hardware stack levels used:    1
  3689 ;; This function calls:
  3690 ;;		Nothing
  3691 ;; This function is called by:
  3692 ;;		_RS845_ManageState
  3693 ;; This function uses a non-reentrant model
  3694 ;;
  3695                           
  3696                           
  3697                           ;psect for function _UART_vidSend
  3698  05D6                     _UART_vidSend:	
  3699                           
  3700                           ;incstack = 0
  3701                           ; Regs used in _UART_vidSend: [wreg-fsr0h+status,2+status,0]
  3702                           ;UART_vidSend@data stored from wreg
  3703  05D6  00F3               	movwf	UART_vidSend@data
  3704                           
  3705                           ;UART_m.c: 66: unsigned short UART_u16Index = 0;
  3706  05D7  01F4               	clrf	UART_vidSend@UART_u16Index
  3707  05D8  01F5               	clrf	UART_vidSend@UART_u16Index+1
  3708                           
  3709                           ;UART_m.c: 68: for(UART_u16Index = 0; UART_u16Index < Len; UART_u16Index++)
  3710  05D9  01F4               	clrf	UART_vidSend@UART_u16Index
  3711  05DA  01F5               	clrf	UART_vidSend@UART_u16Index+1
  3712  05DB  0871               	movf	UART_vidSend@Len+1,w
  3713  05DC  0275               	subwf	UART_vidSend@UART_u16Index+1,w
  3714  05DD  1D03               	skipz
  3715  05DE  2DE1               	goto	u59_25
  3716  05DF  0870               	movf	UART_vidSend@Len,w
  3717  05E0  0274               	subwf	UART_vidSend@UART_u16Index,w
  3718  05E1                     u59_25:	
  3719  05E1  1803               	btfsc	3,0
  3720  05E2  2DFD               	goto	i1l152
  3721  05E3                     i1l153:	
  3722                           ;UART_m.c: 69: {
  3723                           ;UART_m.c: 70: while(PIR1bits.TXIF == 0);
  3724                           
  3725  05E3  1283               	bcf	3,5	;RP0=0, select bank0
  3726  05E4  1303               	bcf	3,6	;RP1=0, select bank0
  3727  05E5  1E0C               	btfss	12,4	;volatile
  3728  05E6  2DE3               	goto	i1l153
  3729                           
  3730                           ;UART_m.c: 71: TXREG = data[UART_u16Index];
  3731  05E7  0874               	movf	UART_vidSend@UART_u16Index,w
  3732  05E8  0773               	addwf	UART_vidSend@data,w
  3733  05E9  00F2               	movwf	??_UART_vidSend
  3734  05EA  0872               	movf	??_UART_vidSend,w
  3735  05EB  0084               	movwf	4
  3736  05EC  1383               	bcf	3,7	;select IRP bank0
  3737  05ED  0800               	movf	0,w
  3738  05EE  0099               	movwf	25	;volatile
  3739  05EF  3001               	movlw	1
  3740  05F0  07F4               	addwf	UART_vidSend@UART_u16Index,f
  3741  05F1  1803               	skipnc
  3742  05F2  0AF5               	incf	UART_vidSend@UART_u16Index+1,f
  3743  05F3  3000               	movlw	0
  3744  05F4  07F5               	addwf	UART_vidSend@UART_u16Index+1,f
  3745  05F5  0871               	movf	UART_vidSend@Len+1,w
  3746  05F6  0275               	subwf	UART_vidSend@UART_u16Index+1,w
  3747  05F7  1D03               	skipz
  3748  05F8  2DFB               	goto	u61_25
  3749  05F9  0870               	movf	UART_vidSend@Len,w
  3750  05FA  0274               	subwf	UART_vidSend@UART_u16Index,w
  3751  05FB                     u61_25:	
  3752  05FB  1C03               	skipc
  3753  05FC  2DE3               	goto	i1l153
  3754  05FD                     i1l152:	
  3755                           
  3756                           ;UART_m.c: 72: }
  3757                           ;UART_m.c: 73: PIR1bits.TXIF = 0;
  3758  05FD  1283               	bcf	3,5	;RP0=0, select bank0
  3759  05FE  1303               	bcf	3,6	;RP1=0, select bank0
  3760  05FF  120C               	bcf	12,4	;volatile
  3761  0600  0008               	return
  3762  0601                     __end_of_UART_vidSend:	
  3763                           
  3764                           	psect	text26
  3765  05A5                     __ptext26:	
  3766 ;; *************** function _Get_CRC8 *****************
  3767 ;; Defined at:
  3768 ;;		line 10 in file "CRC8.c"
  3769 ;; Parameters:    Size  Location     Type
  3770 ;;  Data            1    wreg     PTR unsigned char 
  3771 ;;		 -> Data_Buffer(12), 
  3772 ;;  DataSize        1    0[COMMON] unsigned char 
  3773 ;; Auto vars:     Size  Location     Type
  3774 ;;  Data            1    3[COMMON] PTR unsigned char 
  3775 ;;		 -> Data_Buffer(12), 
  3776 ;;  CRC             1    6[COMMON] unsigned char 
  3777 ;;  bitIndex        1    5[COMMON] unsigned char 
  3778 ;;  DataIndex       1    4[COMMON] unsigned char 
  3779 ;; Return value:  Size  Location     Type
  3780 ;;                  1    wreg      unsigned char 
  3781 ;; Registers used:
  3782 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3783 ;; Tracked objects:
  3784 ;;		On entry : 0/0
  3785 ;;		On exit  : 0/0
  3786 ;;		Unchanged: 0/0
  3787 ;; Data sizes:     COMMON   BANK0   BANK1
  3788 ;;      Params:         1       0       0
  3789 ;;      Locals:         4       0       0
  3790 ;;      Temps:          2       0       0
  3791 ;;      Totals:         7       0       0
  3792 ;;Total ram usage:        7 bytes
  3793 ;; Hardware stack levels used:    1
  3794 ;; This function calls:
  3795 ;;		Nothing
  3796 ;; This function is called by:
  3797 ;;		_UART_vidNewDataReceived
  3798 ;; This function uses a non-reentrant model
  3799 ;;
  3800                           
  3801                           
  3802                           ;psect for function _Get_CRC8
  3803  05A5                     _Get_CRC8:	
  3804                           
  3805                           ;incstack = 0
  3806                           ; Regs used in _Get_CRC8: [wreg-fsr0h+status,2+status,0]
  3807                           ;Get_CRC8@Data stored from wreg
  3808  05A5  00F3               	movwf	Get_CRC8@Data
  3809                           
  3810                           ;CRC8.c: 12: unsigned char CRC = 0;
  3811  05A6  01F6               	clrf	Get_CRC8@CRC
  3812                           
  3813                           ;CRC8.c: 13: char DataIndex,bitIndex;
  3814                           ;CRC8.c: 15: for(DataIndex = 0; DataIndex < DataSize; DataIndex++)
  3815  05A7  01F4               	clrf	Get_CRC8@DataIndex
  3816  05A8                     i1l1381:	
  3817  05A8  0870               	movf	Get_CRC8@DataSize,w
  3818  05A9  0274               	subwf	Get_CRC8@DataIndex,w
  3819  05AA  1803               	btfsc	3,0
  3820  05AB  2DD4               	goto	i1l1383
  3821                           
  3822                           ;CRC8.c: 16: {
  3823                           ;CRC8.c: 18: CRC ^= Data[DataIndex];
  3824  05AC  0874               	movf	Get_CRC8@DataIndex,w
  3825  05AD  0773               	addwf	Get_CRC8@Data,w
  3826  05AE  00F1               	movwf	??_Get_CRC8
  3827  05AF  0871               	movf	??_Get_CRC8,w
  3828  05B0  0084               	movwf	4
  3829  05B1  1383               	bcf	3,7	;select IRP bank0
  3830  05B2  0800               	movf	0,w
  3831  05B3  00F2               	movwf	??_Get_CRC8+1
  3832  05B4  0872               	movf	??_Get_CRC8+1,w
  3833  05B5  06F6               	xorwf	Get_CRC8@CRC,f
  3834                           
  3835                           ;CRC8.c: 19: for(bitIndex = 0; bitIndex < 8; bitIndex++)
  3836  05B6  01F5               	clrf	Get_CRC8@bitIndex
  3837  05B7  3008               	movlw	8
  3838  05B8  0275               	subwf	Get_CRC8@bitIndex,w
  3839  05B9  1803               	btfsc	3,0
  3840  05BA  2DCF               	goto	i1l1379
  3841  05BB                     i1l282:	
  3842                           
  3843                           ;CRC8.c: 20: {
  3844                           ;CRC8.c: 21: if((CRC & 0x80) != 0)
  3845  05BB  1FF6               	btfss	Get_CRC8@CRC,7
  3846  05BC  2DC5               	goto	i1l1373
  3847                           
  3848                           ;CRC8.c: 22: {
  3849                           ;CRC8.c: 23: CRC = (CRC << 1) ^ 0x1DU;
  3850  05BD  0876               	movf	Get_CRC8@CRC,w
  3851  05BE  00F1               	movwf	??_Get_CRC8
  3852  05BF  0771               	addwf	??_Get_CRC8,w
  3853  05C0  3A1D               	xorlw	29
  3854  05C1  00F2               	movwf	??_Get_CRC8+1
  3855  05C2  0872               	movf	??_Get_CRC8+1,w
  3856  05C3  00F6               	movwf	Get_CRC8@CRC
  3857                           
  3858                           ;CRC8.c: 24: }
  3859  05C4  2DC7               	goto	i1l1375
  3860  05C5                     i1l1373:	
  3861                           
  3862                           ;CRC8.c: 25: else
  3863                           ;CRC8.c: 26: {
  3864                           ;CRC8.c: 27: CRC <<= 1;
  3865  05C5  1003               	clrc
  3866  05C6  0DF6               	rlf	Get_CRC8@CRC,f
  3867  05C7                     i1l1375:	
  3868  05C7  3001               	movlw	1
  3869  05C8  00F1               	movwf	??_Get_CRC8
  3870  05C9  0871               	movf	??_Get_CRC8,w
  3871  05CA  07F5               	addwf	Get_CRC8@bitIndex,f
  3872  05CB  3008               	movlw	8
  3873  05CC  0275               	subwf	Get_CRC8@bitIndex,w
  3874  05CD  1C03               	skipc
  3875  05CE  2DBB               	goto	i1l282
  3876  05CF                     i1l1379:	
  3877  05CF  3001               	movlw	1
  3878  05D0  00F1               	movwf	??_Get_CRC8
  3879  05D1  0871               	movf	??_Get_CRC8,w
  3880  05D2  07F4               	addwf	Get_CRC8@DataIndex,f
  3881  05D3  2DA8               	goto	i1l1381
  3882  05D4                     i1l1383:	
  3883                           
  3884                           ;CRC8.c: 28: }
  3885                           ;CRC8.c: 29: }
  3886                           ;CRC8.c: 30: }
  3887                           ;CRC8.c: 32: return CRC;
  3888  05D4  0876               	movf	Get_CRC8@CRC,w
  3889  05D5  0008               	return
  3890  05D6                     __end_of_Get_CRC8:	
  3891                           
  3892                           	psect	text27
  3893  0457                     __ptext27:	
  3894 ;; *************** function _FinishBuffer *****************
  3895 ;; Defined at:
  3896 ;;		line 88 in file "main.c"
  3897 ;; Parameters:    Size  Location     Type
  3898 ;;		None
  3899 ;; Auto vars:     Size  Location     Type
  3900 ;;		None
  3901 ;; Return value:  Size  Location     Type
  3902 ;;                  1    wreg      void 
  3903 ;; Registers used:
  3904 ;;		wreg, status,2, status,0, pclath, cstack
  3905 ;; Tracked objects:
  3906 ;;		On entry : 0/0
  3907 ;;		On exit  : 0/0
  3908 ;;		Unchanged: 0/0
  3909 ;; Data sizes:     COMMON   BANK0   BANK1
  3910 ;;      Params:         0       0       0
  3911 ;;      Locals:         0       0       0
  3912 ;;      Temps:          1       0       0
  3913 ;;      Totals:         1       0       0
  3914 ;;Total ram usage:        1 bytes
  3915 ;; Hardware stack levels used:    1
  3916 ;; Hardware stack levels required when called:    1
  3917 ;; This function calls:
  3918 ;;		_Get_Tempreture
  3919 ;; This function is called by:
  3920 ;;		_UART_vidNewDataReceived
  3921 ;; This function uses a non-reentrant model
  3922 ;;
  3923                           
  3924                           
  3925                           ;psect for function _FinishBuffer
  3926  0457                     _FinishBuffer:	
  3927                           
  3928                           ;main.c: 91: Data_Buffer.HX = XAVG>>8; Data_Buffer.LX=XAVG;
  3929                           
  3930                           ;incstack = 0
  3931                           ; Regs used in _FinishBuffer: [wreg+status,2+status,0+pclath+cstack]
  3932  0457  1283               	bcf	3,5	;RP0=0, select bank0
  3933  0458  1303               	bcf	3,6	;RP1=0, select bank0
  3934  0459  085B               	movf	_XAVG+1,w
  3935  045A  00FB               	movwf	??_FinishBuffer
  3936  045B  087B               	movf	??_FinishBuffer,w
  3937  045C  1683               	bsf	3,5	;RP0=1, select bank1
  3938  045D  1303               	bcf	3,6	;RP1=0, select bank1
  3939  045E  00B5               	movwf	(_Data_Buffer^(0+128)+3)
  3940  045F  1283               	bcf	3,5	;RP0=0, select bank0
  3941  0460  1303               	bcf	3,6	;RP1=0, select bank0
  3942  0461  085A               	movf	_XAVG,w
  3943  0462  00FB               	movwf	??_FinishBuffer
  3944  0463  087B               	movf	??_FinishBuffer,w
  3945  0464  1683               	bsf	3,5	;RP0=1, select bank1
  3946  0465  1303               	bcf	3,6	;RP1=0, select bank1
  3947  0466  00B6               	movwf	(_Data_Buffer^(0+128)+4)
  3948                           
  3949                           ;main.c: 92: Data_Buffer.HY = YAVG>>8; Data_Buffer.LY=YAVG;
  3950  0467  1283               	bcf	3,5	;RP0=0, select bank0
  3951  0468  1303               	bcf	3,6	;RP1=0, select bank0
  3952  0469  0859               	movf	_YAVG+1,w
  3953  046A  00FB               	movwf	??_FinishBuffer
  3954  046B  087B               	movf	??_FinishBuffer,w
  3955  046C  1683               	bsf	3,5	;RP0=1, select bank1
  3956  046D  1303               	bcf	3,6	;RP1=0, select bank1
  3957  046E  00B7               	movwf	(_Data_Buffer^(0+128)+5)
  3958  046F  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0470  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0471  0858               	movf	_YAVG,w
  3961  0472  00FB               	movwf	??_FinishBuffer
  3962  0473  087B               	movf	??_FinishBuffer,w
  3963  0474  1683               	bsf	3,5	;RP0=1, select bank1
  3964  0475  1303               	bcf	3,6	;RP1=0, select bank1
  3965  0476  00B8               	movwf	(_Data_Buffer^(0+128)+6)
  3966                           
  3967                           ;main.c: 93: Data_Buffer.HZ = ZAVG>>8; Data_Buffer.LZ=ZAVG;
  3968  0477  1283               	bcf	3,5	;RP0=0, select bank0
  3969  0478  1303               	bcf	3,6	;RP1=0, select bank0
  3970  0479  0857               	movf	_ZAVG+1,w
  3971  047A  00FB               	movwf	??_FinishBuffer
  3972  047B  087B               	movf	??_FinishBuffer,w
  3973  047C  1683               	bsf	3,5	;RP0=1, select bank1
  3974  047D  1303               	bcf	3,6	;RP1=0, select bank1
  3975  047E  00B9               	movwf	(_Data_Buffer^(0+128)+7)
  3976  047F  1283               	bcf	3,5	;RP0=0, select bank0
  3977  0480  1303               	bcf	3,6	;RP1=0, select bank0
  3978  0481  0856               	movf	_ZAVG,w
  3979  0482  00FB               	movwf	??_FinishBuffer
  3980  0483  087B               	movf	??_FinishBuffer,w
  3981  0484  1683               	bsf	3,5	;RP0=1, select bank1
  3982  0485  1303               	bcf	3,6	;RP1=0, select bank1
  3983  0486  00BA               	movwf	(_Data_Buffer^(0+128)+8)
  3984                           
  3985                           ;main.c: 94: Data_Buffer.HT = Get_Tempreture()>>8; Data_Buffer.LT = Get_Tempreture();
  3986  0487  2570               	fcall	_Get_Tempreture
  3987  0488  0871               	movf	?_Get_Tempreture+1,w
  3988  0489  00FB               	movwf	??_FinishBuffer
  3989  048A  087B               	movf	??_FinishBuffer,w
  3990  048B  1683               	bsf	3,5	;RP0=1, select bank1
  3991  048C  1303               	bcf	3,6	;RP1=0, select bank1
  3992  048D  00B3               	movwf	(_Data_Buffer^(0+128)+1)
  3993  048E  2570               	fcall	_Get_Tempreture
  3994  048F  0870               	movf	?_Get_Tempreture,w
  3995  0490  00FB               	movwf	??_FinishBuffer
  3996  0491  087B               	movf	??_FinishBuffer,w
  3997  0492  1683               	bsf	3,5	;RP0=1, select bank1
  3998  0493  1303               	bcf	3,6	;RP1=0, select bank1
  3999  0494  00B4               	movwf	(_Data_Buffer^(0+128)+2)
  4000                           
  4001                           ;main.c: 95: Data_Buffer.AVG_VibrationH = AVG>>8; Data_Buffer.AVG_VibrationL = AVG;
  4002  0495  1283               	bcf	3,5	;RP0=0, select bank0
  4003  0496  1303               	bcf	3,6	;RP1=0, select bank0
  4004  0497  0855               	movf	_AVG+1,w
  4005  0498  00FB               	movwf	??_FinishBuffer
  4006  0499  087B               	movf	??_FinishBuffer,w
  4007  049A  1683               	bsf	3,5	;RP0=1, select bank1
  4008  049B  1303               	bcf	3,6	;RP1=0, select bank1
  4009  049C  00BB               	movwf	(_Data_Buffer^(0+128)+9)
  4010  049D  1283               	bcf	3,5	;RP0=0, select bank0
  4011  049E  1303               	bcf	3,6	;RP1=0, select bank0
  4012  049F  0854               	movf	_AVG,w
  4013  04A0  00FB               	movwf	??_FinishBuffer
  4014  04A1  087B               	movf	??_FinishBuffer,w
  4015  04A2  1683               	bsf	3,5	;RP0=1, select bank1
  4016  04A3  1303               	bcf	3,6	;RP1=0, select bank1
  4017  04A4  00BC               	movwf	(_Data_Buffer^(0+128)+10)
  4018  04A5  0008               	return
  4019  04A6                     __end_of_FinishBuffer:	
  4020                           
  4021                           	psect	text28
  4022  0570                     __ptext28:	
  4023 ;; *************** function _Get_Tempreture *****************
  4024 ;; Defined at:
  4025 ;;		line 98 in file "main.c"
  4026 ;; Parameters:    Size  Location     Type
  4027 ;;		None
  4028 ;; Auto vars:     Size  Location     Type
  4029 ;;  Result          2    9[COMMON] unsigned short 
  4030 ;; Return value:  Size  Location     Type
  4031 ;;                  2    0[COMMON] unsigned short 
  4032 ;; Registers used:
  4033 ;;		wreg, status,2, status,0
  4034 ;; Tracked objects:
  4035 ;;		On entry : 0/0
  4036 ;;		On exit  : 0/0
  4037 ;;		Unchanged: 0/0
  4038 ;; Data sizes:     COMMON   BANK0   BANK1
  4039 ;;      Params:         2       0       0
  4040 ;;      Locals:         2       0       0
  4041 ;;      Temps:          7       0       0
  4042 ;;      Totals:        11       0       0
  4043 ;;Total ram usage:       11 bytes
  4044 ;; Hardware stack levels used:    1
  4045 ;; This function calls:
  4046 ;;		Nothing
  4047 ;; This function is called by:
  4048 ;;		_FinishBuffer
  4049 ;; This function uses a non-reentrant model
  4050 ;;
  4051                           
  4052                           
  4053                           ;psect for function _Get_Tempreture
  4054  0570                     _Get_Tempreture:	
  4055                           
  4056                           ;main.c: 100: unsigned short Result = 0x0000;
  4057                           
  4058                           ;incstack = 0
  4059                           ; Regs used in _Get_Tempreture: [wreg+status,2+status,0]
  4060  0570  01F9               	clrf	Get_Tempreture@Result
  4061  0571  01FA               	clrf	Get_Tempreture@Result+1
  4062                           
  4063                           ;main.c: 102: ADCON0 = 0x02;
  4064  0572  3002               	movlw	2
  4065  0573  1283               	bcf	3,5	;RP0=0, select bank0
  4066  0574  1303               	bcf	3,6	;RP1=0, select bank0
  4067  0575  009F               	movwf	31	;volatile
  4068                           
  4069                           ;main.c: 103: _delay((unsigned long)((6)*(20000000/4000.0)));
  4070  0576  3027               	movlw	39
  4071  0577  00F3               	movwf	??_Get_Tempreture+1
  4072  0578  30F5               	movlw	245
  4073  0579  00F2               	movwf	??_Get_Tempreture
  4074  057A                     u143_27:	
  4075  057A  0BF2               	decfsz	??_Get_Tempreture,f
  4076  057B  2D7A               	goto	u143_27
  4077  057C  0BF3               	decfsz	??_Get_Tempreture+1,f
  4078  057D  2D7A               	goto	u143_27
  4079                           
  4080                           ;main.c: 104: Result = ((unsigned short)ADRESH << 2)|((unsigned short)ADRESL >> 6);
  4081  057E  1683               	bsf	3,5	;RP0=1, select bank1
  4082  057F  1303               	bcf	3,6	;RP1=0, select bank1
  4083  0580  081E               	movf	30,w	;volatile
  4084  0581  00F2               	movwf	??_Get_Tempreture
  4085  0582  3006               	movlw	6
  4086  0583                     u58_25:	
  4087  0583  1003               	clrc
  4088  0584  0CF2               	rrf	??_Get_Tempreture,f
  4089  0585  3EFF               	addlw	-1
  4090  0586  1D03               	skipz
  4091  0587  2D83               	goto	u58_25
  4092  0588  0872               	movf	??_Get_Tempreture,w
  4093  0589  00F3               	movwf	??_Get_Tempreture+1
  4094  058A  01F4               	clrf	??_Get_Tempreture+2
  4095  058B  1283               	bcf	3,5	;RP0=0, select bank0
  4096  058C  1303               	bcf	3,6	;RP1=0, select bank0
  4097  058D  081E               	movf	30,w	;volatile
  4098  058E  00F5               	movwf	??_Get_Tempreture+3
  4099  058F  01F6               	clrf	??_Get_Tempreture+4
  4100  0590  1003               	clrc
  4101  0591  0DF5               	rlf	??_Get_Tempreture+3,f
  4102  0592  0DF6               	rlf	??_Get_Tempreture+4,f
  4103  0593  1003               	clrc
  4104  0594  0DF5               	rlf	??_Get_Tempreture+3,f
  4105  0595  0DF6               	rlf	??_Get_Tempreture+4,f
  4106  0596  0873               	movf	??_Get_Tempreture+1,w
  4107  0597  0475               	iorwf	??_Get_Tempreture+3,w
  4108  0598  00F7               	movwf	??_Get_Tempreture+5
  4109  0599  0874               	movf	??_Get_Tempreture+2,w
  4110  059A  0476               	iorwf	??_Get_Tempreture+4,w
  4111  059B  00F8               	movwf	??_Get_Tempreture+6
  4112  059C  0877               	movf	??_Get_Tempreture+5,w
  4113  059D  00F9               	movwf	Get_Tempreture@Result
  4114  059E  0878               	movf	??_Get_Tempreture+6,w
  4115  059F  00FA               	movwf	Get_Tempreture@Result+1
  4116                           
  4117                           ;main.c: 105: return Result;
  4118  05A0  087A               	movf	Get_Tempreture@Result+1,w
  4119  05A1  00F1               	movwf	?_Get_Tempreture+1
  4120  05A2  0879               	movf	Get_Tempreture@Result,w
  4121  05A3  00F0               	movwf	?_Get_Tempreture
  4122  05A4  0008               	return
  4123  05A5                     __end_of_Get_Tempreture:	
  4124  0002                     
  4125                           	psect	functab
  4126  0100                     __pfunctab:	
  4127  0100                     fptable:	
  4128  0100  2900               	goto	fptable	;no entries
  4129  0101                     __i1fptable:	
  4130  0101                     i1fptable:	
  4131  0101  00FF               	movwf	(btemp+1)& (0+127)
  4132  0102  3001               	movlw	high i1fptable
  4133  0103  008A               	movwf	10
  4134  0104  087F               	movf	(btemp+1)& (0+127),w
  4135  0105  0782               	addwf	2,f
  4136  0106                     i1fpbase:	
  4137  0106  2906               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
  4138  0107                     fp__FinishBuffer:	
  4139  0107  2C57               	ljmp	_FinishBuffer
  4140  0108                     __end_of__i1fptable:	
  4141  007E                     btemp	set	126	;btemp
  4142  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         29
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     44      61
    BANK1            32     18      30

Pointer List with Targets:

    Get_CRC8@Data	PTR unsigned char  size(1) Largest target is 12
		 -> Data_Buffer(BANK1[12]), 

    UART_vidSend@data	const PTR unsigned char  size(1) Largest target is 12
		 -> Data_Buffer(BANK1[12]), 

    ptrFinishBuffer	PTR FTN()void  size(1) Largest target is 1
		 -> FinishBuffer(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _UART_vidNewDataReceived in COMMON

    _UART_vidNewDataReceived->_FinishBuffer
    _RS845_ManageState->_UART_vidSend
    _FinishBuffer->_Get_Tempreture

Critical Paths under _main in BANK0

    _main->_get_average
    _main->_get_averageX
    _main->_get_averageY
    _main->_get_averageZ
    _ini_adxl345->_E_Write
    _E_Write->_I2CSend
    _get_averageZ->___aldiv
    _get_averageY->___aldiv
    _get_averageX->___aldiv
    _get_average->___aldiv
    ___aldiv->___lmul
    _UART_vidInit->_UART_u8GetNodeID
    _E_Read->_I2CRead

Critical Paths under _UART_vidNewDataReceived in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _UART_vidNewDataReceived in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                22    22      0    9846
                                             40 BANK0      4     4      0
                                              0 BANK1     18    18      0
                             _E_Read
                             _I2CAck
                            _I2CInit
                             _I2CNak
                            _I2CRead
                         _I2CRestart
                            _I2CSend
                           _I2CStart
                            _I2CStop
                       _UART_vidInit
                            ___lwdiv
                        _get_average
                       _get_averageX
                       _get_averageY
                       _get_averageZ
                        _ini_adxl345
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ini_adxl345                                          2     2      0     709
                                             10 BANK0      2     2      0
                            _E_Write
 ---------------------------------------------------------------------------------
 (2) _E_Write                                              3     0      3     709
                                              7 BANK0      3     0      3
                            _I2CSend
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (1) _get_averageZ                                         6     4      2    1921
                                             34 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _get_averageY                                         6     4      2    1921
                                             34 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _get_averageX                                         6     4      2    1921
                                             34 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (1) _get_average                                          6     4      2    1921
                                             34 BANK0      6     4      2
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              13     5      8     752
                                              6 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8    1061
                                             19 BANK0     15     7      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (1) ___lwdiv                                              8     4      4     703
                                              6 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (1) _UART_vidInit                                         1     1      0       0
                                              7 BANK0      1     1      0
                   _UART_u8GetNodeID
 ---------------------------------------------------------------------------------
 (2) _UART_u8GetNodeID                                     1     1      0       0
                                              6 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2CInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CAck                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _E_Read                                               4     2      2     361
                                              8 BANK0      4     2      2
                             _I2CNak
                            _I2CRead
                         _I2CRestart
                            _I2CSend
                           _I2CStart
                            _I2CStop
 ---------------------------------------------------------------------------------
 (3) _I2CStop                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2CStart                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _I2CSend                                              1     1      0      31
                                              6 BANK0      1     1      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (1) _I2CRestart                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CRead                                              2     2      0      34
                                              6 BANK0      2     2      0
                            _I2CWait
 ---------------------------------------------------------------------------------
 (4) _I2CWait                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _I2CNak                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _UART_vidNewDataReceived                              6     6      0     553
                                              0 BANK0      6     6      0
                       _FinishBuffer *
                           _Get_CRC8
                  _RS845_ManageState
 ---------------------------------------------------------------------------------
 (6) _RS845_ManageState                                    0     0      0     229
                       _UART_vidSend
 ---------------------------------------------------------------------------------
 (7) _UART_vidSend                                         6     4      2     229
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (6) _Get_CRC8                                             7     6      1     300
                                              0 COMMON     7     6      1
 ---------------------------------------------------------------------------------
 (6) _FinishBuffer                                         1     1      0      24
                                             11 COMMON     1     1      0
                     _Get_Tempreture
 ---------------------------------------------------------------------------------
 (7) _Get_Tempreture                                      11     9      2      24
                                              0 COMMON    11     9      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _E_Read
     _I2CNak
     _I2CRead
       _I2CWait
     _I2CRestart
     _I2CSend
       _I2CWait
     _I2CStart
     _I2CStop
   _I2CAck
   _I2CInit
   _I2CNak
   _I2CRead
     _I2CWait
   _I2CRestart
   _I2CSend
     _I2CWait
   _I2CStart
   _I2CStop
   _UART_vidInit
     _UART_u8GetNodeID
   ___lwdiv
   _get_average
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _get_averageX
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _get_averageY
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _get_averageZ
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _ini_adxl345
     _E_Write
       _I2CSend
         _I2CWait
       _I2CStart
       _I2CStop
   _system_init

 _UART_vidNewDataReceived (ROOT)
   _FinishBuffer *
     _Get_Tempreture
   _Get_CRC8 *
   _RS845_ManageState *
     _UART_vidSend

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               20     12      1E       6       93.8%
BITBANK1            20      0       0       5        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     2C      3D       4       76.3%
BITBANK0            50      0       0       3        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      C       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      69       8        0.0%
ABS                  0      0      69       7        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Mon Feb 01 00:22:27 2021

       ??_UART_vidNewDataReceived 0020                                 pc 0002                       __CFG_CP$OFF 0000  
                              _BF 04A0                                fsr 0004               __size_of_I2CRestart 0006  
             __end_of_system_init 065B                               l212 06EE                               l230 06E8  
                             l206 06F4                               l224 06E1                               l218 06FA  
                             l242 06C6                               l248 069A                               l426 0282  
                             _GIE 005F                               _AVG 0054                               _RC0 0038  
                             _PEN 048A                      __CFG_CPD$OFF 0000                               _SEN 0488  
                 __end_of_I2CInit 0697                   __end_of_I2CRead 06A7                   __end_of_I2CSend 06CC  
                             fsr0 0004                   __end_of_I2CWait 06D5                               indf 0000  
                 __end_of_I2CStop 06F1                      __CFG_FOSC$HS 0000                      __CFG_LVP$OFF 0000  
                     main@bw_rate 00A4                              l1541 04FB                              l1711 0560  
                            l1703 053C                              l1705 054A                              l1545 0511  
                            l1715 056B                              l1571 02A3                              l1563 0293  
                            l1581 02DB                              l1573 02B3                              l1727 015E  
                            l1497 06CC                              l1585 02E8                              l1589 02F6  
                            _ANS3 0C43                              _BRGH 04C2                              _CREN 00C4  
                            u1105 051B                              u1300 0438                              u1301 0439  
                            u1302 043E                              u1303 043F                              u1240 03E2  
                            u1241 03E3                              u1242 03E8                      ?_ini_adxl345 0070  
                            u1155 02A7                              u1243 03E9                              u1235 03BF  
                            u1260 038C                              u1325 053F                              u1261 038D  
                            u1262 0392                              u1175 02B5                              u1095 0513  
                            u1263 0393                              u1255 0369                              u1407 04B7  
                            u1280 0336                              u1345 054B                              u1185 02CA  
                            u1281 0337                              u1417 04CC                              u1282 033C  
                            u1355 0557                              u1195 02DC                              u1283 033D  
                            u1275 0313                              u1427 04E1                              u1365 0561  
                            u1295 0415                              u1387 0126                              u1397 0145  
                            _PEIE 005E                              _RCIE 0465                              _RCEN 048B  
                            _RCIF 0065                              _SPEN 00C7                              _RSEN 0489  
                            _XAVG 005A                              _YAVG 0058                              _ZAVG 0056  
                            _TXEN 04C5                    ??_get_averageX 0044                              _SYNC 04C4  
                  ??_get_averageY 0044                    ??_get_averageZ 0044                              _WPUB 0095  
                    __CFG_WRT$OFF 0000                              _main 0108                              btemp 007E  
                __end_of_I2CStart 06F7                   __end_of_E_Write 06B4                              start 0010  
                   __CFG_IESO$OFF 0000                     __CFG_MCLRE$ON 0000                       _Data_Buffer 00B2  
                 __end_of___aldiv 02FF                             ?_main 0070                             _ACKEN 048C  
                           _ACKDT 048D                     __CFG_WDTE$OFF 0000                             _ANSEL 0188  
                 __end_of___lwdiv 0570                             i1l143 061C                             i1l152 05FD  
                           i1l153 05E3                             i1l282 05BB                             _RCREG 001A  
                           _SPBRG 0099                             _PORTB 0006                             u61_25 05FB  
                           _TRISB 0086                             u58_25 0583                             u59_25 05E1  
                           _TXREG 0019               ___lmul@multiplicand 002A                    __CFG_FCMEN$OFF 0000  
                           main@X 00AC                             main@Y 00AE                             main@Z 00B0  
                           fpbase 0000                    __CFG_BOREN$OFF 0000                             pclath 000A  
                           status 0003                             wtemp0 007E                  __end_of_Get_CRC8 05D6  
         __size_of_Get_Tempreture 0035                   __initialization 0011                       _system_init 0642  
                    __end_of_main 0270                         ??_I2CInit 0026                         ??_I2CRead 0026  
                       ??_I2CSend 0026                         ??_I2CWait 0026                         ??_I2CStop 0026  
                          ??_main 0048              __end_of_FinishBuffer 04A6                            _ADCON0 001F  
                          _I2CAck 06DD                            _I2CNak 06E4                            _ADRESH 001E  
                          _ADRESL 009E                         ??_E_Write 002A                            _ANSELH 0189  
                          _ECU_ID 005C                      ??_I2CRestart 0026                            i1l1373 05C5  
                          i1l1381 05A8                            i1l1383 05D4                            i1l1375 05C7  
                          i1l1379 05CF                            u143_27 057A                        __i1fptable 0101  
                          _E_Read 065B                            _SSPADD 0093                            _TRISA3 042B  
                          _TRISC6 043E                            _TRISC7 043F                            _SSPCON 0014  
                          _SSPBUF 0013                   _ptrFinishBuffer 007D                    __CFG_PWRTE$OFF 0000  
            __size_of_get_average 0056                            ___lmul 04F1                         ??___aldiv 003B  
                       ??___lwdiv 002A              __end_of_get_averageX 0401              __end_of_get_averageY 03AB  
            __end_of_get_averageZ 0355                            main@XH 00A7                            main@YH 00A8  
                          main@ZH 00AA                            main@XL 00A6                            main@YL 00A9  
                          main@ZL 00AB                            main@id 00A0                __end_of_I2CRestart 06FD  
                          fptable 0100                      __pdataCOMMON 007D                            fptotal 0000  
                       ?_I2CStart 0070                            saved_w 007E           __end_of__initialization 001D  
            __size_of_ini_adxl345 004B                 ?_UART_u8GetNodeID 0070                    __pcstackCOMMON 0070  
               get_average@OutPut 004C                ??_UART_u8GetNodeID 0026                    _OPTION_REGbits 0081  
                      ??_I2CStart 0026                         ?_Get_CRC8 0070                           ?_I2CAck 0070  
                         ?_I2CNak 0070                        __pbssBANK0 004C                        __pbssBANK1 00B2  
                 get_average@Data 0042                           ?_E_Read 0028                    _Get_Tempreture 0570  
                      I2CSend@dat 0026                        __pmaintext 0108                           ?___lmul 0026  
                      __pintentry 0004                           _I2CInit 0684                           _I2CRead 0697  
                         _I2CSend 06C1                           _I2CWait 06CC                    ___lmul@product 002F  
                         _I2CStop 06EB             __size_of_FinishBuffer 004F                   UART_vidSend@Len 0070  
                      ??_Get_CRC8 0071                           _SSPCON2 0091                   __size_of_I2CAck 0007  
                 __size_of_I2CNak 0007                           _SSPSTAT 0094                           _E_Write 06A7  
          __end_of_Get_Tempreture 05A5                           i1fpbase 0106                   __size_of_E_Read 0016  
        ?_UART_vidNewDataReceived 0070                         E_Write@ch 0029                      _FinishBuffer 0457  
                    ?_system_init 0070             __size_of_get_averageX 0056             __size_of_get_averageY 0056  
           __size_of_get_averageZ 0056                           ___aldiv 0270                   __size_of___lmul 0041  
                         ___lwdiv 0532                           __ptext1 0642                           __ptext2 04A6  
                         __ptext3 06A7                           __ptext4 02FF                           __ptext5 0355  
                         __ptext6 03AB                           __ptext7 0401                           __ptext8 04F1  
                         __ptext9 0270               __size_of__i1fptable 0007                     ?_UART_vidInit 0070  
                   ?_UART_vidSend 0070                  ___aldiv@dividend 0037                           clrloop0 06D6  
                         main@pow 00A2              end_of_initialization 001D                   ?_Get_Tempreture 0070  
                    _get_averageX 03AB                      _get_averageY 0355                      _get_averageZ 02FF  
                Get_CRC8@DataSize 0070                   _RECEIVED_ECU_ID 007C                  ___aldiv@quotient 003E  
                  ??_UART_vidInit 0027                    ??_UART_vidSend 0072                         _TRISCbits 0087  
               __size_of_I2CStart 0006   __end_of_UART_vidNewDataReceived 0627                    __end_of_I2CAck 06E4  
                  __end_of_I2CNak 06EB                     ??_get_average 0044                    __end_of_E_Read 0671  
                Get_CRC8@bitIndex 0075                    __end_of___lmul 0532                     __pidataCOMMON 06FD  
              get_averageX@OutPut 0052               start_initialization 0011         __size_of_UART_u8GetNodeID 0013  
              get_averageY@OutPut 0050                get_averageZ@OutPut 004E                          ??_I2CAck 0026  
                        ??_I2CNak 0026                 __size_of_Get_CRC8 0031                     ??_ini_adxl345 002A  
                        ??_E_Read 002A                      Get_CRC8@Data 0073                       E_Write@addr 0027  
                        ??___lmul 002E               __end_of_get_average 0457              __size_of_system_init 0019  
                        ?_I2CInit 0070                          ?_I2CRead 0070                          ?_I2CSend 0070  
                        ?_I2CWait 0070                          ?_I2CStop 0070         UART_vidSend@UART_u16Index 0074  
              __end_of__i1fptable 0108                       __pbssCOMMON 007C                         ___latbits 0000  
                   __pcstackBANK0 0020                     __pcstackBANK1 00A0                  get_averageX@Data 0042  
                get_averageY@Data 0042                  get_averageZ@Data 0042                          ?_E_Write 0027  
                     I2CRead@temp 0027              __end_of_UART_vidInit 0642              __end_of_UART_vidSend 0601  
               _RS845_ManageState 06B4                         __pnvBANK0 005C               __end_of_ini_adxl345 04F1  
                ___lwdiv@dividend 0028                ?_RS845_ManageState 0070                         __pfunctab 0100  
                        ?___aldiv 0033                          ?___lwdiv 0026               ??_RS845_ManageState 0076  
                        E_Read@ch 002B  __size_of_UART_vidNewDataReceived 0026                          _I2CStart 06F1  
                ??_Get_Tempreture 0072                  ___lwdiv@quotient 002C                  UART_vidSend@data 0073  
       __end_of_RS845_ManageState 06C1                   ___aldiv@divisor 0033                 interrupt_function 0004  
                 ___aldiv@counter 003C                         clear_ram0 06D5                       _get_average 0401  
                      E_Read@addr 0028                          _PIR1bits 000C                          _PIR2bits 000D  
                __size_of_I2CInit 0013                  __size_of_I2CRead 0010                  __size_of_I2CSend 000B  
                __size_of_I2CWait 0009                  __size_of_I2CStop 0006                  _UART_u8GetNodeID 0671  
                        _Get_CRC8 05A5                          i1fptable 0101                 ___lmul@multiplier 0026  
                        i1fptotal 0002                        _I2CRestart 06F7                       _ini_adxl345 04A6  
                __size_of_E_Write 000D                       Get_CRC8@CRC 0076                  __size_of___aldiv 008F  
                __size_of___lwdiv 003E                   ___lwdiv@divisor 0026                   ___lwdiv@counter 002B  
                        __ptext10 0532                          __ptext11 0627                          __ptext20 0697  
                        __ptext12 0671                          __ptext21 06CC                          __ptext13 0684  
                        __ptext22 06E4                          __ptext14 06DD                          __ptext23 0601  
                        __ptext15 065B                          __ptext24 06B4                          __ptext16 06EB  
                        __ptext25 05D6                          __ptext17 06F1                          __ptext26 05A5  
                        __ptext18 06C1                          __ptext27 0457                          __ptext19 06F7  
                        __ptext28 0570                 __CFG_BOR4V$BOR40V 0000             __size_of_UART_vidInit 001B  
           __size_of_UART_vidSend 002B        __size_of_RS845_ManageState 000D                   fp__FinishBuffer 0107  
                   __size_of_main 0168           _UART_vidNewDataReceived 0601                      _UART_vidInit 0627  
                    _UART_vidSend 05D6                       ?_I2CRestart 0070                          intlevel1 0100  
               Get_CRC8@DataIndex 0074                     ?_FinishBuffer 0070                     ??_system_init 0026  
            Get_Tempreture@Result 0079                      ___aldiv@sign 003D                     ?_get_averageX 0042  
                   ?_get_averageY 0042                     ?_get_averageZ 0042                      ?_get_average 0042  
                  ??_FinishBuffer 007B          __end_of_UART_u8GetNodeID 0684  
